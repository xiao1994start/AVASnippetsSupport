/*! For license information please see extension.js.LICENSE.txt */
(()=>{"use strict";var e={2743:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.DebugSession=n.ErrorDestination=n.MemoryEvent=n.InvalidatedEvent=n.ProgressEndEvent=n.ProgressUpdateEvent=n.ProgressStartEvent=n.CapabilitiesEvent=n.LoadedSourceEvent=n.ModuleEvent=n.BreakpointEvent=n.ThreadEvent=n.OutputEvent=n.ExitedEvent=n.TerminatedEvent=n.InitializedEvent=n.ContinuedEvent=n.StoppedEvent=n.CompletionItem=n.Module=n.Breakpoint=n.Variable=n.Thread=n.StackFrame=n.Scope=n.Source=void 0;const a=t(5538),i=t(3586),o=t(5359),s=t(7016);n.Source=class{constructor(e,n,t=0,a,i){this.name=e,this.path=n,this.sourceReference=t,a&&(this.origin=a),i&&(this.adapterData=i)}},n.Scope=class{constructor(e,n,t=!1){this.name=e,this.variablesReference=n,this.expensive=t}},n.StackFrame=class{constructor(e,n,t,a=0,i=0){this.id=e,this.source=t,this.line=a,this.column=i,this.name=n}},n.Thread=class{constructor(e,n){this.id=e,this.name=n||"Thread #"+e}},n.Variable=class{constructor(e,n,t=0,a,i){this.name=e,this.value=n,this.variablesReference=t,"number"==typeof i&&(this.namedVariables=i),"number"==typeof a&&(this.indexedVariables=a)}},n.Breakpoint=class{constructor(e,n,t,a){this.verified=e;const i=this;"number"==typeof n&&(i.line=n),"number"==typeof t&&(i.column=t),a&&(i.source=a)}setId(e){this.id=e}},n.Module=class{constructor(e,n){this.id=e,this.name=n}},n.CompletionItem=class{constructor(e,n,t=0){this.label=e,this.start=n,this.length=t}};class r extends i.Event{constructor(e,n,t){super("stopped"),this.body={reason:e},"number"==typeof n&&(this.body.threadId=n),"string"==typeof t&&(this.body.text=t)}}n.StoppedEvent=r;class l extends i.Event{constructor(e,n){super("continued"),this.body={threadId:e},"boolean"==typeof n&&(this.body.allThreadsContinued=n)}}n.ContinuedEvent=l;class h extends i.Event{constructor(){super("initialized")}}n.InitializedEvent=h;class c extends i.Event{constructor(e){super("terminated"),("boolean"==typeof e||e)&&(this.body={restart:e})}}n.TerminatedEvent=c;class d extends i.Event{constructor(e){super("exited"),this.body={exitCode:e}}}n.ExitedEvent=d;class u extends i.Event{constructor(e,n="console",t){super("output"),this.body={category:n,output:e},void 0!==t&&(this.body.data=t)}}n.OutputEvent=u;class p extends i.Event{constructor(e,n){super("thread"),this.body={reason:e,threadId:n}}}n.ThreadEvent=p;class g extends i.Event{constructor(e,n){super("breakpoint"),this.body={reason:e,breakpoint:n}}}n.BreakpointEvent=g;class m extends i.Event{constructor(e,n){super("module"),this.body={reason:e,module:n}}}n.ModuleEvent=m;class f extends i.Event{constructor(e,n){super("loadedSource"),this.body={reason:e,source:n}}}n.LoadedSourceEvent=f;class y extends i.Event{constructor(e){super("capabilities"),this.body={capabilities:e}}}n.CapabilitiesEvent=y;class b extends i.Event{constructor(e,n,t){super("progressStart"),this.body={progressId:e,title:n},"string"==typeof t&&(this.body.message=t)}}n.ProgressStartEvent=b;class T extends i.Event{constructor(e,n){super("progressUpdate"),this.body={progressId:e},"string"==typeof n&&(this.body.message=n)}}n.ProgressUpdateEvent=T;class w extends i.Event{constructor(e,n){super("progressEnd"),this.body={progressId:e},"string"==typeof n&&(this.body.message=n)}}n.ProgressEndEvent=w;class v extends i.Event{constructor(e,n,t){super("invalidated"),this.body={},e&&(this.body.areas=e),n&&(this.body.threadId=n),t&&(this.body.stackFrameId=t)}}n.InvalidatedEvent=v;class k extends i.Event{constructor(e,n,t){super("memory"),this.body={memoryReference:e,offset:n,count:t}}}var _;n.MemoryEvent=k,function(e){e[e.User=1]="User",e[e.Telemetry=2]="Telemetry"}(_=n.ErrorDestination||(n.ErrorDestination={}));class x extends a.ProtocolServer{constructor(e,n){super();const t="boolean"==typeof e&&e;this._debuggerLinesStartAt1=t,this._debuggerColumnsStartAt1=t,this._debuggerPathsAreURIs=!1,this._clientLinesStartAt1=!0,this._clientColumnsStartAt1=!0,this._clientPathsAreURIs=!1,this._isServer="boolean"==typeof n&&n,this.on("close",(()=>{this.shutdown()})),this.on("error",(e=>{this.shutdown()}))}setDebuggerPathFormat(e){this._debuggerPathsAreURIs="path"!==e}setDebuggerLinesStartAt1(e){this._debuggerLinesStartAt1=e}setDebuggerColumnsStartAt1(e){this._debuggerColumnsStartAt1=e}setRunAsServer(e){this._isServer=e}static run(e){(0,o.runDebugAdapter)(e)}shutdown(){this._isServer||this._isRunningInline()||setTimeout((()=>{process.exit(0)}),100)}sendErrorResponse(e,n,t,a,i=_.User){let o;"number"==typeof n?(o={id:n,format:t},a&&(o.variables=a),i&_.User&&(o.showUser=!0),i&_.Telemetry&&(o.sendTelemetry=!0)):o=n,e.success=!1,e.message=x.formatPII(o.format,!0,o.variables),e.body||(e.body={}),e.body.error=o,this.sendResponse(e)}runInTerminalRequest(e,n,t){this.sendRequest("runInTerminal",e,n,t)}dispatchRequest(e){const n=new i.Response(e);try{if("initialize"===e.command){var t=e.arguments;if("boolean"==typeof t.linesStartAt1&&(this._clientLinesStartAt1=t.linesStartAt1),"boolean"==typeof t.columnsStartAt1&&(this._clientColumnsStartAt1=t.columnsStartAt1),"path"!==t.pathFormat)this.sendErrorResponse(n,2018,"debug adapter only supports native paths",null,_.Telemetry);else{const e=n;e.body={},this.initializeRequest(e,t)}}else"launch"===e.command?this.launchRequest(n,e.arguments,e):"attach"===e.command?this.attachRequest(n,e.arguments,e):"disconnect"===e.command?this.disconnectRequest(n,e.arguments,e):"terminate"===e.command?this.terminateRequest(n,e.arguments,e):"restart"===e.command?this.restartRequest(n,e.arguments,e):"setBreakpoints"===e.command?this.setBreakPointsRequest(n,e.arguments,e):"setFunctionBreakpoints"===e.command?this.setFunctionBreakPointsRequest(n,e.arguments,e):"setExceptionBreakpoints"===e.command?this.setExceptionBreakPointsRequest(n,e.arguments,e):"configurationDone"===e.command?this.configurationDoneRequest(n,e.arguments,e):"continue"===e.command?this.continueRequest(n,e.arguments,e):"next"===e.command?this.nextRequest(n,e.arguments,e):"stepIn"===e.command?this.stepInRequest(n,e.arguments,e):"stepOut"===e.command?this.stepOutRequest(n,e.arguments,e):"stepBack"===e.command?this.stepBackRequest(n,e.arguments,e):"reverseContinue"===e.command?this.reverseContinueRequest(n,e.arguments,e):"restartFrame"===e.command?this.restartFrameRequest(n,e.arguments,e):"goto"===e.command?this.gotoRequest(n,e.arguments,e):"pause"===e.command?this.pauseRequest(n,e.arguments,e):"stackTrace"===e.command?this.stackTraceRequest(n,e.arguments,e):"scopes"===e.command?this.scopesRequest(n,e.arguments,e):"variables"===e.command?this.variablesRequest(n,e.arguments,e):"setVariable"===e.command?this.setVariableRequest(n,e.arguments,e):"setExpression"===e.command?this.setExpressionRequest(n,e.arguments,e):"source"===e.command?this.sourceRequest(n,e.arguments,e):"threads"===e.command?this.threadsRequest(n,e):"terminateThreads"===e.command?this.terminateThreadsRequest(n,e.arguments,e):"evaluate"===e.command?this.evaluateRequest(n,e.arguments,e):"stepInTargets"===e.command?this.stepInTargetsRequest(n,e.arguments,e):"gotoTargets"===e.command?this.gotoTargetsRequest(n,e.arguments,e):"completions"===e.command?this.completionsRequest(n,e.arguments,e):"exceptionInfo"===e.command?this.exceptionInfoRequest(n,e.arguments,e):"loadedSources"===e.command?this.loadedSourcesRequest(n,e.arguments,e):"dataBreakpointInfo"===e.command?this.dataBreakpointInfoRequest(n,e.arguments,e):"setDataBreakpoints"===e.command?this.setDataBreakpointsRequest(n,e.arguments,e):"readMemory"===e.command?this.readMemoryRequest(n,e.arguments,e):"writeMemory"===e.command?this.writeMemoryRequest(n,e.arguments,e):"disassemble"===e.command?this.disassembleRequest(n,e.arguments,e):"cancel"===e.command?this.cancelRequest(n,e.arguments,e):"breakpointLocations"===e.command?this.breakpointLocationsRequest(n,e.arguments,e):"setInstructionBreakpoints"===e.command?this.setInstructionBreakpointsRequest(n,e.arguments,e):this.customRequest(e.command,n,e.arguments,e)}catch(e){this.sendErrorResponse(n,1104,"{_stack}",{_exception:e.message,_stack:e.stack},_.Telemetry)}}initializeRequest(e,n){e.body.supportsConditionalBreakpoints=!1,e.body.supportsHitConditionalBreakpoints=!1,e.body.supportsFunctionBreakpoints=!1,e.body.supportsConfigurationDoneRequest=!0,e.body.supportsEvaluateForHovers=!1,e.body.supportsStepBack=!1,e.body.supportsSetVariable=!1,e.body.supportsRestartFrame=!1,e.body.supportsStepInTargetsRequest=!1,e.body.supportsGotoTargetsRequest=!1,e.body.supportsCompletionsRequest=!1,e.body.supportsRestartRequest=!1,e.body.supportsExceptionOptions=!1,e.body.supportsValueFormattingOptions=!1,e.body.supportsExceptionInfoRequest=!1,e.body.supportTerminateDebuggee=!1,e.body.supportsDelayedStackTraceLoading=!1,e.body.supportsLoadedSourcesRequest=!1,e.body.supportsLogPoints=!1,e.body.supportsTerminateThreadsRequest=!1,e.body.supportsSetExpression=!1,e.body.supportsTerminateRequest=!1,e.body.supportsDataBreakpoints=!1,e.body.supportsReadMemoryRequest=!1,e.body.supportsDisassembleRequest=!1,e.body.supportsCancelRequest=!1,e.body.supportsBreakpointLocationsRequest=!1,e.body.supportsClipboardContext=!1,e.body.supportsSteppingGranularity=!1,e.body.supportsInstructionBreakpoints=!1,e.body.supportsExceptionFilterOptions=!1,this.sendResponse(e)}disconnectRequest(e,n,t){this.sendResponse(e),this.shutdown()}launchRequest(e,n,t){this.sendResponse(e)}attachRequest(e,n,t){this.sendResponse(e)}terminateRequest(e,n,t){this.sendResponse(e)}restartRequest(e,n,t){this.sendResponse(e)}setBreakPointsRequest(e,n,t){this.sendResponse(e)}setFunctionBreakPointsRequest(e,n,t){this.sendResponse(e)}setExceptionBreakPointsRequest(e,n,t){this.sendResponse(e)}configurationDoneRequest(e,n,t){this.sendResponse(e)}continueRequest(e,n,t){this.sendResponse(e)}nextRequest(e,n,t){this.sendResponse(e)}stepInRequest(e,n,t){this.sendResponse(e)}stepOutRequest(e,n,t){this.sendResponse(e)}stepBackRequest(e,n,t){this.sendResponse(e)}reverseContinueRequest(e,n,t){this.sendResponse(e)}restartFrameRequest(e,n,t){this.sendResponse(e)}gotoRequest(e,n,t){this.sendResponse(e)}pauseRequest(e,n,t){this.sendResponse(e)}sourceRequest(e,n,t){this.sendResponse(e)}threadsRequest(e,n){this.sendResponse(e)}terminateThreadsRequest(e,n,t){this.sendResponse(e)}stackTraceRequest(e,n,t){this.sendResponse(e)}scopesRequest(e,n,t){this.sendResponse(e)}variablesRequest(e,n,t){this.sendResponse(e)}setVariableRequest(e,n,t){this.sendResponse(e)}setExpressionRequest(e,n,t){this.sendResponse(e)}evaluateRequest(e,n,t){this.sendResponse(e)}stepInTargetsRequest(e,n,t){this.sendResponse(e)}gotoTargetsRequest(e,n,t){this.sendResponse(e)}completionsRequest(e,n,t){this.sendResponse(e)}exceptionInfoRequest(e,n,t){this.sendResponse(e)}loadedSourcesRequest(e,n,t){this.sendResponse(e)}dataBreakpointInfoRequest(e,n,t){this.sendResponse(e)}setDataBreakpointsRequest(e,n,t){this.sendResponse(e)}readMemoryRequest(e,n,t){this.sendResponse(e)}writeMemoryRequest(e,n,t){this.sendResponse(e)}disassembleRequest(e,n,t){this.sendResponse(e)}cancelRequest(e,n,t){this.sendResponse(e)}breakpointLocationsRequest(e,n,t){this.sendResponse(e)}setInstructionBreakpointsRequest(e,n,t){this.sendResponse(e)}customRequest(e,n,t,a){this.sendErrorResponse(n,1014,"unrecognized request",null,_.Telemetry)}convertClientLineToDebugger(e){return this._debuggerLinesStartAt1?this._clientLinesStartAt1?e:e+1:this._clientLinesStartAt1?e-1:e}convertDebuggerLineToClient(e){return this._debuggerLinesStartAt1?this._clientLinesStartAt1?e:e-1:this._clientLinesStartAt1?e+1:e}convertClientColumnToDebugger(e){return this._debuggerColumnsStartAt1?this._clientColumnsStartAt1?e:e+1:this._clientColumnsStartAt1?e-1:e}convertDebuggerColumnToClient(e){return this._debuggerColumnsStartAt1?this._clientColumnsStartAt1?e:e-1:this._clientColumnsStartAt1?e+1:e}convertClientPathToDebugger(e){return this._clientPathsAreURIs!==this._debuggerPathsAreURIs?this._clientPathsAreURIs?x.uri2path(e):x.path2uri(e):e}convertDebuggerPathToClient(e){return this._debuggerPathsAreURIs!==this._clientPathsAreURIs?this._debuggerPathsAreURIs?x.uri2path(e):x.path2uri(e):e}static path2uri(e){"win32"===process.platform&&(/^[A-Z]:/.test(e)&&(e=e[0].toLowerCase()+e.substr(1)),e=e.replace(/\\/g,"/")),e=encodeURI(e);let n=new s.URL("file:");return n.pathname=e,n.toString()}static uri2path(e){let n=new s.URL(e),t=decodeURIComponent(n.pathname);return"win32"===process.platform&&(/^\/[a-zA-Z]:/.test(t)&&(t=t[1].toLowerCase()+t.substr(2)),t=t.replace(/\//g,"\\")),t}static formatPII(e,n,t){return e.replace(x._formatPIIRegexp,(function(e,a){return n&&a.length>0&&"_"!==a[0]?e:t[a]&&t.hasOwnProperty(a)?t[a]:e}))}}n.DebugSession=x,x._formatPIIRegexp=/{([^}]+)}/g},2715:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.Handles=void 0,n.Handles=class{constructor(e){this.START_HANDLE=1e3,this._handleMap=new Map,this._nextHandle="number"==typeof e?e:this.START_HANDLE}reset(){this._nextHandle=this.START_HANDLE,this._handleMap=new Map}create(e){var n=this._nextHandle++;return this._handleMap.set(n,e),n}get(e,n){return this._handleMap.get(e)||n}}},8711:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.InternalLogger=void 0;const a=t(9896),i=t(6928),o=t(8194);function s(){let e=new Date;return r(2,String(e.getUTCHours()))+":"+r(2,String(e.getUTCMinutes()))+":"+r(2,String(e.getUTCSeconds()))+"."+r(3,String(e.getUTCMilliseconds()))+" UTC"}function r(e,n){return n.length>=e?n:String("0".repeat(e)+n).slice(-e)}n.InternalLogger=class{constructor(e,n){this.beforeExitCallback=()=>this.dispose(),this._logCallback=e,this._logToConsole=n,this._minLogLevel=o.LogLevel.Warn,this.disposeCallback=(e,n)=>{this.dispose(),n=n||2,n+=128,process.exit(n)}}async setup(e){if(this._minLogLevel=e.consoleMinLogLevel,this._prependTimestamp=e.prependTimestamp,e.logFilePath)if(i.isAbsolute(e.logFilePath)){const n=n=>this.sendLog(`Error creating log file at path: ${e.logFilePath}. Error: ${n.toString()}\n`,o.LogLevel.Error);try{await a.promises.mkdir(i.dirname(e.logFilePath),{recursive:!0}),this.log("Verbose logs are written to:\n",o.LogLevel.Warn),this.log(e.logFilePath+"\n",o.LogLevel.Warn),this._logFileStream=a.createWriteStream(e.logFilePath),this.logDateTime(),this.setupShutdownListeners(),this._logFileStream.on("error",(e=>{n(e)}))}catch(e){n(e)}}else this.log(`logFilePath must be an absolute path: ${e.logFilePath}`,o.LogLevel.Error)}logDateTime(){let e=new Date;const n=e.getUTCFullYear()+"-"+`${e.getUTCMonth()+1}-`+e.getUTCDate()+", "+s();this.log(n+"\n",o.LogLevel.Verbose,!1)}setupShutdownListeners(){process.on("beforeExit",this.beforeExitCallback),process.on("SIGTERM",this.disposeCallback),process.on("SIGINT",this.disposeCallback)}removeShutdownListeners(){process.removeListener("beforeExit",this.beforeExitCallback),process.removeListener("SIGTERM",this.disposeCallback),process.removeListener("SIGINT",this.disposeCallback)}dispose(){return new Promise((e=>{this.removeShutdownListeners(),this._logFileStream?(this._logFileStream.end(e),this._logFileStream=null):e()}))}log(e,n,t=!0){if(this._minLogLevel!==o.LogLevel.Stop){if(n>=this._minLogLevel&&this.sendLog(e,n),this._logToConsole){const t=n===o.LogLevel.Error?console.error:n===o.LogLevel.Warn?console.warn:null;t&&t((0,o.trimLastNewline)(e))}n===o.LogLevel.Error&&(e=`[${o.LogLevel[n]}] ${e}`),this._prependTimestamp&&t&&(e="["+s()+"] "+e),this._logFileStream&&this._logFileStream.write(e)}}sendLog(e,n){if(e.length>1500){const n=!!e.match(/(\n|\r\n)$/);e=e.substr(0,1500)+"[...]",n&&(e+="\n")}if(this._logCallback){const t=new o.LogOutputEvent(e,n);this._logCallback(t)}}}},8194:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.trimLastNewline=n.LogOutputEvent=n.logger=n.Logger=n.LogLevel=void 0;const a=t(8711),i=t(2743);var o;!function(e){e[e.Verbose=0]="Verbose",e[e.Log=1]="Log",e[e.Warn=2]="Warn",e[e.Error=3]="Error",e[e.Stop=4]="Stop"}(o=n.LogLevel||(n.LogLevel={}));class s{constructor(){this._pendingLogQ=[]}log(e,n=o.Log){e+="\n",this._write(e,n)}verbose(e){this.log(e,o.Verbose)}warn(e){this.log(e,o.Warn)}error(e){this.log(e,o.Error)}dispose(){if(this._currentLogger){const e=this._currentLogger.dispose();return this._currentLogger=null,e}return Promise.resolve()}_write(e,n=o.Log){e+="",this._pendingLogQ?this._pendingLogQ.push({msg:e,level:n}):this._currentLogger&&this._currentLogger.log(e,n)}setup(e,n,t=!0){const a="string"==typeof n?n:n&&this._logFilePathFromInit;if(this._currentLogger){const n={consoleMinLogLevel:e,logFilePath:a,prependTimestamp:t};this._currentLogger.setup(n).then((()=>{if(this._pendingLogQ){const e=this._pendingLogQ;this._pendingLogQ=null,e.forEach((e=>this._write(e.msg,e.level)))}}))}}init(e,n,t){this._pendingLogQ=this._pendingLogQ||[],this._currentLogger=new a.InternalLogger(e,t),this._logFilePathFromInit=n}}n.Logger=s,n.logger=new s;class r extends i.OutputEvent{constructor(e,n){super(e,n===o.Error?"stderr":n===o.Warn?"console":"stdout")}}n.LogOutputEvent=r,n.trimLastNewline=function(e){return e.replace(/(\n|\r\n)$/,"")}},7308:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.LoggingDebugSession=void 0;const a=t(8194),i=a.logger,o=t(2743);class s extends o.DebugSession{constructor(e,n,t){super(n,t),this.obsolete_logFilePath=e,this.on("error",(e=>{i.error(e.body)}))}start(e,n){super.start(e,n),i.init((e=>this.sendEvent(e)),this.obsolete_logFilePath,this._isServer)}sendEvent(e){if(!(e instanceof a.LogOutputEvent)){let n=e;e instanceof o.OutputEvent&&e.body&&e.body.data&&e.body.data.doNotLogOutput&&(delete e.body.data.doNotLogOutput,n={...e},n.body={...e.body,output:"<output not logged>"}),i.verbose(`To client: ${JSON.stringify(n)}`)}super.sendEvent(e)}sendRequest(e,n,t,a){i.verbose(`To client: ${JSON.stringify(e)}(${JSON.stringify(n)}), timeout: ${t}`),super.sendRequest(e,n,t,a)}sendResponse(e){i.verbose(`To client: ${JSON.stringify(e)}`),super.sendResponse(e)}dispatchRequest(e){i.verbose(`From client: ${e.command}(${JSON.stringify(e.arguments)})`),super.dispatchRequest(e)}}n.LoggingDebugSession=s},8675:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.Handles=n.Response=n.Event=n.ErrorDestination=n.CompletionItem=n.Module=n.Source=n.Breakpoint=n.Variable=n.Scope=n.StackFrame=n.Thread=n.MemoryEvent=n.InvalidatedEvent=n.ProgressEndEvent=n.ProgressUpdateEvent=n.ProgressStartEvent=n.CapabilitiesEvent=n.LoadedSourceEvent=n.ModuleEvent=n.BreakpointEvent=n.ThreadEvent=n.OutputEvent=n.ContinuedEvent=n.StoppedEvent=n.ExitedEvent=n.TerminatedEvent=n.InitializedEvent=n.logger=n.Logger=n.LoggingDebugSession=n.DebugSession=void 0;const a=t(2743);Object.defineProperty(n,"DebugSession",{enumerable:!0,get:function(){return a.DebugSession}}),Object.defineProperty(n,"InitializedEvent",{enumerable:!0,get:function(){return a.InitializedEvent}}),Object.defineProperty(n,"TerminatedEvent",{enumerable:!0,get:function(){return a.TerminatedEvent}}),Object.defineProperty(n,"ExitedEvent",{enumerable:!0,get:function(){return a.ExitedEvent}}),Object.defineProperty(n,"StoppedEvent",{enumerable:!0,get:function(){return a.StoppedEvent}}),Object.defineProperty(n,"ContinuedEvent",{enumerable:!0,get:function(){return a.ContinuedEvent}}),Object.defineProperty(n,"OutputEvent",{enumerable:!0,get:function(){return a.OutputEvent}}),Object.defineProperty(n,"ThreadEvent",{enumerable:!0,get:function(){return a.ThreadEvent}}),Object.defineProperty(n,"BreakpointEvent",{enumerable:!0,get:function(){return a.BreakpointEvent}}),Object.defineProperty(n,"ModuleEvent",{enumerable:!0,get:function(){return a.ModuleEvent}}),Object.defineProperty(n,"LoadedSourceEvent",{enumerable:!0,get:function(){return a.LoadedSourceEvent}}),Object.defineProperty(n,"CapabilitiesEvent",{enumerable:!0,get:function(){return a.CapabilitiesEvent}}),Object.defineProperty(n,"ProgressStartEvent",{enumerable:!0,get:function(){return a.ProgressStartEvent}}),Object.defineProperty(n,"ProgressUpdateEvent",{enumerable:!0,get:function(){return a.ProgressUpdateEvent}}),Object.defineProperty(n,"ProgressEndEvent",{enumerable:!0,get:function(){return a.ProgressEndEvent}}),Object.defineProperty(n,"InvalidatedEvent",{enumerable:!0,get:function(){return a.InvalidatedEvent}}),Object.defineProperty(n,"MemoryEvent",{enumerable:!0,get:function(){return a.MemoryEvent}}),Object.defineProperty(n,"Thread",{enumerable:!0,get:function(){return a.Thread}}),Object.defineProperty(n,"StackFrame",{enumerable:!0,get:function(){return a.StackFrame}}),Object.defineProperty(n,"Scope",{enumerable:!0,get:function(){return a.Scope}}),Object.defineProperty(n,"Variable",{enumerable:!0,get:function(){return a.Variable}}),Object.defineProperty(n,"Breakpoint",{enumerable:!0,get:function(){return a.Breakpoint}}),Object.defineProperty(n,"Source",{enumerable:!0,get:function(){return a.Source}}),Object.defineProperty(n,"Module",{enumerable:!0,get:function(){return a.Module}}),Object.defineProperty(n,"CompletionItem",{enumerable:!0,get:function(){return a.CompletionItem}}),Object.defineProperty(n,"ErrorDestination",{enumerable:!0,get:function(){return a.ErrorDestination}});const i=t(7308);Object.defineProperty(n,"LoggingDebugSession",{enumerable:!0,get:function(){return i.LoggingDebugSession}});const o=t(8194);n.Logger=o;const s=t(3586);Object.defineProperty(n,"Event",{enumerable:!0,get:function(){return s.Event}}),Object.defineProperty(n,"Response",{enumerable:!0,get:function(){return s.Response}});const r=t(2715);Object.defineProperty(n,"Handles",{enumerable:!0,get:function(){return r.Handles}});const l=o.logger;n.logger=l},3586:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.Event=n.Response=n.Message=void 0;class t{constructor(e){this.seq=0,this.type=e}}n.Message=t,n.Response=class extends t{constructor(e,n){super("response"),this.request_seq=e.seq,this.command=e.command,n?(this.success=!1,this.message=n):this.success=!0}},n.Event=class extends t{constructor(e,n){super("event"),this.event=e,n&&(this.body=n)}}},5538:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.ProtocolServer=void 0;const a=t(4434),i=t(3586);class o{get event(){return this._event||(this._event=(e,n)=>{let t;return this._listener=e,this._this=n,t={dispose:()=>{this._listener=void 0,this._this=void 0}},t}),this._event}fire(e){if(this._listener)try{this._listener.call(this._this,e)}catch(e){}}hasListener(){return!!this._listener}dispose(){this._listener=void 0,this._this=void 0}}class s extends a.EventEmitter{constructor(){super(),this._sendMessage=new o,this._sequence=1,this._pendingRequests=new Map,this.onDidSendMessage=this._sendMessage.event}dispose(){}handleMessage(e){if("request"===e.type)this.dispatchRequest(e);else if("response"===e.type){const n=e,t=this._pendingRequests.get(n.request_seq);t&&(this._pendingRequests.delete(n.request_seq),t(n))}}_isRunningInline(){return this._sendMessage&&this._sendMessage.hasListener()}start(e,n){this._writableStream=n,this._rawData=Buffer.alloc(0),e.on("data",(e=>this._handleData(e))),e.on("close",(()=>{this._emitEvent(new i.Event("close"))})),e.on("error",(e=>{this._emitEvent(new i.Event("error","inStream error: "+(e&&e.message)))})),n.on("error",(e=>{this._emitEvent(new i.Event("error","outStream error: "+(e&&e.message)))})),e.resume()}stop(){this._writableStream&&this._writableStream.end()}sendEvent(e){this._send("event",e)}sendResponse(e){e.seq>0?console.error(`attempt to send more than one response for command ${e.command}`):this._send("response",e)}sendRequest(e,n,t,a){const o={command:e};if(n&&Object.keys(n).length>0&&(o.arguments=n),this._send("request",o),a){this._pendingRequests.set(o.seq,a);const e=setTimeout((()=>{clearTimeout(e);const n=this._pendingRequests.get(o.seq);n&&(this._pendingRequests.delete(o.seq),n(new i.Response(o,"timeout")))}),t)}}dispatchRequest(e){}_emitEvent(e){this.emit(e.event,e)}_send(e,n){if(n.type=e,n.seq=this._sequence++,this._writableStream){const e=JSON.stringify(n);this._writableStream.write(`Content-Length: ${Buffer.byteLength(e,"utf8")}\r\n\r\n${e}`,"utf8")}this._sendMessage.fire(n)}_handleData(e){for(this._rawData=Buffer.concat([this._rawData,e]);;){if(this._contentLength>=0){if(this._rawData.length>=this._contentLength){const e=this._rawData.toString("utf8",0,this._contentLength);if(this._rawData=this._rawData.slice(this._contentLength),this._contentLength=-1,e.length>0)try{let n=JSON.parse(e);this.handleMessage(n)}catch(e){this._emitEvent(new i.Event("error","Error handling data: "+(e&&e.message)))}continue}}else{const e=this._rawData.indexOf(s.TWO_CRLF);if(-1!==e){const n=this._rawData.toString("utf8",0,e).split("\r\n");for(let e=0;e<n.length;e++){const t=n[e].split(/: +/);"Content-Length"==t[0]&&(this._contentLength=+t[1])}this._rawData=this._rawData.slice(e+s.TWO_CRLF.length);continue}}break}}}n.ProtocolServer=s,s.TWO_CRLF="\r\n\r\n"},5359:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.runDebugAdapter=void 0;const a=t(9278);n.runDebugAdapter=function(e){let n=0;if(process.argv.slice(2).forEach((function(e,t,a){const i=/^--server=(\d{4,5})$/.exec(e);i&&(n=parseInt(i[1],10))})),n>0)console.error(`waiting for debug protocol on port ${n}`),a.createServer((n=>{console.error(">> accepted connection from client"),n.on("end",(()=>{console.error(">> client connection closed\n")}));const t=new e(!1,!0);t.setRunAsServer(!0),t.start(n,n)})).listen(n);else{const n=new e(!1);process.on("SIGTERM",(()=>{n.shutdown()})),n.start(process.stdin,process.stdout)}}},3074:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.Character=void 0;const a=t(9647),i=t(1208);n.Character=class{name;image;resolvedName;dynamic;arguments;filename;location;constructor(e,n,t,o,s,r){if(this.name=e,this.image=n,this.dynamic="True"===t,this.arguments=o,this.filename=s,this.location=r,this.dynamic){this.resolvedName=e;const n=i.NavigationData.data.location.define[e];if(n){const e=(0,a.getDefinitionFromFile)(n[0],n[1]);if(e){const n=e.keyword.split("=");n&&2===n.length&&(this.resolvedName=n[1].trim())}}}else this.resolvedName=e}}},2418:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.colorProvider=void 0,n.getColorInformation=l,n.getColorPresentations=h,n.injectCustomColorStyles=c,n.findColorMatches=d,n.convertRgbToHex=u,n.convertColorToRgbTuple=p,n.convertHtmlToColor=g,n.convertRenpyColorToColor=m,n.convertRgbColorToColor=y;const a=t(1398),i=t(5238),o=t(7414),s=t(5420),r=t(6592);async function l(e){await c(e);const n=[];for(let t=0;t<e.lineCount;++t){const i=e.lineAt(t);if(!i.isEmptyOrWhitespace){const e=i.text,t=d(e);if(t){let o=0;for(const s in t){const r=t[s];let l,h=new a.Range(i.lineNumber,e.indexOf(r,o),i.lineNumber,e.indexOf(r,o)+r.length);if(r.startsWith('"#')||r.startsWith("'#")){const e=r.substring(0,1);r.endsWith(e)&&(l=g(r))}else r.startsWith("rgb")?l=y(r):r.startsWith("color")?l=m(r):r.startsWith("Color(")&&(l=m(r),l&&(h=new a.Range(h.start.line,h.start.character+6,h.end.line,h.end.character)));l&&n.push(new a.ColorInformation(h,l)),o=e.indexOf(r,o)+1}}}}return n}function h(e,n){const t=[],i=n.range,o=n.document.getText(i),s=new a.Range(i.start,i.end),r=Math.round(255*e.red),l=Math.round(255*e.green),h=Math.round(255*e.blue),c=Math.round(255*e.alpha);let d="";if(o.startsWith('"#')||o.startsWith("'#")){const e=o.substring(0,1);d=255!==c||6!==o.length&&9!==o.length?u(r,l,h,c)||"":u(r,l,h)||"",d=e+d+e}else o.startsWith("rgb")?d=p(e):o.startsWith("color")?d=`color=(${r}, ${l}, ${h}, ${c})`:o.startsWith("(")&&o.endsWith(")")&&(d=`(${r}, ${l}, ${h}, ${c})`);if(d.length>0){const e=new a.ColorPresentation(d);e.textEdit=new a.TextEdit(s,d),t.push(e)}return t}async function c(e){const n=(await o.Tokenizer.tokenizeDocument(e)).filter((e=>e.token?.type===s.LiteralTokenType.Color)),t=new i.ValueEqualsSet;n.forEach((n=>{const a=e.getText(n.token?.getVSCodeRange()).toLowerCase(),i=new r.TextMateRule(`renpy.meta.color.${a}`,{foreground:a});t.add(i)})),(0,r.injectCustomTextmateTokens)(t)}function d(e){return e.match(/(["']#)[0-9a-fA-F]{8}(["'])|(["']#)[0-9a-fA-F]{6}(["'])|(["']#)[0-9a-fA-F]{4}(["'])|(["']#)[0-9a-fA-F]{3}(["'])|Color\(\((\d+),\s*(\d+),\s*(\d+)?\)|Color\(\((\d+),\s*(\d+),\s*(\d+),\s*(\d+)?\)|rgb\s*=\s*\(([.\d]+),\s*([.\d]+),\s*([.\d]+)?\)|color\s*=\s*\((\d+),\s*(\d+),\s*(\d+)?\)|color\s*=\s*\((\d+),\s*(\d+),\s*(\d+),\s*(\d+)?\)/gi)}function u(e,n,t,a){return e>255||n>255||t>255||(a??0)>255?null:void 0===a?"#"+((1<<24)+(e<<16)+(n<<8)+t).toString(16).slice(1):"#"+(256+e).toString(16).substring(1)+((1<<24)+(n<<16)+(t<<8)+a).toString(16).substring(1)}function p(e){return`rgb=(${e.red.toFixed(4).toString().replace(".0000",".0").replace(".000",".0").replace(".00",".0")}, ${e.green.toFixed(4).toString().replace(".0000",".0").replace(".000",".0").replace(".00",".0")}, ${e.blue.toFixed(4).toString().replace(".0000",".0").replace(".000",".0").replace(".00",".0")})`}function g(e){if(!/^(?:"|')?#(?:[a-f\d]{8}|[a-f\d]{6}|[a-f\d]{3,4})(?:"|')?$/gi.test(e))return null;let n=e.replace(/"|'|#/g,"");3===n.length?n+="f":6===n.length&&(n+="ff"),4===n.length&&(n=n.replace(/([a-f\d])/gi,"$1$1"));const t=n.match(/[a-f\d]{2}/gi);return new a.Color(parseInt(t[0],16)/255,parseInt(t[1],16)/255,parseInt(t[2],16)/255,parseInt(t[3],16)/255)}function m(e){try{const n=e.replaceAll(" ","").replace(/[Cc]olor=?\(/g,"").replace(")","").split(",");if(n.length<3)return null;const t=parseInt(n[0],16)/255,i=parseInt(n[1],16)/255,o=parseInt(n[2],16)/255,s=4===n.length?parseInt(n[3],16)/255:1;return new a.Color(t,i,o,s)}catch(e){return null}}function f(e){return e.startsWith(".")?parseFloat("0"+e):parseFloat(e)}function y(e){try{const n=e.replaceAll(" ","").replace(/rgb=\(/g,"").replace(")","").split(",");return 3===n.length?new a.Color(f(n[0]),f(n[1]),f(n[2]),1):null}catch(e){return null}}n.colorProvider=a.languages.registerColorProvider("renpy",{provideDocumentColors(e,n){if(!n.isCancellationRequested)return new Promise((n=>{n(l(e))}))},provideColorPresentations(e,n,t){if(!t.isCancellationRequested)return new Promise((t=>{t(h(e,n))}))}})},8227:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.completionProvider=void 0,n.getCompletionList=r,n.getAutoCompleteList=l,n.getAutoCompleteKeywords=h;const a=t(1398),i=t(9647),o=t(9983),s=t(1208);function r(e,n,t){if(t.triggerKind===a.CompletionTriggerKind.TriggerCharacter){const i=e.lineAt(n).text,r=i.substring(0,n.character);if(!s.NavigationData.positionIsCleanForCompletion(i,n))return;if(r.endsWith("renpy."))return s.NavigationData.renpyAutoComplete;if(r.endsWith("config."))return s.NavigationData.configAutoComplete;if(r.endsWith("gui."))return s.NavigationData.guiAutoComplete;if(r.endsWith("renpy.music."))return l("renpy.music.");if(r.endsWith("renpy.audio."))return l("renpy.audio.");{const s=new a.Position(n.line,n.character-1),r=e.getWordRangeAtPosition(s),h=(0,o.getCurrentContext)(e,n);if(r){const t=new a.Position(n.line,i.length-i.trimStart().length),o=e.getText(e.getWordRangeAtPosition(t));return l(e.getText(r),o,h)}if("-"===t.triggerCharacter||"@"===t.triggerCharacter||"="===t.triggerCharacter||" "===t.triggerCharacter){const o=new a.Position(n.line,i.length-i.trimStart().length),s=e.getText(e.getWordRangeAtPosition(o));if(s)return"="===t.triggerCharacter?l(s):l(t.triggerCharacter,s,h)}}}}function l(e,n="",t=""){const i=[],o=function(){const e=[],n=s.NavigationData.autoCompleteKeywords.play;if(n){const t=n.split("|");for(const n in t)if(t[n].startsWith("{")){const a=t[n].replace("{","").replace("}",""),i=s.NavigationData.gameObjects[a];for(const n in i)e.push(n)}else e.push(t[n])}return e}(),r=Object.keys(s.NavigationData.gameObjects.characters);if("renpy.music."===e||"renpy.audio."===e){e=e.replace("renpy.","").trim();const n=s.NavigationData.renpyAutoComplete.filter((n=>{"string"==typeof n.label&&n.label.startsWith(e)}));for(const t of n)"string"==typeof t.label&&i.push(new a.CompletionItem(t.label.replace(e,""),t.kind));return i}if("persistent"===e){const e=s.NavigationData.data.location.persistent;for(const n in e)i.push(new a.CompletionItem(n,a.CompletionItemKind.Value));return i}if("store"===e){const e=s.NavigationData.gameObjects.define_types,n=Object.keys(e).filter((n=>"default"===e[n].define));for(const e of n)i.push(new a.CompletionItem(e,a.CompletionItemKind.Variable));return i}if(o.includes(e)){if(n&&"stop"===n)i.push(new a.CompletionItem("fadeout",a.CompletionItemKind.Keyword));else{const e=s.NavigationData.data.location.define,n=Object.keys(e).filter((e=>e.startsWith("audio.")));for(const e of n)i.push(new a.CompletionItem(e.substring(6),a.CompletionItemKind.Variable))}return i}if(s.NavigationData.isClass(e)){const n=s.NavigationData.isClass(e);if(n)return s.NavigationData.getClassAutoComplete(n)}else{if(l=e,s.NavigationData.gameObjects.stores[l])return function(e){const n=[],t=p(e);if(t)for(const e of t)n.push(e);const i=`store.${e}`;if(void 0!==s.NavigationData.gameObjects.fields[i]){const e=s.NavigationData.gameObjects.fields[i];for(const t of e){const e=t.keyword.split(".");if(2===e.length){const t=e[1];n.push(new a.CompletionItem(t,a.CompletionItemKind.Variable))}}}return n}(e);if(function(e){const n=e+".",t=s.NavigationData.data.location.callable;return!!t&&Object.keys(t).some((e=>0===e.indexOf(n)))}(e))return p(e);if(function(e){const n=e+".",t=s.NavigationData.renpyFunctions.internal;return!!t&&Object.keys(t).some((e=>0===e.indexOf(n)))}(e))return function(e){const n=[],t=e+".",i=s.NavigationData.renpyFunctions.internal;if(i){const e=Object.keys(i).filter((e=>0===e.indexOf(t)));if(e)for(const i in e){const o=e[i].substring(t.length);n.push(new a.CompletionItem(o,a.CompletionItemKind.Method))}}return n}(e);if("label"===t&&r.includes(n)){const e=s.NavigationData.gameObjects.attributes[n];if(e)for(const n of e)i.push(new a.CompletionItem(n,a.CompletionItemKind.Value))}else{if(!function(e){const n=s.NavigationData.gameObjects.define_types;if(n){const t=n[e];if(t)return""!==t.type}return!1}(e))return h(e,n,t);{const n=s.NavigationData.gameObjects.define_types[e];if(n)return h(n.type,"","python")}}}var l;return i}function h(e,n,t){let o,r=[];if(t&&(o=s.NavigationData.autoCompleteKeywords[`${t}.${e}`]),o||(o=s.NavigationData.autoCompleteKeywords[e]),o){const e=o.split("|");for(const n in e)if(e[n].startsWith("{")){let t=e[n].replace("{","").replace("}",""),o=!1,l=0;if(t.indexOf("!")>0){const e=t.split("!");t=e[0],o="q"===e[1],c(e[1])&&(l=Math.floor(Number(e[1])))}if("action"===t){const e=s.NavigationData.renpyFunctions.internal,n=Object.keys(e).filter((n=>"Action"===e[n][4]));if(n)for(const t of n){const n=e[t][2];r.push(new a.CompletionItem({label:t,detail:n},a.CompletionItemKind.Value))}continue}if("function"===t){const e=s.NavigationData.data.location.callable;if(e){const n=Object.keys(e).filter((e=>-1===e.indexOf(".")));for(const t of n){const n=e[t],o=(0,i.getDefinitionFromFile)(n[0],n[1]);let s="";o&&(s=o.args,l>0&&o.args.split(",").length!==l)||r.push(new a.CompletionItem({label:t,detail:s},a.CompletionItemKind.Function))}}}else{if("layer"===t){const e=d(o);if(e)for(const n of e)r.push(n);continue}if("screens"===t){const e=s.NavigationData.data.location.screen;for(let n in e)o&&(n='"'+n+'"'),r.push(new a.CompletionItem(n,a.CompletionItemKind.Variable));return r}if("label"===t){r.push(new a.CompletionItem("expression",a.CompletionItemKind.Keyword));const e=s.NavigationData.data.location.label;for(let n in e)o&&(n='"'+n+'"'),r.push(new a.CompletionItem(n,a.CompletionItemKind.Value));return r}if("outlines"===t){let e=[];if(s.NavigationData.data.location[t])if(e=s.NavigationData.data.location[t].array||[],e)for(const n of e){const e=new a.CompletionItem(n,a.CompletionItemKind.Value);e.sortText="1"+n,r.push(e)}else e=[];e.includes('[(1, "#000000", 0, 0)]')||r.push(new a.CompletionItem('[(1, "#000000", 0, 0)]',a.CompletionItemKind.Value)),e.includes('[(1, "#000000", 1, 1)]')||r.push(new a.CompletionItem('[(1, "#000000", 1, 1)]',a.CompletionItemKind.Value)),r.push(new a.CompletionItem('[(absolute(1), "#000000", absolute(1), absolute(1))]',a.CompletionItemKind.Value)),r.push(new a.CompletionItem("[(size, color, xoffset, yoffset)]",a.CompletionItemKind.Value));continue}if("displayable"===t){const e=u(o);if(e)for(const n of e)r.push(n);continue}if("audio"===t){const e=s.NavigationData.data.location.define,n=Object.keys(e).filter((e=>e.startsWith("audio.")));for(const e of n){const n=new a.CompletionItem(e,a.CompletionItemKind.Variable);n.sortText="0"+e,r.push(n)}const t=s.NavigationData.gameObjects.audio;if(t)for(const e in t)if(!r.some((n=>n.label===e))){let n;t[e].startsWith('"')?(n=new a.CompletionItem(t[e],a.CompletionItemKind.Folder),n.sortText="2"+e):(n=new a.CompletionItem(t[e],a.CompletionItemKind.Value),n.sortText="1"+e),r.push(n)}continue}if("transforms"===t){const e=s.NavigationData.renpyFunctions.internal,n=Object.keys(e).filter((n=>"transforms"===e[n][0]));for(const t of n){const n=e[t][2];r.push(new a.CompletionItem({label:t,detail:n},a.CompletionItemKind.Value))}const t=s.NavigationData.data.location.transform;for(const e in t)s.NavigationData.gameObjects.define_types[e]&&r.push(new a.CompletionItem(e,a.CompletionItemKind.Value));continue}if("transitions"===t){const e=s.NavigationData.renpyFunctions.internal;r.push(new a.CompletionItem("None",a.CompletionItemKind.Value));const n=Object.keys(e).filter((n=>"transitions"===e[n][0]));for(const t of n){const n=e[t][2];r.push(new a.CompletionItem({label:t,detail:n},a.CompletionItemKind.Value))}const t=s.NavigationData.gameObjects.define_types,i=Object.keys(t).filter((e=>"transitions"===t[e].type));for(const e of i)r.push(new a.CompletionItem(e,a.CompletionItemKind.Value));continue}}const h=s.NavigationData.gameObjects[t];if(h)for(let e in h){o&&(e='"'+e+'"');const n=new a.CompletionItem(e,a.CompletionItemKind.Value);n.sortText=o?"2"+e:"1"+e,r.push(n)}else{const e=s.NavigationData.data.location[t];if(e)for(let n in e){o&&(n='"'+n+'"');const e=new a.CompletionItem(n,a.CompletionItemKind.Value);e.sortText=o?"2"+n:"1"+n,r.push(e)}}}else{let t=new a.CompletionItem(e[n],a.CompletionItemKind.Constant);if(e[n].indexOf("(")>0){const i=e[n].substring(0,e[n].indexOf("(")),o=e[n].substring(e[n].indexOf("("));t=new a.CompletionItem({label:i,detail:o},a.CompletionItemKind.Method)}t.sortText="0"+e[n],r.push(t)}}return 0===r.length&&n.length>0?(r=h(`parent.${t}.${n}`,"",""),r.length>0?r:h(`parent.${n}`,"","")):r}function c(e){const n=Math.floor(Number(e));return n!==1/0&&String(n)===e&&n>=0}function d(e=!1){const n=[],t=s.NavigationData.find("config.layers");if(t)for(const o of t)if(o.args){const t=o.args.replace(/ /g,"").replace(/'/g,'"').replace("=","").trim(),i=JSON.parse(t);if(i){for(let t of i)e&&(t='"'+t+'"'),n.push(new a.CompletionItem(t,a.CompletionItemKind.Variable));return n}}else{const t=(0,i.getDefinitionFromFile)(o.filename,o.location),s=t?.keyword.replace(/ /g,"").replace(/'/g,'"').replace("defineconfig.layers=","");if(s){const t=JSON.parse(s);for(let i of t)e&&(i='"'+i+'"'),n.push(new a.CompletionItem(i,a.CompletionItemKind.Variable));return n}}}function u(e=!1){if(void 0===s.NavigationData.displayableAutoComplete||0===s.NavigationData.displayableAutoComplete.length||void 0===s.NavigationData.displayableQuotedAutoComplete||0===s.NavigationData.displayableQuotedAutoComplete.length){s.NavigationData.displayableAutoComplete=[],s.NavigationData.displayableQuotedAutoComplete=[];const e=a.workspace.getConfiguration("renpy");let n=!0;e&&!e.showAutomaticImagesInCompletion&&(n=!1);const t=s.NavigationData.data.location.displayable;for(const e in t){const i=t[e];if(i.location<0&&n){let n=new a.CompletionItem(e,a.CompletionItemKind.Folder);n.sortText="1"+e,s.NavigationData.displayableAutoComplete.push(n),n=new a.CompletionItem('"'+e+'"',a.CompletionItemKind.Folder),n.sortText="1"+e,s.NavigationData.displayableQuotedAutoComplete.push(n)}else if(i.location>=0){let n=new a.CompletionItem(e,a.CompletionItemKind.Value);n.sortText="0"+e,s.NavigationData.displayableAutoComplete.push(n),n=new a.CompletionItem('"'+e+'"',a.CompletionItemKind.Value),n.sortText="0"+e,s.NavigationData.displayableQuotedAutoComplete.push(n)}}if(!s.NavigationData.displayableAutoComplete.some((e=>"black"===e.label))){const e=new a.CompletionItem("black",a.CompletionItemKind.Value);e.sortText="0black",s.NavigationData.displayableAutoComplete.push(e)}if(!s.NavigationData.displayableQuotedAutoComplete.some((e=>"black"===e.label))){const e=new a.CompletionItem('"black"',a.CompletionItemKind.Value);e.sortText="0black",s.NavigationData.displayableQuotedAutoComplete.push(e)}}return e?s.NavigationData.displayableQuotedAutoComplete:s.NavigationData.displayableAutoComplete}function p(e){const n=[],t=e+".",i=s.NavigationData.data.location.callable;if(i){const e=Object.keys(i).filter((e=>0===e.indexOf(t)));if(e)for(const i in e){const o=e[i].substring(t.length);n.push(new a.CompletionItem(o,a.CompletionItemKind.Method))}}return n}n.completionProvider=a.languages.registerCompletionItemProvider("renpy",{provideCompletionItems(e,n,t,a){if(!t.isCancellationRequested)return new Promise((t=>{t(r(e,n,a))}))}},"."," ","@","-","(")},2503:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.Configuration=void 0;const a=t(1398);n.Configuration=class{static initialize(e){const n=a.workspace.getConfiguration("renpy");n?.excludeCompiledFilesFromWorkspace&&this.excludeCompiledFilesConfig(),e.subscriptions.push(a.workspace.onDidChangeConfiguration((e=>{e.affectsConfiguration("renpy.excludeCompiledFilesFromWorkspace")&&a.workspace.getConfiguration("renpy").get("excludeCompiledFilesFromWorkspace")&&this.excludeCompiledFilesConfig()})))}static isAutoSaveDisabled(){return"off"===a.workspace.getConfiguration("files").get("autoSave")}static compileOnDocumentSave(){return!0===a.workspace.getConfiguration("renpy").get("compileOnDocumentSave")}static shouldWatchFoldersForChanges(){return!0===a.workspace.getConfiguration("renpy").get("watchFoldersForChanges")}static getRenpyExecutablePath(){return a.workspace.getConfiguration("renpy").get("renpyExecutableLocation")||""}static excludeCompiledFilesConfig(){const e=a.workspace.getConfiguration("files"),n=e.inspect("exclude"),t={...n?.workspaceValue};["**/*.rpyc","**/*.rpa","**/*.rpymc","**/cache/"].forEach((e=>{e in t||Object.assign(t,{[e]:!0})})),e.update("exclude",t,a.ConfigurationTarget.Workspace)}}},7906:function(e,n,t){var a=this&&this.__createBinding||(Object.create?function(e,n,t,a){void 0===a&&(a=t);var i=Object.getOwnPropertyDescriptor(n,t);i&&!("get"in i?!n.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,a,i)}:function(e,n,t,a){void 0===a&&(a=t),e[a]=n[t]}),i=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&a(n,e,t);return i(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.RenpyConfigurationProvider=n.RenpyAdapterDescriptorFactory=void 0;const s=o(t(1398)),r=t(8675),l=t(8200),h=t(2503),c=t(1377),d=t(2144);n.RenpyAdapterDescriptorFactory=class{createDebugAdapterDescriptor(e){return new s.DebugAdapterInlineImplementation(new u(e.configuration.command,e.configuration.args))}};class u extends r.DebugSession{command="run";args;constructor(e,n){super(),this.command=e,n&&(this.args=n)}initializeRequest(){const e=function(e){let n;for(n=0;n<s.window.terminals.length;n++)if(s.window.terminals[n].name===e)return s.window.terminals[n];return s.window.createTerminal(e)}("Ren'py Debug");e.show();let n=h.Configuration.getRenpyExecutablePath();(0,d.isValidExecutable)(n)?(n+=" "+(0,l.getWorkspaceFolder)(),this.command&&(n+=" "+this.command),this.args&&(n+=" "+this.args.join(" ")),e.sendText(n),this.sendEvent(new r.TerminatedEvent)):(0,c.logToast)(s.LogLevel.Error,"Ren'Py executable location not configured or is invalid.")}}n.RenpyConfigurationProvider=class{resolveDebugConfiguration(e,n){if(!n.type&&!n.request&&!n.name){const e=s.window.activeTextEditor;e&&"renpy"===e.document.languageId&&(n.type="renpy",n.request="launch",n.name="Ren'Py: Launch",n.command="run",n.args=[])}return n}}},6592:function(e,n,t){var a=this&&this.__createBinding||(Object.create?function(e,n,t,a){void 0===a&&(a=t);var i=Object.getOwnPropertyDescriptor(n,t);i&&!("get"in i?!n.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,a,i)}:function(e,n,t,a){void 0===a&&(a=t),e[a]=n[t]}),i=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&a(n,e,t);return i(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.TextMateRule=void 0,n.injectCustomTextmateTokens=function(e){const n=s.workspace.getConfiguration("editor");let t=n.get("tokenColorCustomizations");void 0!==t&&void 0!==t.textMateRules||(t={textMateRules:d.toArray()});const a=t.textMateRules,i=d.addRange(e);for(const e of a)i.add(new c(e.scope,e.settings));i.size!==a.length&&(t.textMateRules=i.toArray(),n.update("tokenColorCustomizations",t,s.ConfigurationTarget.Workspace).then((()=>{(0,h.logMessage)(s.LogLevel.Info,"Successfully updated the tokenColorCustomizations config")}),(e=>{(0,h.logMessage)(s.LogLevel.Error,"Failed to update the tokenColorCustomizations config! : "+e)})))};const s=t(1398),r=o(t(9023)),l=t(5238),h=t(1377);class c{scope;settings;constructor(e,n){this.scope=e,this.settings=n}equals(e){return r.isDeepStrictEqual(this,e)}}n.TextMateRule=c;const d=new l.ValueEqualsSet([new c("renpy.meta.plain",{fontStyle:""}),new c("renpy.meta.i",{fontStyle:"italic"}),new c("renpy.meta.b",{fontStyle:"bold"}),new c(["renpy.meta.u","renpy.meta.a"],{fontStyle:"underline"}),new c("renpy.meta.s",{fontStyle:"strikethrough"}),new c("renpy.meta.i renpy.meta.b",{fontStyle:"italic bold"}),new c("renpy.meta.i renpy.meta.u",{fontStyle:"italic underline"}),new c("renpy.meta.i renpy.meta.s",{fontStyle:"italic strikethrough"}),new c("renpy.meta.b renpy.meta.u",{fontStyle:"bold underline"}),new c("renpy.meta.b renpy.meta.s",{fontStyle:"bold strikethrough"}),new c("renpy.meta.u renpy.meta.s",{fontStyle:"underline strikethrough"}),new c("renpy.meta.i renpy.meta.b renpy.meta.u",{fontStyle:"italic bold underline"}),new c("renpy.meta.i renpy.meta.b renpy.meta.s",{fontStyle:"italic bold strikethrough"}),new c("renpy.meta.i renpy.meta.u renpy.meta.s",{fontStyle:"italic underline strikethrough"}),new c("renpy.meta.b renpy.meta.u renpy.meta.s",{fontStyle:"bold underline strikethrough"}),new c("renpy.meta.i renpy.meta.b renpy.meta.u  renpy.meta.s",{fontStyle:"italic bold underline strikethrough"}),new c("renpy.meta.color.text",{foreground:"#ffffff"})])},7892:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.definitionProvider=void 0,n.getDefinition=l;const a=t(1398),i=t(2144),o=t(9983),s=t(1208),r=t(8200);function l(e,n){const t=e.getWordRangeAtPosition(n);if(!t)return;const l=(0,r.stripWorkspaceFromFile)(e.uri.path),h=(0,o.rangeAsString)(l,t),c=s.NavigationData.gameObjects.semantic[h];if(c){const e=a.Uri.file((0,r.getFileWithPath)(c.filename));return new a.Location(e,c.toRange())}const d=e.lineAt(n).text;if(!s.NavigationData.positionIsCleanForCompletion(d,new a.Position(n.line,t.start.character)))return;let u=e.getText(t);if(t&&n.character>2){const a=(0,i.getKeywordPrefix)(e,n,t);a&&(u=`${a}.${u}`)}const p=[],g=s.NavigationData.getNavigationDumpEntries(u);return g?.forEach((e=>{if(""!==e.filename){const n=a.Uri.file((0,r.getFileWithPath)(e.filename));p.push(new a.Location(n,e.toRange()))}})),p}n.definitionProvider=a.languages.registerDefinitionProvider("renpy",{provideDefinition(e,n,t){if(!t.isCancellationRequested)return new Promise((t=>{t(l(e,n))}))}})},1321:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.diagnosticsInit=function(e){const n=a.languages.createDiagnosticCollection("renpy");e.subscriptions.push(n);const t=a.commands.registerCommand("renpy.refreshDiagnostics",(()=>{a.window.activeTextEditor&&b(a.window.activeTextEditor.document,n)}));e.subscriptions.push(t),e.subscriptions.push(a.workspace.onDidChangeConfiguration((t=>{t.affectsConfiguration("renpy.diagnostics.diagnosticMode")&&v(e,n)})));const i=a.workspace.onDidChangeTextDocument((e=>b(e.document,n)));e.subscriptions.push(i),v(e,n)};const a=t(1398),i=t(1208),o=t(719),s=t(8200),r=["adv","default_mouse","main_menu","menu","mouse_visible","name_only","narrator","say","save_name","persistent","_autosave","_confirm_quit","_dismiss_pause","_game_menu_screen","_history","_history_list","_ignore_action","_menu","_quit_slot","_rollback","_screenshot_pattern","_skipping","_version","_window","_window_auto","_window_subtitle","_in_replay","_live2d_fade"],l=/^\s*(default|define)\s+(ArithmeticError|AssertionError|AttributeError|BaseException|BufferError|BytesWarning|DeprecationWarning|EOFError|Ellipsis|EnvironmentError|Exception|False|FloatingPointError|FutureWarning|GeneratorExit|IOError|ImportError|ImportWarning|IndentationError|IndexError|KeyError|KeyboardInterrupt|LookupError|MemoryError|NameError|None|NoneType|NotImplemented|NotImplementedError|OSError|OverflowError|PPP|PendingDeprecationWarning|ReferenceError|RuntimeError|RuntimeWarning|StandardError|StopIteration|SyntaxError|SyntaxWarning|SystemError|SystemExit|TabError|True|TypeError|UnboundLocalError|UnicodeDecodeError|UnicodeEncodeError|UnicodeError|UnicodeTranslateError|UnicodeWarning|UserWarning|ValueError|Warning|ZeroDivisionError|abs|all|any|apply|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|copyright|credits|delattr|dict|dir|divmod|enumerate|eval|execfile|exit|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|license|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|print|property|quit|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\s*=/g,h=/[\s(=]+(LiveCrop|LiveComposite|Tooltip|im\.Rotozoom|im\.ImageBase|im\.ramp|im\.Map|im\.Flip|im\.math|im\.expands_bounds|im\.threading|im\.zipfile|im\.Recolor|im\.Color|im\.io|im\.Alpha|im\.Data|im\.Image|im\.Twocolor|im\.MatrixColor|im\.free_memory|im\.Tile|im\.FactorScale|im\.Sepia|im\.Crop|im\.AlphaMask|im\.Blur|im\.tobytes|im\.matrix|im\.Grayscale|ui\.add|ui\.bar|ui\.imagebutton|ui\.input|ui\.key|ui\.label|ui\.null|ui\.text|ui\.textbutton|ui\.timer|ui\.vbar|ui\.hotspot|ui\.hotbar|ui\.spritemanager|ui\.button|ui\.frame|ui\.transform|ui\.window|ui\.drag|ui\.fixed|ui\.grid|ui\.hbox|ui\.side|ui\.vbox|ui\.imagemap|ui\.draggroup)[^a-zA-Z]/g,c=/^\s*(default|define)\s+([^a-zA-Z\s_][a-zA-Z0-9_]*)\s+=/g,d=/\s*(default|define)\s+(_[a-zA-Z0-9]*)\s+=/g,u=/^\s*(default|define)\s+persistent\.([a-zA-Z]+[a-zA-Z0-9_]*)\s*=\s*(.*$)/g,p=/\s+persistent\.(\w+)[^a-zA-Z]/g,g=/\s+store\.(\w+)[^a-zA-Z_]?/g,m=/^(\t+)/g,f=/\s+(if|while)\s+(\w+)\s*(=)\s*(\w+)\s*/g,y=[];function b(e,n){if("renpy"!==e.languageId)return;const t=[],o=a.workspace.getConfiguration("renpy.diagnostics"),r=o.warnOnInvalidFilenameIssues;if("disabled"!==r.toLowerCase()){let n=a.DiagnosticSeverity.Error;"warning"===r.toLowerCase()&&(n=a.DiagnosticSeverity.Warning);const i=(0,s.extractFilename)(e.uri.path);if(i&&(!i.match(/^[a-zA-Z0-9]/)||i.startsWith("00"))&&!e.uri.path.includes("renpy/common")){const i=new a.Range(0,0,e.lineCount,0),o=e.validateRange(i),s=new a.Diagnostic(o,"Filenames must begin with a letter or number, but may not begin with '00' as Ren'Py uses such files for its own purposes.",n);t.push(s)}}const l=[];if(i.NavigationData.data&&i.NavigationData.data.location){const e=i.NavigationData.data.location.persistent;for(const n in e)l.push(n)}let h=0;for(let n=0;n<e.lineCount;n++){const s=i.NavigationData.filterStringLiterals(e.lineAt(n).text);if(0===s.trim().length)continue;let r;const c=o.warnOnIndentationAndSpacingIssues;if("disabled"!==c.toLowerCase()){let e=a.DiagnosticSeverity.Error;if("warning"===c.toLowerCase()&&(e=a.DiagnosticSeverity.Warning),r=s.match(m),r){const i=r.indexOf(r[0]),o=new a.Range(n,i,n,i+r[0].length),s=new a.Diagnostic(o,"Tab characters are not allowed. Indentation must consist only of spaces in Ren'Py scripts. (4 spaces is strongly recommended.)",e);t.push(s)}else{const i=s.length-s.trimStart().length;if(i>0&&0===h&&(h=i),i>0&&i%h!=0){const o=new a.Range(n,0,n,i),s=new a.Diagnostic(o,`Inconsistent spacing detected (${i} given, expected a multiple of ${h}). Indentation must consist only of spaces in Ren'Py scripts. Each indentation level must consist of the same number of spaces. (4 spaces is strongly recommended.)`,e);t.push(s)}}}o.warnOnInvalidVariableNames&&S(t,s,n),o.warnOnReservedVariableNames&&(x(t,s,n),C(t,s,n)),_(t,s,n),N(t,s,n),o.warnOnUndefinedStoreVariables&&I(t,s,n),o.warnOnObsoleteMethods&&k(t,s,n),o.warnOnUndefinedPersistents&&P(t,l,s,n)}n.set(e.uri,t)}function T(e){e.clear(),(0,o.getAllOpenTabInputTextUri)().forEach((n=>{w(n,e)}))}function w(e,n){a.workspace.fs.stat(e).then((t=>{t.type===a.FileType.File&&a.workspace.openTextDocument(e).then((e=>b(e,n)))}))}function v(e,n){if(y.forEach((e=>e.dispose())),"openFilesOnly"===a.workspace.getConfiguration("renpy.diagnostics").get("diagnosticMode"))e.subscriptions.push(a.window.onDidChangeVisibleTextEditors((()=>T(n)),void 0,y)),e.subscriptions.push(a.workspace.onDidCloseTextDocument((e=>{n.has(e.uri)&&n.delete(e.uri)}),void 0,y)),T(n);else{const e=a.workspace.createFileSystemWatcher("**/*");y.push(e),e.onDidChange((e=>w(e,n))),e.onDidCreate((e=>w(e,n))),e.onDidDelete((e=>function(e,n){n.forEach((t=>{t.fsPath.startsWith(e.fsPath)&&n.delete(t)}))}(e,n))),a.workspace.findFiles("**/*.rpy").then((e=>e.forEach((e=>w(e,n)))))}}function k(e,n,t){let i;for(;null!==(i=h.exec(n));){const n=i.index+i[0].indexOf(i[1]),o=new a.Range(t,n,t,n+i[1].length),s=new a.Diagnostic(o,`"${i[1]}": This function is obsolete or outdated.`,a.DiagnosticSeverity.Warning);e.push(s)}}function _(e,n,t){let i;for(;null!==(i=f.exec(n));){const n=i.index+i[0].indexOf(i[3]),o=new a.Range(t,n,t,n+i[3].length),s=new a.Diagnostic(o,'"=" is the assignment operator. Use "==" for comparison.',a.DiagnosticSeverity.Warning);e.push(s)}}function x(e,n,t){let i;for(;null!==(i=d.exec(n));){const n=i.index+i[0].indexOf(i[2]),o=new a.Range(t,n,t,n+i[2].length),s=new a.Diagnostic(o,`"${i[2]}": Variables may not begin with a single underscore '_' as Ren'Py reserves such variables for its own purposes.`,a.DiagnosticSeverity.Warning);e.push(s)}}function C(e,n,t){let i;for(;null!==(i=l.exec(n));){const n=i.index+i[0].indexOf(i[2]),o=new a.Range(t,n,t,n+i[2].length),s=new a.Diagnostic(o,`"${i[2]}": is a Python reserved name, type, or function. Using it as a variable can lead to obscure problems or unpredictable behavior.`,a.DiagnosticSeverity.Warning);e.push(s)}}function N(e,n,t){if(n.trim().indexOf("$")>=1){const i=n.indexOf("$"),o=new a.Range(t,i,t,i+1),s=new a.Diagnostic(o,'"$" starts a one-line Python statement, but was found in the middle of the line.',a.DiagnosticSeverity.Warning);e.push(s)}}function S(e,n,t){let i;for(;null!==(i=c.exec(n));)if(!r.includes(i[2])){const n=i.index+i[0].indexOf(i[2]),o=new a.Range(t,n,t,n+i[2].length),s=new a.Diagnostic(o,`"${i[2]}": Variables must begin with a letter (and may contain numbers, letters, or underscores).`,a.DiagnosticSeverity.Error);e.push(s)}}function I(e,n,t){const o=i.NavigationData.gameObjects.define_types;let s=[],l=[];if(i.NavigationData.data&&i.NavigationData.data.location&&(s=i.NavigationData.data.location.class||[],l=i.NavigationData.data.location.callable||[]),o){const i=Object.keys(o).filter((e=>"default"===o[e].define));let h;for(;null!==(h=g.exec(n));)if(!(h[1].startsWith("_")||i.includes(h[1])||r.includes(h[1])||s[h[1]]||l[h[1]])){const n=h.index+h[0].indexOf(h[1]),i=new a.Range(t,n,t,n+h[1].length),o=new a.Diagnostic(i,`"store.${h[1]}": Use of a store variable that has not been defaulted.`,a.DiagnosticSeverity.Warning);e.push(o)}}}function P(e,n,t,i){let o;for(;null!==(o=p.exec(t));)if(!t.match(u)||n.includes(o[1])){if(!o[1].startsWith("_")&&!n.includes(o[1])){const n=o.index+o[0].indexOf(o[1]),t=new a.Range(i,n,i,n+o[1].length),s=new a.Diagnostic(t,`"persistent.${o[1]}": This persistent variable has not been defaulted or defined.`,a.DiagnosticSeverity.Warning);e.push(s)}}else n.push(o[1])}},103:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.Displayable=void 0,n.Displayable=class{name;tag;imageType;definition;filename;location;constructor(e,n,t,a,i){this.name=e,this.imageType=n,this.definition=t,this.filename=a,this.location=i,e.indexOf(" ")>0?this.tag=e.split(" ")[0]:this.tag=e}}},2144:function(e,n,t){var a=this&&this.__createBinding||(Object.create?function(e,n,t,a){void 0===a&&(a=t);var i=Object.getOwnPropertyDescriptor(n,t);i&&!("get"in i?!n.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,a,i)}:function(e,n,t,a){void 0===a&&(a=t),e[a]=n[t]}),i=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&a(n,e,t);return i(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.isShippingBuild=function(){return N!==l.ExtensionMode.Development},n.activate=async function(e){N=e.extensionMode,(0,k.initializeLoggingSystems)(e),(0,k.updateStatusBar)("$(sync~spin) Loading Ren'Py extension..."),_.Configuration.initialize(e),e.subscriptions.push(g.hoverProvider),e.subscriptions.push(f.definitionProvider),e.subscriptions.push(y.symbolProvider),e.subscriptions.push(v.signatureProvider),e.subscriptions.push(m.completionProvider),e.subscriptions.push(h.colorProvider),e.subscriptions.push(b.referencesProvider),e.subscriptions.push(p.semanticTokensProvider);const n=l.languages.createDiagnosticCollection("renpy");e.subscriptions.push(n),e.subscriptions.push(l.workspace.onDidSaveTextDocument((e=>{if("renpy"===e.languageId&&!_.Configuration.isAutoSaveDisabled()&&(_.Configuration.compileOnDocumentSave()&&(c.NavigationData.isCompiling||I()),!c.NavigationData.isImporting)){(0,k.updateStatusBar)("$(sync~spin) Initializing Ren'Py static data...");try{const n=l.Uri.file(e.fileName),t=(0,d.stripWorkspaceFromFile)(n.path);c.NavigationData.clearScannedDataForFile(t),c.NavigationData.scanDocumentForClasses(t,e),(0,k.updateStatusBar)((0,c.getStatusBarText)())}catch(e){(0,k.updateStatusBar)("Failed to load Ren'Py static data..."),(0,k.logMessage)(l.LogLevel.Error,e)}}}))),(0,u.diagnosticsInit)(e);const t=l.commands.registerCommand("renpy.refreshNavigationData",(async()=>{(0,k.updateStatusBar)("$(sync~spin) Refreshing Ren'Py navigation data...");try{await c.NavigationData.refresh(!0)}catch(e){(0,k.logMessage)(l.LogLevel.Error,e)}finally{(0,k.updateStatusBar)((0,c.getStatusBarText)())}}));e.subscriptions.push(t);const a=l.commands.registerCommand("renpy.jumpToFileLocation",(e=>{const n=l.Uri.file((0,d.cleanUpPath)(e.uri.path)),t=new l.Range(e.range[0].line,e.range[0].character,e.range[0].line,e.range[0].character);try{l.window.showTextDocument(n,{selection:t})}catch(e){(0,k.logToast)(l.LogLevel.Warning,`Could not jump to the location (error: ${e})`)}}));e.subscriptions.push(a);const i=l.commands.registerCommand("renpy.migrateOldFiles",(async()=>{null!==l.workspace&&(await l.workspace.findFiles("**/*.rpyc",null,50)).forEach((async e=>{const n=l.Uri.parse(e.toString().replace(".rpyc",".rpy"));try{await l.workspace.fs.stat(n)}catch(n){const t=e.toString().replace("game","old-game").lastIndexOf("/"),a=l.Uri.parse(e.toString().replace("game","old-game")),i=l.Uri.parse(a.toString().substring(0,t));l.workspace.fs.createDirectory(i),l.workspace.fs.readFile(e).then((e=>l.workspace.fs.writeFile(a,e))).then((()=>l.workspace.fs.delete(e)))}}))}));e.subscriptions.push(i);let o=!1;const P=l.commands.registerCommand("renpy.toggleTokenDebugView",(async()=>{o?((0,k.logToast)(l.LogLevel.Info,"Disabled token debug view"),(0,T.unregisterDebugDecorator)()):((0,k.logToast)(l.LogLevel.Info,"Enabled token debug view"),w.Tokenizer.clearTokenCache(),await(0,T.registerDebugDecorator)(e)),o=!o}));e.subscriptions.push(P);const A=l.commands.registerCommand("renpy.runCommand",(()=>{const e=_.Configuration.getRenpyExecutablePath();if(!S(e))return void(0,k.logToast)(l.LogLevel.Error,"Ren'Py executable location not configured or is invalid.");l.debug.startDebugging(void 0,{type:"renpy",name:"Run Project",request:"launch",program:e},{noDebug:!0});const n=function(){const e=_.Configuration.getRenpyExecutablePath();if(S(e)){const n=(0,d.cleanUpPath)(l.Uri.file(e).path),t=n.substring(0,n.lastIndexOf("/")),a=(0,d.getWorkspaceFolder)(),i=[`${a}`,"run"];if(a.endsWith("/game")){try{(0,k.updateStatusBar)("$(sync~spin) Running Ren'Py...");const n=s.spawnSync(e,i,{cwd:`${t}`,env:{PATH:process.env.PATH}});if(n.error)return(0,k.logMessage)(l.LogLevel.Error,`renpy spawn error: ${n.error}`),!1;if(n.stderr&&n.stderr.length>0)return(0,k.logMessage)(l.LogLevel.Error,`renpy spawn stderr: ${n.stderr}`),!1}catch(e){return(0,k.logMessage)(l.LogLevel.Error,`renpy spawn error: ${e}`),!1}finally{(0,k.updateStatusBar)((0,c.getStatusBarText)())}return!0}return!1}return(0,k.logMessage)(l.LogLevel.Warning,"config for renpy does not exist"),!1}();n&&(0,k.logToast)(l.LogLevel.Info,"Ren'Py is running successfully")}));e.subscriptions.push(A);const M=l.commands.registerCommand("renpy.compileNavigationData",(()=>{const e=l.workspace.getConfiguration("renpy");e&&S(e.renpyExecutableLocation)?I()&&(0,k.logToast)(l.LogLevel.Info,"Ren'Py compilation has completed."):(0,k.logToast)(l.LogLevel.Error,"Ren'Py executable location not configured or is invalid.")}));e.subscriptions.push(M);const R=(0,d.getNavigationJsonFilepath)();r.existsSync(R)||(0,k.logMessage)(l.LogLevel.Warning,"Navigation.json file is missing."),(0,k.updateStatusBar)("$(sync~spin) Initializing Ren'Py static data...");try{await c.NavigationData.init(e.extensionPath),(0,k.updateStatusBar)((0,c.getStatusBarText)())}catch(e){(0,k.updateStatusBar)("Failed to load Ren'Py static data..."),(0,k.logMessage)(l.LogLevel.Error,e)}try{r.watch((0,d.getNavigationJsonFilepath)(),(async(e,n)=>{if(n){(0,k.logMessage)(l.LogLevel.Debug,`${n} changed`),(0,k.updateStatusBar)("$(sync~spin) Refreshing Ren'Py navigation data...");try{await c.NavigationData.refresh()}catch(e){(0,k.logMessage)(l.LogLevel.Error,`${Date()}: error refreshing NavigationData: ${e}`)}finally{(0,k.updateStatusBar)((0,c.getStatusBarText)())}}}))}catch(e){(0,k.logMessage)(l.LogLevel.Error,`Watch navigation.json file error: ${e}`)}if(_.Configuration.shouldWatchFoldersForChanges()){(0,k.logMessage)(l.LogLevel.Info,"Starting Watcher for images folder.");try{r.watch((0,d.getImagesFolder)(),{recursive:!0},(async(e,n)=>{n&&"rename"===e&&((0,k.logMessage)(l.LogLevel.Debug,`${n} created/deleted`),await c.NavigationData.scanForImages())}))}catch(e){(0,k.logMessage)(l.LogLevel.Error,`Watch image folder error: ${e}`)}(0,k.logMessage)(l.LogLevel.Info,"Starting Watcher for audio folder.");try{r.watch((0,d.getAudioFolder)(),{recursive:!0},(async(e,n)=>{n&&"rename"===e&&((0,k.logMessage)(l.LogLevel.Debug,`${n} created/deleted`),await c.NavigationData.scanForAudio())}))}catch(e){(0,k.logMessage)(l.LogLevel.Error,`Watch audio folder error: ${e}`)}}const F=new x.RenpyAdapterDescriptorFactory;e.subscriptions.push(l.debug.registerDebugAdapterDescriptorFactory("renpy",F));const E=new x.RenpyConfigurationProvider;e.subscriptions.push(l.debug.registerDebugConfigurationProvider("renpy",E)),e.subscriptions.push(l.debug.registerDebugConfigurationProvider("renpy",{provideDebugConfigurations:()=>[{type:"renpy",request:"launch",name:"Ren'Py: Launch",command:"run",args:[]}]},l.DebugConfigurationProviderTriggerKind.Dynamic));const O=new C.RenpyTaskProvider;e.subscriptions.push(l.tasks.registerTaskProvider("renpy",O)),(0,k.logMessage)(l.LogLevel.Info,"Ren'Py extension activated!")},n.deactivate=function(){(0,k.logMessage)(l.LogLevel.Info,"Ren'Py extension deactivating"),r.unwatchFile((0,d.getNavigationJsonFilepath)())},n.getKeywordPrefix=function e(n,t,a){if(a.start.character<=0)return;const i=new l.Range(new l.Position(a.start.line,a.start.character-1),new l.Position(a.end.line,a.start.character));if("."===n.getText(i)){const i=new l.Position(t.line,a.start.character-1),o=n.getWordRangeAtPosition(i);if(o){const t=n.getText(o);if("music"===t||"sound"===t){const a=e(n,i,o);if("renpy"===a)return`${a}.${t}`}if("store"!==t)return t}}},n.isValidExecutable=S;const s=o(t(5317)),r=o(t(9896)),l=t(1398),h=t(2418),c=t(1208),d=t(8200),u=t(1321),p=t(8520),g=t(9647),m=t(8227),f=t(7892),y=t(2059),b=t(8295),T=t(5100),w=t(7414),v=t(8279),k=t(1377),_=t(2503),x=t(7906),C=t(6008);let N=null;function S(e){return!(!e||""===e)&&r.existsSync(e)}function I(){const e=_.Configuration.getRenpyExecutablePath();if(S(e)){const n=(0,d.cleanUpPath)(l.Uri.file(e).path),t=n.substring(0,n.lastIndexOf("/"));let a=(0,d.getWorkspaceFolder)();a.endsWith("/game")&&(a=a.substring(0,a.length-5));const i=[`${a}`,"compile","--json-dump",`${(0,d.getNavigationJsonFilepath)()}`];try{c.NavigationData.isCompiling=!0,(0,k.updateStatusBar)("$(sync~spin) Compiling Ren'Py navigation data...");const n=s.spawnSync(e,i,{cwd:`${t}`,env:{PATH:process.env.PATH},encoding:"utf-8",windowsHide:!0});if(n.error)return(0,k.logMessage)(l.LogLevel.Error,`renpy spawn error: ${n.error}`),!1;if(n.stderr&&n.stderr.length>0)return(0,k.logMessage)(l.LogLevel.Error,`renpy spawn stderr: ${n.stderr}`),!1}catch(e){return(0,k.logMessage)(l.LogLevel.Error,`renpy spawn error: ${e}`),!1}finally{c.NavigationData.isCompiling=!1,(0,k.updateStatusBar)((0,c.getStatusBarText)())}return!0}return!1}},9647:function(e,n,t){var a=this&&this.__createBinding||(Object.create?function(e,n,t,a){void 0===a&&(a=t);var i=Object.getOwnPropertyDescriptor(n,t);i&&!("get"in i?!n.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,a,i)}:function(e,n,t,a){void 0===a&&(a=t),e[a]=n[t]}),i=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&a(n,e,t);return i(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.hoverProvider=void 0,n.getHoverContent=u,n.getHoverMarkdownString=p,n.getDefinitionFromFile=m;const s=t(1398),r=t(2144),l=t(9983),h=t(1208),c=t(8200),d=o(t(9896));function u(e,n){let t=e.getWordRangeAtPosition(n);if(!t)return;const a=e.lineAt(n).text;if(!h.NavigationData.positionIsCleanForCompletion(a,new s.Position(n.line,t.start.character)))return;let i=e.getText(t);if("kwargs"===i&&t.start.character>2){const n=new s.Range(t.start.line,t.start.character-2,t.end.line,t.end.character);"**kwargs"===e.getText(n)&&(t=n,i=e.getText(t))}const o=(0,c.stripWorkspaceFromFile)(e.uri.path),d=(0,l.rangeAsString)(o,t),u=h.NavigationData.gameObjects.semantic[d];if(u){const n=new s.MarkdownString;if(u&&u instanceof l.Navigation){const a=[{uri:e.uri,range:u.toRange()}],i=s.Uri.parse(`command:renpy.jumpToFileLocation?${encodeURIComponent(JSON.stringify(a))}`);n.appendMarkdown(`(${u.source}) **${e.getText(t)}** [${(0,c.extractFilename)(o)}:${u.location}](${i})`),u.documentation.length>0&&(n.appendMarkdown("\n\n---\n\n"),n.appendCodeblock(u.documentation)),n.isTrusted=!0}else n.appendMarkdown(`(${u.source}) **${e.getText(t)}**`);return new s.Hover(n)}if(t&&n.character>2){const a=(0,r.getKeywordPrefix)(e,n,t);a&&"store"!==a&&(i=`${a}.${i}`)}const g=h.NavigationData.getNavigationDumpEntries(i);if(g){const e=p(g);return new s.Hover(e)}}function p(e){const n=new s.MarkdownString;let t=0;for(const a of e){if(t++,t>1&&(n.appendMarkdown("\n\n---\n\n"),(a.keyword.startsWith("gui.")||a.keyword.startsWith("config."))&&a.documentation&&a.documentation.length>0)){n.appendMarkdown((0,l.formatDocumentationAsMarkdown)(a.documentation));continue}let e="";a.filename&&a.filename.length>0&&a.location>=0&&(e=`: ${(0,c.extractFilename)(a.filename)}:${a.location}`);let i=a.documentation,o="";if(""===i&&""!==a.filename&&a.location>=0){const e=m(a.filename,a.location);e&&(o=e?.keyword,i=e?.documentation)}if("class"===a.source){const e=h.NavigationData.getClassData(a);e&&(i=e.documentation)}let r=a.source;const d=h.NavigationData.gameObjects.characters[a.keyword];if(d&&(r="character"),a.filename&&a.filename.length>0&&a.location>=0){const t=[{uri:s.Uri.file((0,c.getFileWithPath)(a.filename)),range:a.toRange()}],i=s.Uri.parse(`command:renpy.jumpToFileLocation?${encodeURIComponent(JSON.stringify(t))}`);n.appendMarkdown(`(${r}) **${a.keyword}** [${e}](${i})`)}else n.appendMarkdown(`(${r}) **${a.keyword}** ${e}`);if(n.isTrusted=!0,d&&0===i.length&&(n.appendMarkdown("\n\n---\n\n"),n.appendText(`Character definition for ${d.resolved_name}.`),n.appendMarkdown("\n\n---\n\n")),a.args&&a.args.length>0){n.appendMarkdown("\n\n---\n\n");const e=g(a);n.appendCodeblock(`${e}${a.keyword}${a.args}`,"renpy")}if(o&&o.length>0&&(a.args&&0!==a.args.length||n.appendMarkdown("\n\n---\n\n"),n.appendCodeblock(o,"renpy")),i&&i.length>0){a.args&&0!==a.args.length||n.appendMarkdown("\n\n---\n\n"),i=(0,l.formatDocumentationAsMarkdown)(i);const e=i.split("::");e.length>1?(n.appendMarkdown(e[0]),n.appendMarkdown("\n\n---\n\n"),n.appendCodeblock(e[1])):"store"===a.type?n.appendCodeblock(e[0]):n.appendMarkdown(e[0])}}return n}function g(e){let n=e.type||"";return"var"===n&&(e.keyword.startsWith("gui.")||e.keyword.startsWith("config."))?n="define":"var"!==n&&"function"!==n||(n="def"),""!==n&&(n+=" "),n}function m(e,n){const t=(0,c.getFileWithPath)(e);try{const a=d.readFileSync(t,"utf-8").split("\n");if(n>=a.length)return;let i=a[n-1].trim();i.endsWith(":")?i=i.slice(0,-1):i.endsWith("(")?i+=")":i.endsWith("[")?i+="]":i.endsWith("{")&&(i+="}");let o="";o=(0,l.getPyDocsAtLine)(a,n-1);let s="";return i.indexOf("(")>0&&(s=i.substring(i.indexOf("(")),s=s.replace("(self, ","("),s=s.replace("(self)","()")),new l.Navigation("workspace",i,e,n,o,s,"",0)}catch(e){return}}n.hoverProvider=s.languages.registerHoverProvider("renpy",{provideHover(e,n,t){if(!t.isCancellationRequested)return new Promise((t=>{t(u(e,n))}))}})},1377:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.LogCategory=void 0,n.initializeLoggingSystems=function(e){e.subscriptions.push(o),o.clear(),s.name="Ren'Py Language Extension Status",s.tooltip="Ren'Py Language Extension Status",e.subscriptions.push(s)},n.updateStatusBar=function(e){""!==e?(h(a.LogLevel.Info,r.Status,e),s.text=e,s.show()):s.hide()},n.logMessage=l,n.logCatMessage=h,n.logToast=function(e,n){switch(l(e,n),e){case a.LogLevel.Debug:case a.LogLevel.Info:a.window.showInformationMessage(n);break;case a.LogLevel.Warning:a.window.showWarningMessage(n);break;case a.LogLevel.Error:a.window.showErrorMessage(n)}};const a=t(1398),i=t(2144),o=a.window.createOutputChannel("Ren'Py Language Extension",{log:!0}),s=a.window.createStatusBarItem(a.StatusBarAlignment.Right,100);var r;function l(e,n){h(e,r.Default,n)}function h(e,n,t){const s=`${function(e){switch(e){case r.Default:return"[Default]";case r.Status:return"[Status]";case r.Parser:return"[Parser]";case r.Tokenizer:return"[Tokenizer]"}}(n)} > ${t}`;switch(e){case a.LogLevel.Trace:o.trace(s);break;case a.LogLevel.Debug:o.debug(s);break;case a.LogLevel.Info:o.info(s);break;case a.LogLevel.Warning:o.warn(s);break;case a.LogLevel.Error:o.error(s)}!function(e,n){if(!(0,i.isShippingBuild)())switch(e){case a.LogLevel.Trace:console.trace(n);break;case a.LogLevel.Debug:console.debug(n);break;case a.LogLevel.Info:console.info(n);break;case a.LogLevel.Warning:console.warn(n);break;case a.LogLevel.Error:console.error(n)}}(e,s)}!function(e){e[e.Default=0]="Default",e[e.Status=1]="Status",e[e.Parser=2]="Parser",e[e.Tokenizer=3]="Tokenizer"}(r||(n.LogCategory=r={}))},1208:function(e,n,t){var a=this&&this.__createBinding||(Object.create?function(e,n,t,a){void 0===a&&(a=t);var i=Object.getOwnPropertyDescriptor(n,t);i&&!("get"in i?!n.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,a,i)}:function(e,n,t,a){void 0===a&&(a=t),e[a]=n[t]}),i=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&a(n,e,t);return i(n,e),n},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.NavigationData=void 0,n.readNavigationJson=T,n.updateNavigationData=w,n.getStatusBarText=function(){return r.window.activeTextEditor&&r.window.activeTextEditor.document&&"renpy"===r.window.activeTextEditor.document.languageId&&b.data?void 0!==b.data.name?`${b.data.name} v${b.data.version}`:"(Uncompiled Game)":""};const r=t(1398),l=t(9647),h=t(9983),c=t(8200),d=o(t(9896)),u=t(103),p=t(3074),g=s(t(3061)),m=s(t(7606)),f=t(1377),y="█";class b{static data={};static renpyFunctions;static autoCompleteKeywords;static renpyAutoComplete;static configAutoComplete;static guiAutoComplete;static internalAutoComplete;static displayableAutoComplete;static displayableQuotedAutoComplete;static gameObjects={};static isImporting=!1;static isCompiling=!1;static makeCompletionItem(e,n){const t=n[0],a=n[1],i=n[2],o=n[4],s=n[5],l=new r.CompletionItem(e,void 0);return l.documentation=new r.MarkdownString(s),"var"===o?l.kind=r.CompletionItemKind.Field:"class"===a||"class"===o?l.kind=r.CompletionItemKind.Class:"exception"===o?l.kind=r.CompletionItemKind.Issue:"basefile"===t?l.kind=r.CompletionItemKind.Field:"attribute"===o?l.kind=r.CompletionItemKind.Property:"audio"===t?l.kind=r.CompletionItemKind.Method:"ui"===o?l.kind=r.CompletionItemKind.Event:"image"===a?l.kind=r.CompletionItemKind.Constant:"function"===a||"function"===o?l.kind=r.CompletionItemKind.Function:"method"===o?l.kind=r.CompletionItemKind.Method:console.error("Unhandled kind: "+a),l.kind!==r.CompletionItemKind.Method&&l.kind!==r.CompletionItemKind.Function||(l.insertText=new r.SnippetString(`${e}($1)`),l.command={command:"editor.action.triggerParameterHints",title:"Parameter Hints"},l.detail=`def ${e}(${i})`),"obsolete"===t&&(l.tags=[r.CompletionItemTag.Deprecated]),l}static async init(e){(0,f.logMessage)(r.LogLevel.Info,"NavigationData init"),b.renpyFunctions=g.default,b.autoCompleteKeywords=m.default,b.renpyAutoComplete=[];for(const[e,n]of Object.entries(b.renpyFunctions.renpy))"string"!=typeof n&&b.renpyAutoComplete.push(b.makeCompletionItem(e.substring(6),n));b.configAutoComplete=[];for(const[e,n]of Object.entries(b.renpyFunctions.config))"string"!=typeof n&&b.configAutoComplete.push(b.makeCompletionItem(e.substring(7),n));b.guiAutoComplete=[],b.internalAutoComplete=[];for(const[e,n]of Object.entries(b.renpyFunctions.internal))"string"!=typeof n&&(b.internalAutoComplete.push(b.makeCompletionItem(e,n)),e.startsWith("gui.")&&b.guiAutoComplete.push(b.makeCompletionItem(e.substring(4),n)));await b.refresh()}static async refresh(e=!1){(0,f.logMessage)(r.LogLevel.Info,`${Date()}: NavigationData refresh`),b.isImporting=!0;try{b.data=T(),b.data.error&&(0,f.logToast)(r.LogLevel.Warning,"Navigation data is empty. Ren'Py could not compile your project. Please check your project can start successfully."),void 0===b.data.location&&(b.data.location={},b.data.location.callable={},b.data.location.screen={},b.data.location.define={},b.data.location.transform={},b.data.location.label={}),b.data.location.class={},b.data.location.displayable={},b.data.location.persistent={},b.data.location.statement={},b.gameObjects.characters={},b.gameObjects.attributes={},b.gameObjects.channels={},b.gameObjects.properties={},b.gameObjects.fields={},b.gameObjects.define_types={},b.gameObjects.semantic={},b.gameObjects.audio={},b.gameObjects.fonts={},b.gameObjects.outlines={},b.gameObjects.stores={},b.displayableAutoComplete=[],b.displayableQuotedAutoComplete=[];const n=await b.scanForScriptFiles(),t=await b.scanForImages();n&&t&&await b.getCharacterImageAttributes(),await b.scanForFonts(),await b.scanForAudio(),r.commands.executeCommand("renpy.refreshDiagnostics"),(0,f.logMessage)(r.LogLevel.Info,`NavigationData for ${b.data.name} v${b.data.version} loaded`),e&&(0,f.logToast)(r.LogLevel.Info,`NavigationData for ${b.data.name} v${b.data.version} loaded`)}catch(n){(0,f.logMessage)(r.LogLevel.Error,`Error loading NavigationData.json: ${n}`),e&&(0,f.logToast)(r.LogLevel.Error,"NavigationData.json not loaded. Please check Ren'Py can start your project successfully.")}finally{b.isImporting=!1}return!0}static find(e){const n=[],t=e.split(".");if(2===t.length&&"persistent"===t[0]){const e=b.data.location[t[0]];if(e){const a=e[t[1]];if(a)return n.push(new h.Navigation(t[0],t[1],a[0],a[1])),n}}for(const t in b.data.location){const a=b.data.location[t];if(a[e]){const i=a[e];i instanceof h.Navigation?n.push(i):i instanceof u.Displayable?n.push(new h.Navigation(t,e,i.filename,i.location)):n.push(new h.Navigation(t,e,i[0],i[1]))}}if(b.renpyFunctions.internal[e]){const t=b.renpyFunctions.internal[e];n.push(b.getNavigationObject("internal",e,t))}if(b.renpyFunctions.config[e]){const t=b.renpyFunctions.config[e];n.push(b.getNavigationObject("config",e,t))}if(b.renpyFunctions.renpy[e]){const t=b.renpyFunctions.renpy[e];n.push(b.getNavigationObject("equivalent",e,t))}if(b.gameObjects.stores[e]){const t=b.gameObjects.stores[e];t instanceof h.Navigation?n.push(t):n.push(new h.Navigation("store",e,t[0],t[1]))}if(2===t.length&&b.gameObjects.properties[t[0]]&&b.gameObjects.properties[t[0]]){const e=b.gameObjects.properties[t[0]],a=Object.keys(e).filter((n=>e[n].keyword===t[1]));if(a&&a.length>0){const t=Object.create(e[a[0]]);t.keyword=`${t.type}.${t.keyword}`,n.push(t)}}if(2===t.length&&b.gameObjects.fields[t[0]]&&b.gameObjects.fields[t[0]]){const e=b.gameObjects.fields[t[0]],a=Object.keys(e).filter((n=>e[n].keyword===t[1]));if(a&&a.length>0){const t=Object.create(e[a[0]]);t.keyword=`${t.type}.${t.keyword}`,n.push(t)}}if(2===t.length&&b.gameObjects.fields[`store.${t[0]}`]){const a=b.gameObjects.fields[`store.${t[0]}`].filter((n=>n.keyword===e));a&&a.length>0&&n.push(a[0])}if(n&&n.length>0)return n}static getNavigationDumpEntry(e){const n=b.getNavigationDumpEntries(e);if(n)return n[0]}static getNavigationDumpEntries(e){let n=b.find(e);return(!n||0===n.length&&e.indexOf(".")>0)&&(n=b.resolve(e)),n}static positionIsCleanForCompletion(e,n){return!(e.substring(0,n.character).indexOf("#")>=0)&&b.filterStringLiterals(e).substring(n.character,1)!==y}static filterStringLiterals(e){let n="",t=!1,a=!1,i=!1,o=!1;for(const s of e)if("\\"!==s){if(o||'"'!==s){if(o||"'"!==s)if("["===s&&(t||a))i=!i;else{if("]"===s&&(t||a)){i=!1,n+=s;continue}if("#"===s&&!t&&!a)return n+=s,n+=y.repeat(e.length-n.length),n}else if(!a&&(t=!t,!t)){n+=y;continue}}else if(!t&&(a=!a,!a)){n+=y;continue}n+=i||!t&&!a?s:y,o=!1}else i||!t&&!a?n+=s:(o=!0,n+=y);return n}static isClass(e){if(e in b.data.location.class)return e;{const n=e+".__init__",t=b.resolve(n);if(t&&t[0].keyword.indexOf(".")>0)return t[0].keyword.split(".")[0];const a=b.gameObjects.define_types[e];if(a&&a.baseClass&&a.baseClass.indexOf("(")>0){const e=a.baseClass.substring(0,a.baseClass.indexOf("("));return this.isClass(e)}}}static getClassAutoComplete(e){const n=[],t=e+".",a=b.data.location.class[e];if(a&&a.type&&a.type.length>0){const e=a.type.split(",");for(const t of e){const e=b.getClassAutoComplete(t.trim());if(e)for(const t of e)n.push(t)}}const i=b.data.location.callable;if(i){const e=Object.keys(i).filter((e=>0===e.indexOf(t)));if(e)for(const a in e){const i=e[a].substring(t.length);n.some((e=>e.label===i))||n.push(new r.CompletionItem(i,r.CompletionItemKind.Method))}}const o=b.gameObjects.properties[e];if(o)for(const e of o)n.some((n=>n.label===e.keyword))||("property"===e.source?n.push(new r.CompletionItem(e.keyword,r.CompletionItemKind.Property)):n.push(new r.CompletionItem(e.keyword,r.CompletionItemKind.Variable)));const s=b.gameObjects.fields[e];if(s)for(const e of s)n.some((n=>n.label===e.keyword))||n.push(new r.CompletionItem(e.keyword,r.CompletionItemKind.Field));return n}static resolve(e){const n=e.split(".");if(n.length<2)return;const t=b.find(n[0]);if(t&&1===t.length){const a=t[0];if(a&&a.filename&&""!==a.filename){const t=(0,l.getDefinitionFromFile)(a.filename,a.location);if(t){const a=(0,h.getBaseTypeFromDefine)(e,t.keyword);if(a)return b.find(`${a}.${n[1]}`)}}}}static getClassData(e){const n=(0,l.getDefinitionFromFile)(e.filename,e.location);if(n&&(e.documentation&&0!==e.documentation.length||(e.documentation=n.documentation),!e.args||0===e.args.length))if("class"===e.source){const n=b.data.location.callable[`${e.keyword}.__init__`];if(n){const t=(0,l.getDefinitionFromFile)(n[0],n[1]);if(t){let n=t.args.replace("(self, ","(");n=n.replace("(self)","()"),e.args=n}}else{const n=e.type.split(",");for(const t of n)if(0===e.args.length){const n=b.data.location.callable[`${t}.__init__`];if(n){const t=(0,l.getDefinitionFromFile)(n[0],n[1]);if(t&&t.args&&t.args.length>0){let n=t.args.replace("(self, ","(");n=n.replace("(self)","()"),e.args=n}}}}}else e.args=n.args;return e}static getClassProperties(e,n,t){const a=[],i=/^def\s+(\w*).*:/,o=/^\s*(\w*)\s*=\s*(.*$)/,s=(0,c.stripWorkspaceFromFile)(n.uri.path);try{let r=t;const l=n.lineAt(r-1).text.indexOf("class "+e);let c=!1;for(;!c&&r<n.lineCount;){let t=n.lineAt(r).text.replace(/[\n\r]/g,"");const d=t.length-t.trimStart().length;if(t.length>0&&d<=l){c=!0;break}t=t.trim();const u=t.match(i);if(u){const n=`${e}.${u[1]}`,t=b.data.location.callable[n];t&&t[0]===s?t[1]!==r+1&&(t[1]=r+1):b.data.location.callable[n]=[s,r+1]}const p=t.match(o);if(p&&d===2*l){const n=`::class ${e}:\n    ${t}`,i=new h.Navigation("variable",p[1],s,r+2,n,"",e,p.index);a.push(i)}if(t.startsWith("@property")){const t=n.lineAt(r+1).text.trim().match(i);if(t){const i=`${(0,h.getPyDocsFromTextDocumentAtLine)(n,r+2)}::class ${e}:\n    @property\n    def ${t[1]}(self):`,o=new h.Navigation("property",t[1],s,r+2,i,"",e,t.index);a.push(o)}r++}r++}return a}catch(e){return a}}static getClassFields(e,n,t){const a=[];if(!n||!n.lineCount)return a;const i=(0,c.stripWorkspaceFromFile)(n.uri.path),o=/^\s*(self)\.(\w*)\s*=\s*(.*$)/;try{let s=t;const r=n.lineAt(s-1).text;if(!r)return a;const l=r.indexOf("def ");if(l<0)return a;let c=!1;for(;!c&&s<n.lineCount;){let t=n.lineAt(s).text.replace(/[\n\r]/g,"");if(t.length>0&&t.length-t.trimStart().length<=l){c=!0;break}t=t.trim();const r=t.match(o);if(r){const t=`${(0,h.getPyDocsFromTextDocumentAtLine)(n,s)}::class ${e}:\n    def __init__(self):\n        self.${r[2]} = ...`,o=new h.Navigation("field",r[2],i,s+1,t,"",e,r.index);a.includes(o)||a.push(o)}s++}return a}catch(e){return a}}static getNavigationObject(e,n,t){return"string"!=typeof t[0]||"obsolete"!==t[0]&&"transitions"!==t[0]?"string"==typeof t[4]&&"Action"===t[4]?e=t[4].toLowerCase():"equivalent"===e&&(e=t[0]):e=t[0],new h.Navigation(e,n,"",0,t[5],t[2],t[4])}static async scanForScriptFiles(){const e=await r.workspace.findFiles("**/*.rpy");if(e&&e.length>0)for(const n of e){const e=await r.workspace.openTextDocument(n),t=(0,c.stripWorkspaceFromFile)((0,c.cleanUpPath)(n.path));b.scanDocumentForClasses(t,e)}return!0}static async scanForImages(){const e=await r.workspace.findFiles("**/*.{png,jpg,jpeg,webp}");if(e&&e.length>0)for(const n of e){const e=(0,c.stripWorkspaceFromFile)(n.path);if(b.getPythonName(e)){const t=(0,c.extractFilenameWithoutExtension)(e);if(t){const e=(0,c.stripWorkspaceFromFile)((0,c.cleanUpPath)(n.path)),a=new u.Displayable(t,"image","",e,-1);b.data.location.displayable[t]=a}}}return!0}static async scanForFonts(){const e=await r.workspace.findFiles("**/*.{ttf,otf,ttc}");if(e&&e.length>0)for(const n of e){let e=(0,c.stripWorkspaceFromFile)(n.path).replace(/^(game\/)/,"");e.endsWith(".ttc")&&(e="0@"+e),b.gameObjects.fonts[e]=e}return!0}static async scanForAudio(){const e=await r.workspace.findFiles("**/*.{opus,ogg,mp3,wav}");if(e&&e.length>0)for(const n of e){const e=(0,c.stripWorkspaceFromFile)(n.path),t=e.replace(/^(game\/)/,"");if(b.gameObjects.audio[t]='"'+t+'"',e.startsWith("game/audio/")&&b.getPythonName(e)){const n="audio."+(0,c.extractFilenameWithoutExtension)(e);n&&!b.gameObjects.audio[n]&&(b.gameObjects.audio[n]=n)}}return!0}static clearScannedDataForFile(e){void 0===b.data.location&&(b.data.location={});const n=["callable","class","displayable","persistent","properties","fields","stores"];for(const t of n){let n=b.data.location[t];if(n)for(const t in n)n[t]instanceof h.Navigation?n[t].filename===e&&delete n[t]:n[t][0]===e&&delete n[t];if(n=b.gameObjects[t],n)for(const t in n)n[t]instanceof h.Navigation?n[t].filename===e&&delete n[t]:n[t][0]===e&&delete n[t]}}static scanDocumentForClasses(e,n){const t=/\s*(register_channel|register_statement|default|define|class)[\s()]+/,a=/^\s*class\s+(\w*)\s*(\(.*\))?.*:/,i=/^\s*(image)\s+([^=.]*)\s*[=]\s*(.+)|(layeredimage)\s+(.+):|(image)\s+([^=.:]*)\s*:/,o=/.*renpy.(audio|music).register_channel\s*\(\s*"(\w+)"(.*)/,s=/^\s*(default|define)\s+persistent\.([a-zA-Z]+[a-zA-Z0-9_]*)\s*=\s*(.*$)/,r=/^(default|define)\s+([a-zA-Z0-9._]+)\s*=\s*([\w'"`[{]*)/,d=/^\s*(define)\s*(\w*)\s*=\s*(Character|DynamicCharacter)\s*\((.*)/,g=/.*renpy.register_statement\s*\("(\w+)"(.*)\)/,m=/[\s_]*outlines\s+(\[.*\])/,f=/^(init)\s+([-\d]+\s+)*python\s+in\s+(\w+):|^python\s+early\s+in\s+(\w+):/,y=(0,c.stripWorkspaceFromFile)(n.uri.path),T=b.renpyFunctions.internal,v=Object.keys(T).filter((e=>"transitions"===T[e][0]));for(let c=0;c<n.lineCount;++c){let T=n.lineAt(c).text,k=c;if(T.match(t)){let e=b.filterStringLiterals(T),t=(e.match(/\(/g)||[]).length,a=(e.match(/\)/g)||[]).length;for(;t>a&&k<n.lineCount-1&&k<10;)k++,T=T+n.lineAt(k).text+"\n",e=b.filterStringLiterals(T),t=(e.match(/\(/g)||[]).length,a=(e.match(/\)/g)||[]).length}if(0===T.trim().length)continue;const _=T.match(a);if(_){const t=_[1];let a=_[2];a&&(a=a.replace(/\(/g,"").replace(/\)/g,"").trim());const i=new h.Navigation("class",t,e,c+1,"","",a);b.data.location.class[t]=i;const o=b.getClassProperties(t,n,c+1);o&&(b.gameObjects.properties[t]=o);const s=b.data.location.callable[`${t}.__init__`];if(s&&s[0]===y){const e=b.getClassFields(t,n,s[1]);e&&(b.gameObjects.fields[t]=e)}continue}const x=T.match(i);if(x){let n="",t="image";if(x[2]?n=x[2].trim():x[5]?(n=x[5].trim(),t=x[4].trim()):x[7]&&(n=x[7].trim(),t=x[6].trim()),n.length>0){const a=new u.Displayable(n,t,x[3],e,c+1);b.data.location.displayable[n]=a}continue}const C=T.match(o);if(C){const n=C[2];b.gameObjects.channels[n]=[e,c+1];continue}const N=T.match(s);if(N){const n=N[2];b.data.location.persistent[n]=[e,c+1];continue}const S=T.match(m);if(S){const e=S[1];b.data.location.outlines||(b.data.location.outlines={},b.data.location.outlines.array=[]);let n=b.data.location.outlines.array;void 0===n&&(n=[]),n.includes(e)||n.push(e),b.data.location.outlines.array=n;continue}const I=T.match(r);if(I){const n=new h.DataType(I[2],I[1],I[3]);n.checkTypeArray("transitions",v),b.gameObjects.define_types[I[2]]=n,w("define",I[2],e,c)}const P=T.match(f);if(P){let n="";n=void 0!==P[4]?P[4]:P[3],b.gameObjects.stores[n]=[e,c+1];const t=new h.DataType(P[3],"default","store");b.gameObjects.define_types[n]=t;continue}const A=T.match(d);if(A){let n="",t="",a="";const i=(0,h.splitParameters)(A[4],!0);i&&(n=(0,h.stripQuotes)(i[0]),t=(0,h.getNamedParameter)(i,"image"),a=(0,h.getNamedParameter)(i,"dynamic")),"DynamicCharacter"===A[3]?a="True":a&&0!==a.length||(a="False");const o=new p.Character(n,t,a,i,e,c);b.gameObjects.characters[A[2]]=o;continue}const M=T.match(g);if(M){const n=M[1],t=(0,h.splitParameters)(M[1]+M[2],!0);let a="";const i=(0,h.getNamedParameter)(t,"execute");if(i&&i.length>0){const e=b.find(i);if(e){const n=(0,l.getDefinitionFromFile)(e[0].filename,e[0].location);n&&(a=n.documentation)}}const o=new h.Navigation("statement",n,e,c+1,a,"","cds",M.index);b.data.location.statement[n]=o}}}static async getCharacterImageAttributes(){const e=b.gameObjects.characters,n=b.data.location.displayable;for(const t in e){const a=e[t],i=[];if(a&&a.image&&a.image.length>0){const e=n[a.image];if(e){if("layeredimage"===e.image_type){const n=await b.getLayeredImageAttributes(e.name,e.filename,e.location);if(n)for(const e of n)i.includes(e)||i.push(e)}const t=Object.keys(n).filter((e=>n[e].tag===a.image));if(t)for(const e of t)if(e!==a.image){const n=e.substring(a.image.length+1);i.includes(n)||i.push(n)}}b.gameObjects.attributes[t]=i}}}static async getLayeredImageAttributes(e,n,t){const a=b.data.location.displayable,i=(0,c.getFileWithPath)(n),o=await r.workspace.openTextDocument(i),s=[],l=/^\s*attribute\s+(\w*)/;try{let n=t;const i=o.lineAt(n-1).text.indexOf("layeredimage "+e);let r=!1;for(;!r&&n<o.lineCount;){let t=o.lineAt(n).text.replace(/[\n\r]/g,"");if(t.length>0&&t.length-t.trimLeft().length<=i){r=!0;break}if(t=t.trim(),t.startsWith("attribute")){const e=t.match(l);e&&(s.includes(e[1])||s.push(e[1]))}else if(t.startsWith("group")&&t.indexOf("auto")>0){const n=t.match(/^\s*group\s+(\w*)/);if(n){const t=`${e}_${n[1]}_`,i=Object.keys(a).filter((e=>e.startsWith(t)));if(i)for(const e of i)if(e!==t){const n=e.substring(t.length);if(n.indexOf("_")>0){const e=n.split("_");s.includes(e[0])||s.push(e[0])}else s.includes(n)||s.push(n)}}}n++}return s}catch(e){return s}}static getPythonName(e){const n=/^[a-zA-Z_][a-zA-Z0-9_]*$/,t=((0,c.extractFilenameWithoutExtension)(e)||"").split(" ");for(let e=0;e<t.length;e++){const a=t[e].match(n);if(!a||0===a.length)return!1}return!0}}function T(){try{const e=(0,c.getNavigationJsonFilepath)();let n;(0,f.logMessage)(r.LogLevel.Info,`readNavigationJson: ${e}`);try{n=d.readFileSync(e,"utf-8")}catch(e){n="{}"}return JSON.parse(n)}catch(e){(0,f.logToast)(r.LogLevel.Error,`readNavigationJson error: ${e}`)}}function w(e,n,t,a){if("define"===e||"screen"===e||"label"===e||"transform"===e||"callable"===e){const i=b.data.location[e];if(i[n]){const e=i[n];e&&e[0]===t&&e[1]!==a+1&&(e[1]=a+1)}else i[n]=[t,a+1]}}n.NavigationData=b},9983:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.DataType=n.Navigation=void 0,n.getPyDocsAtLine=function(e,n){const t=[];let a=n,i=!1,o=!1,s=e[a].replace(/[\n\r]/g,"");const r=s.length-s.trimLeft().length;let l=0;for(;!i&&a<e.length;){if(s=e[a].replace(/[\n\r]/g,""),s.length>0&&s.length-s.trimLeft().length<=r&&a>n){i=!0;break}if(s.indexOf('"""')>=0){if(o)i=!0;else if(o=!0,l=s.indexOf('"""'),s=s.substring(l+3),s.length>0){if(s.indexOf('"""')>=0)return s.replace('"""',"");t.push(s)}}else o&&(0===s.length||s.length-s.trimLeft().length>=l+3?t.push("\n"+s.substring(l)):t.push(s.substring(l)));a++}return t.join("\n").trim()},n.getPyDocsFromTextDocumentAtLine=function(e,n){const t=[];let a=n,i=!1,o=!1,s=e.lineAt(a).text;const r=s.length-s.trimLeft().length;let l=0;for(;!i&&a<e.lineCount;){if(s=e.lineAt(a).text,s.length>0&&s.length-s.trimLeft().length<=r&&a>n){i=!0;break}if(s.indexOf('"""')>=0){if(o)i=!0;else if(o=!0,l=s.indexOf('"""'),s=s.substring(l+3),s.length>0){if(s.indexOf('"""')>=0)return s.replace('"""',"");t.push(s)}}else o&&(0===s.length||s.length-s.trimLeft().length>=l+3?t.push("\n"+s.substring(l)):t.push(s.substring(l)));a++}return t.join("\n").trim()},n.getBaseTypeFromDefine=function(e,n){const t=(n=n.trim()).match(/^(default|define)\s+(\w*)\s*=\s*(\w*)\(/);if(t&&t.length>=4)return t[3]},n.getArgumentParameterInfo=function(e,n,t){const i=new a.MarkdownString;i.appendMarkdown(o(e.documentation));const s=new a.SignatureInformation(`${e.keyword}${e.args}`,i);let r="",l=!1,h=!1,c=!1,d=!1,u=!0;for(let e of n)'"'===e?(e="'",l=!l):" "===e?e="_":"("===e?(u||(h=!0),u=!1):"["===e?c=!0:"{"===e?d=!0:")"===e?h=!1:"]"===e?c=!1:"}"===e?d=!1:","===e&&(l||h||c||d)&&(e=";"),r+=e;const p=r.indexOf("(")+1,g=r.substring(p).split(","),m=r.substring(0,t);let f=r.substring(m.indexOf("(")+1).split(",").length-1,y="";g[f].indexOf("=")>0&&(y=g[f].split("=")[0].trim().replace("_",""));const b=[];let T=e.args;if(T){T.startsWith("(")&&(T=T.substring(1)),T.endsWith(")")&&(T=T.substring(0,T.length-1));const e=T.split(",");if(e){let n=0;y&&y.length>0&&"**kwargs"===e[e.length-1].trim()&&(f=e.length-1);for(const t of e){const e=t.trim().split("=");let i="`"+e[0].trim()+"` parameter";e.length>1?i=i+" (optional). Default is `"+e[1].trim()+"`.":i+=".";const o=new a.ParameterInformation(t.trim(),new a.MarkdownString(i));b.push(o),t.trim().indexOf("=")>0?t.trim().split("=")[0]===y&&(f=n):t.trim()===y&&(f=n),n++}}}return s.activeParameter=f,s.parameters=b,s},n.formatDocumentationAsMarkdown=o,n.splitParameters=function(e,n=!1){const t=[];let a="",i=!1,o=!1,s=!1,r=!1;for(let n of e)'"'===n?i=!i:"("===n?o=!0:"["===n?s=!0:"{"===n?r=!0:")"===n?o=!1:"]"===n?s=!1:"}"===n?r=!1:","===n&&(i||o||s||r)&&(n="﹐"),a+=n;const l=a.split(",");for(let e of l){if(n&&(e=e.trim()),e=e.replace("﹐",","),n){for(;e.indexOf(" =")>0;)e=e.replace(" =","=");for(;e.indexOf("= ")>0;)e=e.replace("= ","=")}t.push(e)}return t},n.getNamedParameter=function(e,n){const t=`${n}=`;let a="";const i=e.filter((function(e){return 0===e.indexOf(t)}));return i&&i.length>0&&(a=s(i[0].split("=")[1])),a},n.stripQuotes=s,n.rangeAsString=function(e,n){return`${e}:${n.start.line};${n.start.character}-${n.end.character}`},n.getCurrentContext=function(e,n){const t=/\s*(screen|label|transform|def|class|style)\s+([a-zA-Z0-9_]+)\s*(\((.*)\):|:)/,a=/^(init)\s+([-\d]+\s+)*python\s+in\s+(\w+):/;let o=n.line;for(;o>=0;){const s=i.NavigationData.filterStringLiterals(e.lineAt(o).text),r=s.match(a);if(r)return`store.${r[3]}`;if((s.startsWith("python ")||s.startsWith("init "))&&s.trim().endsWith(":"))return;const l=s.length-s.trimLeft().length,h=s.match(t);if(h&&l<n.character)return h[1];o--}};const a=t(1398),i=t(1208);function o(e){return(e=(e=(e=e.replace(/\\/g,'"')).replace("```","\n\n```")).replace(/:other:/g,"").replace(/:func:/g,"").replace(/:var:/g,"").replace(/:ref:/g,"").replace(/:class:/g,"").replace(/:tpref:/g,"").replace(/:propref:/g,"")).trim()}function s(e){return(e.startsWith('"')&&e.endsWith('"')||e.startsWith("'")&&e.endsWith("'")||e.startsWith("`")&&e.endsWith("`"))&&(e=(e=e.substring(1)).substring(0,e.length-1)),e}n.Navigation=class{source;keyword;filename;location;character;args;type;documentation;constructor(e,n,t,a,i="",o="",s="",r=0){this.source=e,this.keyword=n,this.filename=t,this.location=a,this.character=r,this.documentation=i,this.args=o,this.type=s,this.documentation&&(this.documentation=this.documentation.replace(/\\\\/g,'"'))}toRange(){return new a.Range(this.location-1,this.character,this.location-1,this.character+this.keyword.length)}},n.DataType=class{variable;define;baseClass;type;constructor(e,n,t){this.variable=e,this.define=n,this.baseClass=t,this.type="","True"===t||"False"===t?this.type="boolean":isNaN(+this.baseClass)?"_"===t||t.startsWith('"')||t.startsWith("`")||t.startsWith("'")?this.type="str":t.startsWith("[")?this.type="list":t.startsWith("{")?this.type="dictionary":t.startsWith("(")&&t.endsWith(")")?this.type="tuple":"store"===t&&(this.type="store"):this.type="number"}checkTypeArray(e,n){n.includes(this.baseClass)&&(this.type=e)}}},2059:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.symbolProvider=void 0,n.getDocumentSymbols=r;const a=t(1398),i=t(9983),o=t(1208),s=t(8200);function r(e){if(!e)return;const n=a.Uri.file(e.fileName),t=(0,s.stripWorkspaceFromFile)(n.path),r=[],d=new a.Range(0,0,0,0);for(const e in o.NavigationData.data.location){const n=o.NavigationData.data.location[e],s=new a.DocumentSymbol(e,"",l(e,!1),d,d);for(const o in n)if(n[o]instanceof i.Navigation){if(n[o].filename===t){const t=new a.Range(n[o].location-1,0,n[o].location-1,0),i=new a.DocumentSymbol(o,`:${n[o].location}`,l(e,!0),t,t);"class"===e&&h(i,o),s.children.push(i)}}else if(n[o][0]===t){const t=new a.Range(n[o][1]-1,0,n[o][1]-1,0),i=new a.DocumentSymbol(o,`:${n[o][1]}`,l(e,!0),t,t);"class"===e&&h(i,o),s.children.push(i)}s.children.length>0&&("class"===e?r.unshift(s):r.push(s))}const u=o.NavigationData.gameObjects.stores;if(u){const e=new a.DocumentSymbol("store","",l("store",!1),d,d);for(const n in u){const o=u[n];if(o instanceof i.Navigation){if(o.filename===t){const t=new a.Range(o.location-1,0,o.location-1,0),i=new a.DocumentSymbol(n,`:${o.location}`,l("store",!0),t,t);c(i,n),e.children.push(i)}}else if(o[0]===t){const t=new a.Range(o[1]-1,0,o[1]-1,0),i=new a.DocumentSymbol(n,`:${o[1]}`,l("store",!0),t,t);c(i,n),e.children.push(i)}}e.children.length>0&&r.push(e)}return r}function l(e,n){switch(e){case"callable":return n?a.SymbolKind.Method:a.SymbolKind.Module;case"screen":return n?a.SymbolKind.Struct:a.SymbolKind.Module;case"define":case"transform":return n?a.SymbolKind.Variable:a.SymbolKind.Module;case"label":return n?a.SymbolKind.String:a.SymbolKind.Module;case"class":return n?a.SymbolKind.Class:a.SymbolKind.Module;case"displayable":return n?a.SymbolKind.File:a.SymbolKind.Module;case"persistent":return n?a.SymbolKind.Constant:a.SymbolKind.Module;case"store":return a.SymbolKind.Module;default:return a.SymbolKind.Variable}}function h(e,n){const t=o.NavigationData.data.location.callable;if(t){const i=Object.keys(t).filter((e=>0===e.indexOf(n+".")));if(i)for(const o of i){const i=o.substring(n.length+1),s=t[o][1],r=new a.Range(s-1,0,s-1,0);e.children.push(new a.DocumentSymbol(i,`:${s}`,a.SymbolKind.Method,r,r))}}const i=o.NavigationData.gameObjects.fields[n];if(i)for(const n of i){const t=new a.Range(n.location-1,0,n.location-1,0);e.children.push(new a.DocumentSymbol(n.keyword,`:${n.location}`,a.SymbolKind.Field,t,t))}const s=o.NavigationData.gameObjects.properties[n];if(s)for(const n of s){const t=new a.Range(n.location-1,0,n.location-1,0);e.children.push(new a.DocumentSymbol(n.keyword,`:${n.location}`,a.SymbolKind.Property,t,t))}}function c(e,n){const t=o.NavigationData.data.location.callable;if(t){const i=Object.keys(t).filter((e=>0===e.indexOf(n+".")));if(i)for(const o of i){const i=o.substring(n.length+1),s=t[o][1],r=new a.Range(s-1,0,s-1,0);e.children.push(new a.DocumentSymbol(i,`:${s}`,a.SymbolKind.Method,r,r))}}const i=o.NavigationData.gameObjects.fields[`store.${n}`];if(i)for(const t of i){const i=new a.Range(t.location-1,0,t.location-1,0);e.children.push(new a.DocumentSymbol(t.keyword.substring(n.length+1),`:${t.location}`,a.SymbolKind.Field,i,i))}}n.symbolProvider=a.languages.registerDocumentSymbolProvider("renpy",{provideDocumentSymbols(e,n){if(!n.isCancellationRequested)return new Promise((n=>{n(r(e))}))}})},8295:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.referencesProvider=void 0,n.findAllReferences=s,n.findReferenceMatches=r;const a=t(1398),i=t(2144),o=t(1208);async function s(e,n,t){const o=e.getWordRangeAtPosition(n);let s=e.getText(o);if(!s)return;if(o){const t=(0,i.getKeywordPrefix)(e,n,o);t&&"store"!==t&&(s=`${t}.${s}`)}const l=[],h=await a.workspace.findFiles("**/*.rpy");if(h&&h.length>0)for(const e of h){const n=r(s,await a.workspace.openTextDocument(e));if(n)for(const e of n)l.push(e)}return l}function r(e,n){const t=[],i=RegExp(`[^a-zA-Z_](${e.replace(".","/.")})[^a-zA-Z_]`,"g");let s=0;for(;s<n.lineCount;){const e=o.NavigationData.filterStringLiterals(n.lineAt(s).text),r=i.exec(e);if(r){const e=new a.Position(s,r.index),i=new a.Location(n.uri,e);t.push(i)}s++}return t}n.referencesProvider=a.languages.registerReferenceProvider("renpy",{async provideReferences(e,n,t,a){if(!a.isCancellationRequested)return await s(e,n)}})},8520:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.semanticTokensProvider=void 0,n.getSemanticTokens=h;const a=t(1398),i=t(9983),o=t(1208),s=t(8200),r=t(1377),l=new a.SemanticTokensLegend(["class","parameter","variable","keyword"],["declaration","defaultLibrary"]);function h(e){const n=new a.SemanticTokensBuilder(l),t=/\s*(screen|label|transform|def|class)\s+/,h=/\s*(screen|label|transform|class)\s+([a-zA-Z_]\w*)\s*\((.*)\)\s*:|\s*(label)\s+([a-zA-Z_]\w*)\s*:|^(init)\s+([-\d]+\s+)*python\s+in\s+(\w+):|^(python)\s+early\s+in\s+(\w+):|\s*(class)\s+([a-zA-Z_]\w*)\s*:|\s*(def)\s+([a-zA-Z_]\w*)\s*\((.*)\)\s*(->\s*[a-zA-Z_]\w*\s*)?:/s,d=/^\s*(default|define)\s+([a-zA-Z]+[a-zA-Z0-9_]*)\s*=\s*(.*)/,u=/^\s*(default|define)\s+persistent\.([a-zA-Z]+[a-zA-Z0-9_]*)\s*=\s*(.*)/,p=(0,s.stripWorkspaceFromFile)(e.uri.path);let g=!1,m="",f=0,y="",b=[],T=[],w={},v=0,k=0;for(let s=0;s<e.lineCount;++s){let l=e.lineAt(s).text;if(l.length>0&&l.length-l.trimStart().length<=v&&(m="",b=[],T=[],w={},f=0,y=""),k=s,l.match(t)){let n=o.NavigationData.filterStringLiterals(l),t=(n.match(/\(/g)||[]).length,a=(n.match(/\)/g)||[]).length;for(;t>a&&k<e.lineCount-1;)k++,l=l+e.lineAt(k).text+"\n",n=o.NavigationData.filterStringLiterals(l),t=(n.match(/\(/g)||[]).length,a=(n.match(/\)/g)||[]).length}if(0===l.trim().length)continue;if(l.indexOf('"""')>=0){g?g=!1:l.substring(l.indexOf('"""')+3).indexOf('"""')<0&&(g=!0);continue}if(g)continue;const _=l.match(h);if(_){if("class"!==_[1]&&_[3]&&_[3].length>0&&"_"!==_[2]){v=l.length-l.trimStart().length,m=_[2],y=_[1],f=s+1;let n=l.indexOf("(")+1;const t=(0,i.splitParameters)(_[3],!1);for(const e of t){const t=e.length-e.trimStart().length;let r=e.length;e.indexOf("=")>0&&(r=e.split("=")[0].trimEnd().length);const h=new a.Range(s,n+t,s,n+r);b.push(l.substring(n+t,r-t)),w[e.substring(t,r)]=new i.Navigation("parameter",e.substring(t,r),p,s+1,"",e.trim(),"",n+t);const c=(0,i.rangeAsString)(p,h),d=`${y} ${m}()`,u=new i.Navigation("parameter",_[1],p,f,d,"",y,n+t);o.NavigationData.gameObjects.semantic[c]=u,n+=e.length+1}if("def"===_[1]){const n=s-1<0?void 0:(0,i.getCurrentContext)(e,new a.Position(s-1,v));void 0===n?(0,o.updateNavigationData)("callable",_[2],p,s):n.startsWith("store.")&&(0,o.updateNavigationData)("callable",`${n.split(".")[1]}.${_[2]}`,p,s)}else(0,o.updateNavigationData)(_[1],_[2],p,s)}else if("screen"===_[1]||"def"===_[1]||"class"===_[1]||"class"===_[11])if(v=l.length-l.trimStart().length,m=_[2]||_[12],y=_[1]||_[11],f=s,b=[],T=[],w={},"def"===_[1]){const n=s-1<0?void 0:(0,i.getCurrentContext)(e,new a.Position(s-1,v));void 0===n?(0,o.updateNavigationData)("callable",_[2],p,s):n.startsWith("store.")&&(0,o.updateNavigationData)("callable",`${n.split(".")[1]}.${_[2]}`,p,s)}else"screen"===_[1]&&(0,o.updateNavigationData)(_[1],_[2],p,s);else if("label"===_[4])v=l.length-l.trimStart().length,void 0===(s-1<0?void 0:(0,i.getCurrentContext)(e,new a.Position(s-1,v)))&&(0,o.updateNavigationData)("label",_[5],p,s);else if("init"===_[6]&&void 0!==_[8]||"python"===_[9]&&void 0!==_[10]){v=l.length-l.trimStart().length,m=void 0!==_[10]?_[10]:_[8],y="store",f=s+1,b=[],T=[],w={};const e=new i.Navigation("store",m,p,f,"","",y,v);o.NavigationData.gameObjects.stores[m]=e}}else if(""!==m){if(b.length>0)for(const e of b)try{const t=c(e),r=RegExp(`[^a-zA-Z_](${t})($|[^a-zA-Z_])`,"g");let h;for(;null!==(h=r.exec(l));){const e=h[0].indexOf(h[1]),r=h[1].length;if(o.NavigationData.positionIsCleanForCompletion(l,new a.Position(s,h.index+e))){const l=new a.Range(s,h.index+e,s,h.index+e+r);"self"===t||"cls"===t?n.push(l,"keyword"):n.push(l,"parameter");const c=(0,i.rangeAsString)(p,l),d=`${y} ${m}()`,u=w[h[1]],g=new i.Navigation("parameter",h[1],p,f,d,"",y,u.character);o.NavigationData.gameObjects.semantic[c]=g}}}catch(e){(0,r.logMessage)(a.LogLevel.Error,e)}if(T.length>0)for(const e of T)try{const t=c(e[0]),r=RegExp(`[^a-zA-Z_](${t})($|[^a-zA-Z_])`,"g");let h;for(;null!==(h=r.exec(l));){const t=h[0].indexOf(h[1]),r=h[1].length;if(o.NavigationData.positionIsCleanForCompletion(l,new a.Position(s,h.index+t))){const l=new a.Range(s,h.index+t,s,h.index+t+r);n.push(l,"variable");const c=(0,i.rangeAsString)(p,l),d=w[`${y}.${m}.${h[1]}`];if(void 0===d)continue;let u="variable";"sv"===e[1]?u="screen variable":"g"===e[1]&&(u="global variable");const g=new i.Navigation(u,h[1],p,d.location,d.documentation,"",d.type,d.character);o.NavigationData.gameObjects.semantic[c]=g}}}catch(e){(0,r.logMessage)(a.LogLevel.Error,`error at ${p}:${s}: ${e}`)}if("screen"===y){const e=/^\s*(default)\s+(\w*)\s*=\s*([\w'"`[{]*)/.exec(l);if(e){T.push([e[2],"sv"]);const t=e[0].indexOf(e[2]),r=new a.Range(s,e.index+t,s,e.index+t+e[2].length);n.push(r,"variable",["declaration"]);const h=(0,i.rangeAsString)(p,r),c=`${y} ${m}()\n    ${l.trim()}`,d=new i.Navigation("screen variable",e[2],p,s+1,c,"",y,e.index+t);o.NavigationData.gameObjects.semantic[h]=d,w[`${y}.${m}.${e[2]}`]=d}}else if("def"===y||"store"===y||"class"===y){const e=[/^\s*(global)\s+(\w*)/g,/\s*(for)\s+([a-zA-Z0-9_]+)\s+in\s+/g,/(\s*)([a-zA-Z0-9_,]+)\s*=\s*[a-zA-Z0-9_"]+/g];for(const t of e){let e;for(;null!==(e=t.exec(l));)try{let t=l.indexOf(e[2]);const r=e[2].split(",");for(const h of r){const r=h.length-h.trimStart().length;if(b.includes(h.substring(r)))continue;const c=h.length;let d="variable";if("global"===e[1]&&(d="global variable"),T.some((e=>e[0]===h.substring(r))))continue;"global"===e[1]?T.push([h.substring(r),"g"]):T.push([h.substring(r),"v"]);const u=new a.Range(s,t+r,s,t+c);n.push(u,"variable",["declaration"]);const g=(0,i.rangeAsString)(p,u);let f="";f="store"===y?`init python in ${m}:\n    ${l.trim()}`:`${y} ${m}()\n    ${l.trim()}`;const v=new i.Navigation(d,h.substring(r),p,s+1,f,"",y,t+r);if(o.NavigationData.gameObjects.semantic[g]=v,w[`${y}.${m}.${h.substring(r)}`]=v,"store"===y){const e=`store.${m}`,n=`${m}.${h.substring(r)}`,a=new i.Navigation(d,n,p,s+1,f,"",y,t+r);void 0===o.NavigationData.gameObjects.fields[e]&&(o.NavigationData.gameObjects.fields[e]=[]),o.NavigationData.gameObjects.fields[e]=o.NavigationData.gameObjects.fields[e].filter((e=>e.keyword!==n)),o.NavigationData.gameObjects.fields[e].push(a)}t+=h.length+1}}catch(e){(0,r.logMessage)(a.LogLevel.Error,`error at ${p}:${s}: ${e}`)}}}}else if(""===m){let e=l.match(d);if(e){const n=new i.DataType(e[2],e[1],e[3]);o.NavigationData.gameObjects.define_types[e[2]]=n,(0,o.updateNavigationData)("define",e[2],p,s)}e=l.match(u),e&&(o.NavigationData.data.location.persistent[e[2]]=[p,s+1])}}return n.build()}function c(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}n.semanticTokensProvider=a.languages.registerDocumentSemanticTokensProvider("renpy",{provideDocumentSemanticTokens(e,n){if(!n.isCancellationRequested&&"renpy"===e.languageId)return new Promise((n=>{n(h(e))}))}},l)},8279:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.signatureProvider=void 0,n.getSignatureHelp=r;const a=t(1398),i=t(2144),o=t(9983),s=t(1208);function r(e,n,t){let r="";const l=e.lineAt(n.line).text,h=l.substring(0,n.character).lastIndexOf("(");if(h>=0){const t=new a.Position(n.line,h-1),o=e.getWordRangeAtPosition(t);if(!o)return;r=e.getText(o);const s=(0,i.getKeywordPrefix)(e,n,o);s&&(r=`${s}.${r}`)}const c=new a.SignatureHelp,d=s.NavigationData.getNavigationDumpEntries(r);if(d)for(let e of d)if(e.args&&0!==e.args.length||(e=s.NavigationData.getClassData(e)),e.args&&e.args.length>0){const t=(0,o.getArgumentParameterInfo)(e,l,n.character);c.activeParameter=0,c.activeSignature=0,c.signatures.push(t)}return c}n.signatureProvider=a.languages.registerSignatureHelpProvider("renpy",{provideSignatureHelp(e,n,t,a){if(!t.isCancellationRequested)return new Promise((t=>{t(r(e,n))}))}},"(",",","=")},6008:function(e,n,t){var a=this&&this.__createBinding||(Object.create?function(e,n,t,a){void 0===a&&(a=t);var i=Object.getOwnPropertyDescriptor(n,t);i&&!("get"in i?!n.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,a,i)}:function(e,n,t,a){void 0===a&&(a=t),e[a]=n[t]}),i=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&a(n,e,t);return i(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.RenpyTaskProvider=void 0;const s=o(t(1398)),r=t(8200),l=t(2503);n.RenpyTaskProvider=class{tasks;async provideTasks(){return await this.getTasks()}resolveTask(e){if(e.definition.command){const n=e.definition;return this.getTask(n)}}getTasks(){return void 0!==this.tasks||(this.tasks=[],this.tasks.push(this.getTask({type:"renpy",command:"compile"})),this.tasks.push(this.getTask({type:"renpy",command:"dialogue",args:["None"]})),this.tasks.push(this.getTask({type:"renpy",command:"lint",args:["lint.txt"]})),this.tasks.push(this.getTask({type:"renpy",command:"rmpersistent"}))),this.tasks}getTask(e){let n=l.Configuration.getRenpyExecutablePath()+" "+(0,r.getWorkspaceFolder)()+" "+e.command;return e.args&&(n+=" "+e.args.join(" ")),new s.Task(e,s.TaskScope.Workspace,e.command,"renpy",new s.ShellExecution(n))}}},9365:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.transform=n.atlBlockTester=n.atlStatements=n.atlChoice=n.atlFallback=n.atlWarper=n.atlWarperBroken=n.atlWarperName=n.atlBuildInWarpers=n.atlFunction=n.atlOn=n.atlEvent=n.atlEventDefName=n.atlEventName=n.atlBuildInEvents=n.atlKeywords=n.atlExpression=n.atlSimpleExpression=n.atlBuildInProperties=n.atl=void 0;const a=t(5420);n.atl={patterns:[]},n.atlBuildInProperties={patterns:[{debugName:"atlBuildInProperties.patterns![0]",match:/\b(?<!\.)(?:(warp)|(circles)|(clockwise)|(counterclockwise))\b/dg,captures:{1:{token:a.KeywordTokenType.Warp},2:{token:a.KeywordTokenType.Circles},3:{token:a.KeywordTokenType.Clockwise},4:{token:a.KeywordTokenType.Counterclockwise}}},{debugName:"atlBuildInProperties.patterns![1]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:xpos|ypos|xanchor|yanchor|xcenter|ycenter|radius)\b/g},{debugName:"atlBuildInProperties.patterns![2]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:pos|anchor|xycenter|around|alignaround|matrixanchor)\b/g},{debugName:"atlBuildInProperties.patterns![3]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:xalign|yalign|zoom|xzoom|yzoom|alpha|additive|angle|delay|events|zpos)\b/g},{debugName:"atlBuildInProperties.patterns![4]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:align|knot)\b/g},{debugName:"atlBuildInProperties.patterns![5]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:xoffset|yoffset|xtile|ytile)\b/g},{debugName:"atlBuildInProperties.patterns![6]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:offset)\b/g},{debugName:"atlBuildInProperties.patterns![7]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:rotate_pad|transform_anchor|nearest|crop_relative|subpixel|zzoom)\b/g},{debugName:"atlBuildInProperties.patterns![8]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:rotate|xpan|ypan|blur)\b/g},{debugName:"atlBuildInProperties.patterns![9]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:xsize|ysize)\b/g},{debugName:"atlBuildInProperties.patterns![10]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:crop)\b/g},{debugName:"atlBuildInProperties.patterns![11]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:corner1|corner2)\b/g},{debugName:"atlBuildInProperties.patterns![12]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:xysize)\b/g},{debugName:"atlBuildInProperties.patterns![13]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:fit)\b/g},{debugName:"atlBuildInProperties.patterns![14]",token:a.MetaTokenType.Deprecated,match:/\b(?<!\.)(?:size|maxsize)\b/g},{debugName:"atlBuildInProperties.patterns![15]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:matrixcolor)\b/g},{debugName:"atlBuildInProperties.patterns![16]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:matrixtransform)\b/g},{debugName:"atlBuildInProperties.patterns![17]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:perspective)\b/g}]},n.atlSimpleExpression={patterns:[n.atlBuildInProperties,{debugName:"atlSimpleExpression.patterns![21]",token:a.EntityTokenType.Identifier,match:/\b([a-zA-Z_]\w*)\b/g}]},n.atlExpression={patterns:[n.atlSimpleExpression,{debugName:"atlExpression.patterns![1]",begin:/\b(with)\b/dg,beginCaptures:{1:{token:a.KeywordTokenType.With}},end:/$/gm,patterns:[n.atlSimpleExpression]}]},n.atlKeywords={patterns:[{debugName:"atlKeywords.patterns![0]",match:/(?<=^[ \t]*)(animation)\b/dgm,captures:{1:{token:a.KeywordTokenType.Animation}}},{debugName:"atlKeywords.patterns![1]",match:/(?<=^[ \t]*)(pass)\b/dgm,captures:{1:{token:a.KeywordTokenType.Pass}}},{debugName:"atlKeywords.patterns![2]",begin:/(?<=^[ \t]*)(?:(repeat)|(time)|(pause))\b/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Repeat},2:{token:a.KeywordTokenType.Time},3:{token:a.KeywordTokenType.Pause}},end:/$/gm,patterns:[n.atlSimpleExpression]},{debugName:"atlKeywords.patterns![3]",contentToken:a.MetaTokenType.ATLWith,begin:/(?<=^[ \t]*)(with)\b/dgm,beginCaptures:{1:{token:a.KeywordTokenType.With}},end:/$/gm,patterns:[n.atlSimpleExpression]},{debugName:"atlKeywords.patterns![4]",contentToken:a.MetaTokenType.ATLContains,begin:/(?<=^[ \t]*)(contains)\b/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Contains}},end:/$/gm,patterns:[n.atlExpression]}]},n.atlBuildInEvents={debugName:"atlBuildInEvents",token:a.EntityTokenType.EventName,match:/\b(?<!\.)(?:start|show|replace|hide|replaced|update|hover|idle|selected_hover|selected_idle)\b/g},n.atlEventName={patterns:[n.atlBuildInEvents,{debugName:"atlEventName.patterns![2]",token:a.MetaTokenType.FunctionCall,match:/\b([a-zA-Z_]\w*)\b/g}]},n.atlEventDefName={patterns:[n.atlBuildInEvents,{debugName:"atlEventDefName.patterns![2]",token:a.EntityTokenType.FunctionName,match:/\b([a-zA-Z_]\w*)\b/g}]},n.atlEvent={debugName:"atlEvent",token:a.MetaTokenType.ATLEvent,match:/^[ \t]*(event)\b[ \t]*\b([a-zA-Z_]\w*)\b/dgm,captures:{1:{token:a.KeywordTokenType.Event},2:{patterns:[n.atlEventName]}}},n.atlOn={debugName:"atlOn",token:a.MetaTokenType.ATLOnStatement,contentToken:a.MetaTokenType.ATLOnParameters,begin:/(?<=^[ \t]*)(on)\b[ \t]*/dgm,beginCaptures:{1:{token:a.KeywordTokenType.On}},end:/(?=#|:)|$/gm,patterns:[n.atlEventName,{debugName:"atlOn.patterns![1]",token:a.CharacterTokenType.Comma,match:/[ \t]*,[ \t]*/g}]},n.atlFunction={debugName:"atlFunction",token:a.MetaTokenType.ATLFunction,match:/^[ \t]*(function)\b[ \t]*\b([a-zA-Z_]\w*)\b/dgm,captures:{1:{token:a.KeywordTokenType.Function},2:{patterns:[{debugName:"atlFunction.captures![2].patterns![1]",token:a.MetaTokenType.FunctionCall,match:/\b([a-zA-Z_]\w*)\b/g}]}}},n.atlBuildInWarpers={debugName:"atlBuildInWarpers",token:a.EntityTokenType.FunctionName,match:/\b(?<!\.)(?:linear|ease|easein|easeout|ease_back|ease_bounce|ease_circ|ease_cubic|ease_elastic|ease_expo|ease_quad|ease_quart|ease_quint|easein_back|easein_bounce|easein_circ|easein_cubic|easein_elastic|easein_expo|easein_quad|easein_quart|easein_quint|easeout_back|easeout_bounce|easeout_circ|easeout_cubic|easeout_elastic|easeout_expo|easeout_quad|easeout_quart|easeout_quint)\b/g},n.atlWarperName={patterns:[n.atlBuildInWarpers,n.atlBuildInProperties,{debugName:"atlWarperName.patterns![3]",token:a.MetaTokenType.FunctionCall,match:/\b([a-zA-Z_]\w*)\b/g}]},n.atlWarperBroken={debugName:"atlWarperBroken",token:a.MetaTokenType.ATLWarper,begin:/(?<=^[ \t]*)([a-zA-Z_]\w*)\b/dgm,beginCaptures:{1:{patterns:[n.atlWarperName]}},end:/(?=[ \t]*#)|$/gm,patterns:[n.atlSimpleExpression]},n.atlWarper={debugName:"atlWarper",token:a.MetaTokenType.ATLWarper,begin:/(?<=^[ \t]*)(linear|ease|easein|easeout|ease_back|ease_bounce|ease_circ|ease_cubic|ease_elastic|ease_expo|ease_quad|ease_quart|ease_quint|easein_back|easein_bounce|easein_circ|easein_cubic|easein_elastic|easein_expo|easein_quad|easein_quart|easein_quint|easeout_back|easeout_bounce|easeout_circ|easeout_cubic|easeout_elastic|easeout_expo|easeout_quad|easeout_quart|easeout_quint)\b/dgm,beginCaptures:{1:{patterns:[n.atlWarperName]}},end:/(?=[ \t]*#)|$/gm,patterns:[n.atlSimpleExpression]},n.atlFallback={patterns:[]},n.atlChoice={debugName:"atlChoice",token:a.MetaTokenType.ATLChoiceStatement,contentToken:a.MetaTokenType.ATLChoiceParameters,begin:/(?<=^[ \t]*)(choice)\b[ \t]*/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Choice}},end:/(?=#|:)|$/gm,patterns:[n.atlSimpleExpression]},n.atlStatements={patterns:[{debugName:"atlStatements.patterns![0]",token:a.MetaTokenType.ATLBlockStatement,match:/(?<=^[ \t]*)(block)\b[ \t]*/dgm,captures:{1:{token:a.KeywordTokenType.Block}}},{debugName:"atlStatements.patterns![1]",token:a.MetaTokenType.ATLParallelStatement,match:/(?<=^[ \t]*)(parallel)\b[ \t]*/dgm,captures:{1:{token:a.KeywordTokenType.Parallel}}},{debugName:"atlStatements.patterns![2]",token:a.MetaTokenType.ATLContainsStatement,match:/(?<=^[ \t]*)(contains)\b[ \t]*/dgm,captures:{1:{token:a.KeywordTokenType.Contains}}},n.atlChoice,n.atlOn]},n.atlBlockTester={debugName:"atlBlockTester",contentToken:a.MetaTokenType.ATLBlock,begin:/(?<=(^[ \t]*)(?:camera|image|show|scene|transform|on|block|parallel|contains|choice)\b.*?)(:)/dgm,beginCaptures:{2:{token:a.CharacterTokenType.Colon}},end:/^(?=(?!\1)[ \t]*[^\s#]|\1[^\s#])/gm,patterns:[]},n.transform={debugName:"transform",token:a.MetaTokenType.TransformStatement,contentToken:a.MetaTokenType.TransformParameters,begin:/(?<=^[ \t]*)(transform)\b[ \t]*/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Transform}},end:/(?=#|:)|$/gm,patterns:[{debugName:"transform.patterns![0]",token:a.EntityTokenType.Identifier,match:/\b([a-zA-Z_]\w*)\b/g}]},n.atl.patterns.push(n.atlKeywords,n.atlWarper,n.atlStatements,n.atlSimpleExpression,n.atlEvent,n.atlFunction,n.atlFallback)},5100:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.registerDebugDecorator=async function(e){await O(),e.subscriptions.push(R=i.workspace.onDidChangeTextDocument((async e=>{const n=i.window.activeTextEditor;n&&e.document===n.document&&await O(!0)}))),e.subscriptions.push(F=i.window.onDidChangeActiveTextEditor((async()=>{await O()})))},n.unregisterDebugDecorator=function(){R?.dispose(),F?.dispose();const e=i.window.activeTextEditor;e&&I.forEach((n=>e.setDecorations(n,[])))};const a=t(2987),i=t(1398),o=t(5420),s=t(7957),r=t(7414),l=t(1377);let h;const c=i.window.createTextEditorDecorationType({borderWidth:"1px",borderStyle:"solid",borderColor:"#569cd6"}),d=i.window.createTextEditorDecorationType({borderWidth:"1px",borderStyle:"solid",borderColor:"#C586C0"}),u=i.window.createTextEditorDecorationType({borderWidth:"1px",borderStyle:"solid",borderColor:"#9CDCFE",fontWeight:"bold"}),p=i.window.createTextEditorDecorationType({borderWidth:"1px",borderStyle:"solid",borderColor:"#4EC9B0"}),g=i.window.createTextEditorDecorationType({borderWidth:"1px",borderStyle:"solid",borderColor:"#DCDCAA"}),m=i.window.createTextEditorDecorationType({borderWidth:"1px",borderStyle:"solid",borderColor:"#9CDCFE"}),f=i.window.createTextEditorDecorationType({borderWidth:"1px",borderStyle:"solid",borderColor:"#D4D4D4",fontWeight:"bold"}),y=i.window.createTextEditorDecorationType({borderWidth:"1px",borderStyle:"solid",borderColor:"#6A9955"}),b=i.window.createTextEditorDecorationType({borderWidth:"1px",borderStyle:"solid",borderColor:"#ce9178"}),T=i.window.createTextEditorDecorationType({borderWidth:"1px",borderStyle:"solid",borderColor:"#DCDCAA",fontWeight:"bold"}),w=i.window.createTextEditorDecorationType({borderWidth:"1px",borderStyle:"solid",borderColor:"#9CDCFE"}),v=i.window.createTextEditorDecorationType({borderWidth:"1px",borderStyle:"solid",borderColor:"#b5cea8"}),k=i.window.createTextEditorDecorationType({borderWidth:"1px",borderStyle:"solid",borderColor:"#D4D4D4"}),_=i.window.createTextEditorDecorationType({borderWidth:"1px",borderStyle:"solid",borderColor:"#569cd6",backgroundColor:"#569cd633"}),x=i.window.createTextEditorDecorationType({borderWidth:"1px",borderStyle:"solid",borderColor:"#569cd6"}),C=i.window.createTextEditorDecorationType({borderWidth:"1px",borderStyle:"solid",borderColor:"#d7ba7d"}),N=i.window.createTextEditorDecorationType({borderWidth:"1px",borderStyle:"dotted",borderColor:"#f44747",textDecoration:"underline wavy red 2px"}),S=i.window.createTextEditorDecorationType({borderWidth:"1px",borderStyle:"dotted",borderColor:"#f44747",textDecoration:"underline wavy yellow 2px"}),I=[c,d,p,g,m,u,y,b,f,T,v,w,k,_,x,C,N];let P,A=-1,M=null,R=null,F=null;async function E(){const e=i.window.activeTextEditor;if(!e)return;if(A!==e.document.version||M!==e.document.uri||0===P.count()){A=e.document.version,M=e.document.uri;const n=a.performance.now();P=await r.Tokenizer.tokenizeDocument(e.document);const t=a.performance.now();(0,l.logToast)(i.LogLevel.Info,`DocumentTokenizer took ${(t-n).toFixed(2)} milliseconds to complete.`)}const n=[],t=[],h=[],I=[],R=[],F=[],E=[],O=[],L=[],B=[],D=[],z=[],q=[],j=[],W=[],K=[],$=[];P.forEach((a=>{const r=a.token;if(!r)return;const c=r.getVSCodeRange(),d=e?.document.getText(c),u={range:c,hoverMessage:{language:"text",value:`${r.isMetaToken()?"MetaToken":"Token"}: ${s.tokenTypeToStringMap[r.type]}(id: ${r.type})\nStart: {Line: ${c.start.line+1}, Char: ${c.start.character+1}}\nEnd: {Line: ${c.end.line+1}, Char: ${c.end.character+1}}\nContent: {${d?.replaceAll("\n","\\n")}}`}},p=e?.document.positionAt(r.startPos.charStartOffset),g=e?.document.positionAt(r.endPos.charStartOffset);switch(c.start.line!==p.line&&(0,l.logMessage)(i.LogLevel.Error,`Start line number is incorrect!. Got: ${c.start.line+1}, expected: ${p.line+1}. On token:\n${u.hoverMessage.value}`),c.end.line!==g.line&&(0,l.logMessage)(i.LogLevel.Error,`End line number is incorrect!. Got: ${c.end.line+1}, expected: ${g.line+1}. On token:\n${u.hoverMessage.value}`),c.start.character!==p.character&&(0,l.logMessage)(i.LogLevel.Error,`Start char number is incorrect!. Got: ${c.start.character+1}, expected: ${p.character+1}. On token:\n${u.hoverMessage.value}`),c.end.character!==g.character&&(0,l.logMessage)(i.LogLevel.Error,`End char number is incorrect!. Got: ${c.end.character+1}, expected: ${g.character+1}. On token:\n${u.hoverMessage.value}`),r.type){case o.KeywordTokenType.Init:case o.KeywordTokenType.Offset:case o.KeywordTokenType.Python:case o.KeywordTokenType.Hide:case o.KeywordTokenType.Early:case o.KeywordTokenType.Define:case o.KeywordTokenType.Default:case o.KeywordTokenType.Label:case o.KeywordTokenType.Menu:case o.KeywordTokenType.Pause:case o.KeywordTokenType.Style:case o.KeywordTokenType.Screen:case o.KeywordTokenType.Scene:case o.KeywordTokenType.Camera:case o.KeywordTokenType.Show:case o.KeywordTokenType.Image:case o.KeywordTokenType.LayeredImage:case o.KeywordTokenType.Window:case o.KeywordTokenType.Frame:case o.KeywordTokenType.Transform:case o.KeywordTokenType.Translate:case o.KeywordTokenType.Extend:case o.KeywordTokenType.NVLClear:case o.KeywordTokenType.Voice:case o.KeywordTokenType.Sound:case o.KeywordTokenType.Play:case o.KeywordTokenType.Queue:case o.KeywordTokenType.Stop:case o.KeywordTokenType.Fadeout:case o.KeywordTokenType.Set:case o.KeywordTokenType.Expression:case o.KeywordTokenType.Animation:case o.KeywordTokenType.From:case o.KeywordTokenType.Time:case o.KeywordTokenType.Repeat:case o.KeywordTokenType.DollarSign:case o.KeywordTokenType.Sensitive:case o.KeywordTokenType.Text:case o.KeywordTokenType.Other:case o.KeywordTokenType.OtherPython:case o.KeywordTokenType.OtherAudio:case o.KeywordTokenType.Layer:case o.KeywordTokenType.Take:case o.KeywordTokenType.Del:case o.KeywordTokenType.Clear:case o.KeywordTokenType.Variant:case o.KeywordTokenType.Vbox:case o.KeywordTokenType.Hbox:case o.KeywordTokenType.Warp:case o.KeywordTokenType.Circles:case o.KeywordTokenType.Clockwise:case o.KeywordTokenType.Counterclockwise:case o.KeywordTokenType.Event:case o.KeywordTokenType.On:case o.KeywordTokenType.Function:case o.KeywordTokenType.Import:case o.KeywordTokenType.Class:case o.KeywordTokenType.Metaclass:case o.KeywordTokenType.Lambda:case o.KeywordTokenType.Async:case o.KeywordTokenType.Def:case o.KeywordTokenType.Global:case o.KeywordTokenType.Nonlocal:case o.LiteralTokenType.Boolean:case o.OperatorTokenType.And:case o.OperatorTokenType.Or:case o.OperatorTokenType.Not:case o.OperatorTokenType.Is:case o.OperatorTokenType.IsNot:case o.OperatorTokenType.NotIn:n.push(u);break;case o.KeywordTokenType.If:case o.KeywordTokenType.Elif:case o.KeywordTokenType.Else:case o.KeywordTokenType.In:case o.KeywordTokenType.For:case o.KeywordTokenType.While:case o.KeywordTokenType.Pass:case o.KeywordTokenType.Return:case o.KeywordTokenType.Jump:case o.KeywordTokenType.Call:case o.KeywordTokenType.Contains:case o.KeywordTokenType.Parallel:case o.KeywordTokenType.Block:case o.KeywordTokenType.Choice:case o.KeywordTokenType.At:case o.KeywordTokenType.As:case o.KeywordTokenType.With:case o.KeywordTokenType.Onlayer:case o.KeywordTokenType.Zorder:case o.KeywordTokenType.Behind:t.push(u);break;case o.EntityTokenType.ClassName:case o.EntityTokenType.InheritedClassName:case o.EntityTokenType.TypeName:case o.EntityTokenType.NamespaceName:h.push(u);break;case o.EntityTokenType.FunctionName:case o.EntityTokenType.EventName:I.push(u);break;case o.EntityTokenType.Identifier:case o.EntityTokenType.StyleName:case o.EntityTokenType.ImageName:case o.EntityTokenType.TextName:case o.EntityTokenType.AudioName:case o.EntityTokenType.CharacterName:case o.EntityTokenType.PropertyName:R.push(u);break;case o.EntityTokenType.TagName:F.push(u);break;case o.MetaTokenType.Comment:case o.MetaTokenType.CommentCodeTag:case o.MetaTokenType.CommentRegionTag:case o.MetaTokenType.TypehintComment:case o.MetaTokenType.TypehintDirective:case o.MetaTokenType.TypehintIgnore:case o.MetaTokenType.TypehintType:case o.MetaTokenType.TypehintPunctuation:case o.MetaTokenType.TypehintVariable:case o.MetaTokenType.Docstring:E.push(u);break;case o.MetaTokenType.StringBegin:case o.MetaTokenType.StringEnd:case o.MetaTokenType.SimpleExpression:case o.MetaTokenType.CodeBlock:case o.MetaTokenType.PythonLine:case o.MetaTokenType.PythonBlock:case o.MetaTokenType.PythonExpression:case o.MetaTokenType.Arguments:case o.MetaTokenType.EmptyString:case o.MetaTokenType.StringTag:case o.MetaTokenType.TagBlock:case o.MetaTokenType.TaggedString:case o.MetaTokenType.Placeholder:case o.MetaTokenType.MenuStatement:case o.MetaTokenType.MenuBlock:case o.MetaTokenType.MenuOption:case o.MetaTokenType.MenuOptionBlock:case o.MetaTokenType.BehindStatement:case o.MetaTokenType.OnlayerStatement:case o.MetaTokenType.CameraStatement:case o.MetaTokenType.SceneStatement:case o.MetaTokenType.ShowStatement:case o.MetaTokenType.HideStatement:case o.MetaTokenType.ImageStatement:case o.MetaTokenType.CallStatement:case o.MetaTokenType.CallArguments:case o.MetaTokenType.FromClause:case o.MetaTokenType.FromArguments:case o.MetaTokenType.JumpStatement:case o.MetaTokenType.PlayAudioStatement:case o.MetaTokenType.QueueAudioStatement:case o.MetaTokenType.StopAudioStatement:case o.MetaTokenType.LabelStatement:case o.MetaTokenType.LabelCall:case o.MetaTokenType.LabelAccess:case o.MetaTokenType.AtStatement:case o.MetaTokenType.AsStatement:case o.MetaTokenType.WithStatement:case o.MetaTokenType.ScreenStatement:case o.MetaTokenType.ScreenSensitive:case o.MetaTokenType.ScreenFrame:case o.MetaTokenType.ScreenFrameStatement:case o.MetaTokenType.ScreenWindow:case o.MetaTokenType.ScreenWindowStatement:case o.MetaTokenType.ScreenText:case o.MetaTokenType.ScreenBlock:case o.MetaTokenType.ScreenVboxStatement:case o.MetaTokenType.ScreenHboxStatement:case o.MetaTokenType.StyleStatement:case o.MetaTokenType.StyleParameters:case o.MetaTokenType.StyleBlock:case o.MetaTokenType.NarratorSayStatement:case o.MetaTokenType.SayStatement:case o.MetaTokenType.CharacterNameString:case o.MetaTokenType.SayNarrator:case o.MetaTokenType.SayCharacter:case o.MetaTokenType.AtParameters:case o.MetaTokenType.AsParameters:case o.MetaTokenType.BehindParameters:case o.MetaTokenType.OnlayerParameters:case o.MetaTokenType.WithParameters:case o.MetaTokenType.ZorderParameters:case o.MetaTokenType.PauseStatement:case o.MetaTokenType.PauseParameters:case o.MetaTokenType.ATLBlock:case o.MetaTokenType.ATLChoiceBlock:case o.MetaTokenType.TransformBlock:case o.MetaTokenType.ATLContains:case o.MetaTokenType.ATLWith:case o.MetaTokenType.ATLEvent:case o.MetaTokenType.ATLFunction:case o.MetaTokenType.ATLWarper:case o.MetaTokenType.ATLOnStatement:case o.MetaTokenType.ATLOnParameters:case o.MetaTokenType.ATLChoiceStatement:case o.MetaTokenType.ATLChoiceParameters:case o.MetaTokenType.ATLBlockStatement:case o.MetaTokenType.ATLParallelStatement:case o.MetaTokenType.ATLContainsStatement:case o.MetaTokenType.TransformStatement:case o.MetaTokenType.TransformParameters:case o.MetaTokenType.MemberAccess:case o.MetaTokenType.ItemAccess:case o.MetaTokenType.IndexedName:case o.MetaTokenType.Attribute:case o.MetaTokenType.ClassDefinition:case o.MetaTokenType.ClassInheritance:case o.MetaTokenType.FunctionDefinition:case o.MetaTokenType.LambdaFunction:case o.MetaTokenType.FunctionLambdaParameters:case o.MetaTokenType.FunctionParameters:case o.MetaTokenType.FunctionDecorator:case o.MetaTokenType.FunctionCall:case o.MetaTokenType.FunctionCallGeneric:case o.MetaTokenType.Fstring:case o.MetaTokenType.InterpolateFlags:case o.MetaTokenType.ControlFlowKeyword:case o.MetaTokenType.LogicalOperatorKeyword:case o.MetaTokenType.Operator:case o.MetaTokenType.ArithmeticOperator:case o.MetaTokenType.BitwiseOperatorKeyword:case o.MetaTokenType.ComparisonOperatorKeyword:case o.MetaTokenType.ConstantLiteral:case o.MetaTokenType.ConstantNumeric:case o.MetaTokenType.ConstantCaps:case o.MetaTokenType.BuiltinExceptionType:case o.MetaTokenType.BuiltinType:case o.MetaTokenType.MagicVariable:case o.MetaTokenType.EscapeSequence:case o.MetaTokenType.FormatPercent:case o.MetaTokenType.FormatBrace:case o.MetaTokenType.StringStorageType:case o.MetaTokenType.FormatStorageType:case o.MetaTokenType.ImaginaryNumberStorageType:case o.MetaTokenType.NumberStorageType:case o.MetaTokenType.ClassStorageType:case o.MetaTokenType.CommentBegin:case o.MetaTokenType.CommentEnd:case o.MetaTokenType.Backreference:case o.MetaTokenType.BackreferenceNamed:case o.MetaTokenType.CharacterSet:case o.MetaTokenType.Named:case o.MetaTokenType.ModifierFlagStorageType:L.push(u);break;case o.LiteralTokenType.String:case o.LiteralTokenType.UnquotedString:O.push(u);break;case o.LiteralTokenType.Color:{const e={range:c,hoverMessage:d,renderOptions:{before:{color:d}}};D.push(e)}break;case o.LiteralTokenType.Integer:case o.LiteralTokenType.Float:B.push(u);break;case o.OperatorTokenType.Plus:case o.OperatorTokenType.Minus:case o.OperatorTokenType.Multiply:case o.OperatorTokenType.Divide:case o.OperatorTokenType.Modulo:case o.OperatorTokenType.Exponentiate:case o.OperatorTokenType.FloorDivide:case o.OperatorTokenType.BitwiseAnd:case o.OperatorTokenType.BitwiseOr:case o.OperatorTokenType.BitwiseXOr:case o.OperatorTokenType.BitwiseNot:case o.OperatorTokenType.BitwiseLeftShift:case o.OperatorTokenType.BitwiseRightShift:case o.OperatorTokenType.Assignment:case o.OperatorTokenType.PlusAssign:case o.OperatorTokenType.MinusAssign:case o.OperatorTokenType.MultiplyAssign:case o.OperatorTokenType.DivideAssign:case o.OperatorTokenType.ModuloAssign:case o.OperatorTokenType.ExponentiateAssign:case o.OperatorTokenType.FloorDivideAssign:case o.OperatorTokenType.BitwiseAndAssign:case o.OperatorTokenType.BitwiseOrAssign:case o.OperatorTokenType.BitwiseXOrAssign:case o.OperatorTokenType.BitwiseLeftShiftAssign:case o.OperatorTokenType.BitwiseRightShiftAssign:case o.OperatorTokenType.Equals:case o.OperatorTokenType.NotEquals:case o.OperatorTokenType.GreaterThan:case o.OperatorTokenType.LessThan:case o.OperatorTokenType.GreaterThanEquals:case o.OperatorTokenType.LessThanEquals:z.push(u);break;case o.CharacterTokenType.Whitespace:case o.CharacterTokenType.NewLine:case o.CharacterTokenType.Dot:case o.CharacterTokenType.Colon:case o.CharacterTokenType.Semicolon:case o.CharacterTokenType.Comma:case o.CharacterTokenType.Hashtag:case o.CharacterTokenType.Caret:case o.CharacterTokenType.DollarSymbol:case o.CharacterTokenType.AtSymbol:case o.CharacterTokenType.EqualsSymbol:case o.CharacterTokenType.ExclamationMark:case o.CharacterTokenType.Quote:case o.CharacterTokenType.DoubleQuote:case o.CharacterTokenType.BackQuote:case o.CharacterTokenType.Backslash:case o.CharacterTokenType.ForwardSlash:q.push(u);break;case o.CharacterTokenType.OpenParentheses:case o.CharacterTokenType.CloseParentheses:case o.CharacterTokenType.OpenBracket:case o.CharacterTokenType.CloseBracket:case o.CharacterTokenType.OpenSquareBracket:case o.CharacterTokenType.CloseSquareBracket:j.push(u);break;case o.EscapedCharacterTokenType.EscWhitespace:case o.EscapedCharacterTokenType.EscNewline:case o.EscapedCharacterTokenType.EscQuote:case o.EscapedCharacterTokenType.EscDoubleQuote:case o.EscapedCharacterTokenType.EscBackslash:case o.EscapedCharacterTokenType.EscOpenSquareBracket:case o.EscapedCharacterTokenType.EscOpenBracket:W.push(u);break;case o.CharacterTokenType.Unknown:case o.MetaTokenType.Invalid:K.push(u);break;case o.MetaTokenType.Deprecated:$.push(u);break;default:throw new Error(`Unhandled token case: ${s.tokenTypeToStringMap[r.type]}(id: ${r.type})`)}})),e.setDecorations(c,n),e.setDecorations(d,t),e.setDecorations(p,h),e.setDecorations(g,I),e.setDecorations(m,R),e.setDecorations(u,F),e.setDecorations(y,E),e.setDecorations(b,O),e.setDecorations(f,L),e.setDecorations(T,[]),e.setDecorations(v,B),e.setDecorations(w,D),e.setDecorations(k,z),e.setDecorations(_,q),e.setDecorations(x,j),e.setDecorations(C,W),e.setDecorations(N,K),e.setDecorations(S,$)}async function O(e=!1){h&&(clearTimeout(h),h=void 0),e?h=setTimeout((async()=>{await E()}),500):await E()}},2810:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.stringLineContinuation=n.escapeSequence=n.escapeSequenceUnicode=n.fExpression=n.fstringIllegalMultiBrace=n.fstringIllegalSingleBrace=n.fstringRawGuts=n.fstringGuts=n.stringEntity=n.stringRawBinGuts=n.stringRawGuts=n.stringConsumeEscape=n.stringUnicodeGuts=n.string=n.regexp=n.numberLong=n.numberBin=n.numberOct=n.numberHex=n.numberDec=n.numberFloat=n.number=n.literal=n.punctuation=n.operator=n.assignmentOperator=n.lineContinuation=n.roundBraces=n.oddFunctionCall=n.list=n.curlyBraces=n.specialNames=n.memberAccessAttribute=n.memberAccessBase=n.memberAccess=n.expression=n.expressionBase=n.expressionBare=n.whitespace=n.newLine=n.statementKeyword=n.docstringPrompt=n.docstringGutsUnicode=n.docstring=n.docstringStatement=n.comments=n.semicolon=n.statement=n.impossible=n.python=void 0,n.fregexpBaseExpression=n.regexpBaseExpression=n.illegalAnno=n.illegalObjectName=n.illegalOperator=n.backticks=n.ellipsis=n.specialVariables=n.illegalNames=n.magicNames=n.magicVariableNames=n.magicFunctionNames=n.builtinTypes=n.builtinFunctions=n.builtinExceptions=n.builtinPossibleCallables=n.builtinCallables=n.functionArguments=n.functionName=n.functionCall=n.inheritanceName=n.callWrapperInheritance=n.decoratorName=n.decorator=n.itemIndex=n.itemName=n.itemAccess=n.returnAnnotation=n.annotatedParameter=n.looseDefault=n.parameterSpecial=n.parameters=n.functionDefName=n.functionDeclaration=n.generator=n.lambdaParameterWithDefault=n.lambdaNestedIncomplete=n.lambdaIncomplete=n.lambda=n.memberAccessClass=n.inheritanceIdentifier=n.classKwarg=n.classInheritance=n.className=n.classDeclaration=n.importStatement=n.fstringFormattingSingeBrace=n.fstringFormatting=n.stringBraceFormatting=n.stringFormatting=void 0,n.doubleThreeRegexpCharacterSet=n.doubleThreeRegexpExpression=n.doubleOneRegexpParentheses=n.doubleOneRegexpParenthesesNonCapturing=n.doubleOneRegexpConditional=n.doubleOneRegexpLookbehindNegative=n.doubleOneRegexpLookbehind=n.doubleOneRegexpLookaheadNegative=n.doubleOneRegexpLookahead=n.doubleOneRegexpComments=n.doubleOneRegexpNamedGroup=n.doubleOneRegexpCharacterSet=n.doubleOneRegexpExpression=n.singleThreeRegexpParentheses=n.singleThreeRegexpParenthesesNonCapturing=n.singleThreeRegexpConditional=n.singleThreeRegexpLookbehindNegative=n.singleThreeRegexpLookbehind=n.singleThreeRegexpLookaheadNegative=n.singleThreeRegexpLookahead=n.singleThreeRegexpComments=n.singleThreeRegexpNamedGroup=n.singleThreeRegexpCharacterSet=n.singleThreeRegexpExpression=n.singleOneRegexpParentheses=n.singleOneRegexpParenthesesNonCapturing=n.singleOneRegexpConditional=n.singleOneRegexpLookbehindNegative=n.singleOneRegexpLookbehind=n.singleOneRegexpLookaheadNegative=n.singleOneRegexpLookahead=n.singleOneRegexpComments=n.singleOneRegexpNamedGroup=n.singleOneRegexpCharacterSet=n.singleOneRegexpExpression=n.commentsStringDoubleThree=n.commentsStringSingleThree=n.regexpCharecterSetEscapes=n.regexpEscapeSequence=n.regexpEscapeCatchall=n.regexpEscapeUnicode=n.regexpEscapeCharacter=n.regexpEscapeSpecial=n.regexpFlags=n.regexpBackreference=n.regexpBackreferenceNumber=n.fregexpQuantifier=n.regexpQuantifier=n.regexpBaseCommon=n.fstringFormattingBraces=void 0,n.fstringTerminatorMultiTail=n.fstringTerminatorMulti=n.fstringMultiBrace=n.fstringRawMultiCore=n.fstringMultiCore=n.fstringRawQuotedMultiLine=n.fstringNormfQuotedMultiLine=n.fstringFnormQuotedMultiLine=n.fstringTerminatorSingleTail=n.fstringTerminatorSingle=n.fstringSingleBrace=n.fstringRawSingleCore=n.fstringSingleCore=n.fstringRawQuotedSingleLine=n.fstringNormfQuotedSingleLine=n.fstringFnormQuotedSingleLine=n.stringMultiBadBrace2FormattingRaw=n.stringMultiBadBrace2FormattingUnicode=n.stringMultiBadBrace1FormattingRaw=n.stringMultiBadBrace1FormattingUnicode=n.stringQuotedMultiLine=n.stringRawBinQuotedMultiLine=n.stringBinQuotedMultiLine=n.stringRawQuotedMultiLine=n.stringSingleBadBrace2FormattingRaw=n.stringSingleBadBrace1FormattingRaw=n.stringSingleBadBrace1FormattingUnicode=n.stringQuotedSingleLine=n.stringRawBinQuotedSingleLine=n.stringBinQuotedSingleLine=n.stringRawQuotedSingleLine=n.regexpDoubleThreeLine=n.regexpDoubleOneLine=n.regexpSingleThreeLine=n.regexpSingleOneLine=n.doubleThreeRegexpParentheses=n.doubleThreeRegexpParenthesesNonCapturing=n.doubleThreeRegexpConditional=n.doubleThreeRegexpLookbehindNegative=n.doubleThreeRegexpLookbehind=n.doubleThreeRegexpLookaheadNegative=n.doubleThreeRegexpLookahead=n.doubleThreeRegexpComments=n.doubleThreeRegexpNamedGroup=void 0;const a=t(5420);n.python={patterns:[]},n.impossible={debugName:"impossible",match:/$.^/gm},n.statement={patterns:[]},n.semicolon={patterns:[{debugName:"semicolon.patterns![0]",token:a.MetaTokenType.Deprecated,match:/\;$/gm}]},n.comments={patterns:[{debugName:"comments.patterns![1]",token:a.MetaTokenType.Comment,contentToken:a.MetaTokenType.TypehintComment,begin:/(?:\#\s*(type:)\s*(?!$|\#))/dgm,beginCaptures:{0:{token:a.MetaTokenType.TypehintComment},1:{token:a.MetaTokenType.TypehintDirective}},end:/(?:$|(?=\#))/gm,patterns:[{debugName:"comments.patterns![1].patterns![0]",token:a.MetaTokenType.TypehintIgnore,match:/ignore(?=\s*(?:$|\#))/gm},{debugName:"comments.patterns![1].patterns![1]",token:a.MetaTokenType.TypehintType,match:/(?<!\.)\b(bool|bytes|float|int|object|str|List|Dict|Iterable|Sequence|Set|FrozenSet|Callable|Union|Tuple|Any|None)\b/g},{debugName:"comments.patterns![1].patterns![2]",token:a.MetaTokenType.TypehintPunctuation,match:/([\[\]\(\),\.\=\*]|(->))/g},{debugName:"comments.patterns![1].patterns![3]",token:a.MetaTokenType.TypehintVariable,match:/([a-zA-Z_]\w*)/g}]}]},n.docstringStatement={debugName:"docstringStatement",begin:/(?<=^[ \t]*)(?=[rR]?(\'\'\'|\"\"\"|\'|\"))/gm,end:/((?<=\1)|^)(?!\s*[rR]?(\'\'\'|\"\"\"|\'|\"))/gm,patterns:[]},n.docstring={patterns:[{debugName:"docstring.patterns![0]",token:a.MetaTokenType.Docstring,begin:/(\'\'\'|\"\"\")/dg,beginCaptures:{1:{token:a.MetaTokenType.StringBegin}},end:/(\1)/dg,endCaptures:{1:{token:a.MetaTokenType.StringEnd}},patterns:[]},{debugName:"docstring.patterns![1]",token:a.MetaTokenType.Docstring,begin:/([rR])(\'\'\'|\"\"\")/dg,beginCaptures:{1:{token:a.MetaTokenType.StringStorageType},2:{token:a.MetaTokenType.StringBegin}},end:/(\2)/dg,endCaptures:{1:{token:a.MetaTokenType.StringEnd}},patterns:[]},{debugName:"docstring.patterns![2]",token:a.MetaTokenType.Docstring,begin:/(\'|\")/dg,beginCaptures:{1:{token:a.MetaTokenType.StringBegin}},end:/(\1)|(\n)/dg,endCaptures:{1:{token:a.MetaTokenType.StringEnd},2:{token:a.MetaTokenType.Invalid}},patterns:[]},{debugName:"docstring.patterns![3]",token:a.MetaTokenType.Docstring,begin:/([rR])(\'|\")/dg,beginCaptures:{1:{token:a.MetaTokenType.StringStorageType},2:{token:a.MetaTokenType.StringBegin}},end:/(\2)|(\n)/dg,endCaptures:{1:{token:a.MetaTokenType.StringEnd},2:{token:a.MetaTokenType.Invalid}},patterns:[]}]},n.docstringGutsUnicode={patterns:[]},n.docstringPrompt={debugName:"docstringPrompt",match:/(?:\s*((?:>>>|\.\.\.)\s)(?=\s*\S))/dg,captures:{1:{token:a.MetaTokenType.ControlFlowKeyword}}},n.statementKeyword={patterns:[{debugName:"statementKeyword.patterns![0]",token:a.KeywordTokenType.Def,match:/\b((async\s+)?\s*def)\b/g},{debugName:"statementKeyword.patterns![1]",token:a.MetaTokenType.ControlFlowKeyword,match:/\b(?<!\.)as\b(?=.*[:\\])/g},{debugName:"statementKeyword.patterns![2]",token:a.KeywordTokenType.Import,match:/\b(?<!\.)as\b/g},{debugName:"statementKeyword.patterns![3]",token:a.MetaTokenType.ControlFlowKeyword,match:/\b(?<!\.)(async|continue|del|assert|break|finally|for|from|elif|else|if|except|pass|raise|return|try|while|with)\b/g},{debugName:"statementKeyword.patterns![4]",match:/\b(?<!\.)(?:(global)|(nonlocal))\b/dg,captures:{1:{token:a.KeywordTokenType.Global},2:{token:a.KeywordTokenType.Nonlocal}}},{debugName:"statementKeyword.patterns![5]",token:a.KeywordTokenType.Class,match:/\b(?<!\.)(class)\b/g},{debugName:"statementKeyword.patterns![6]",match:/^\s*(case|match)(?=\s*([-+\w\d(\[{'":#]|$))\b/dgm,captures:{1:{token:a.MetaTokenType.ControlFlowKeyword}}}]},n.newLine={debugName:"newLine",token:a.CharacterTokenType.NewLine,match:/\r\n|\r|\n/g},n.whitespace={debugName:"whitespace",token:a.CharacterTokenType.Whitespace,match:/[ \t]+/g},n.expressionBare={patterns:[n.whitespace,n.newLine]},n.expressionBase={patterns:[n.comments,n.expressionBare]},n.expression={patterns:[n.expressionBase,{debugName:"expression.patterns![2]",token:a.EntityTokenType.Identifier,match:/\b([a-zA-Z_]\w*)\b/g}]},n.memberAccess={debugName:"memberAccess",token:a.MetaTokenType.MemberAccess,contentToken:a.EntityTokenType.Identifier,begin:/(\.)\s*(?!\.)/dg,beginCaptures:{1:{token:a.CharacterTokenType.Dot}},end:/(?<=\S)(?=\W)|(^|(?<=\s))(?=[^\\\w\s])|$/gm,patterns:[]},n.memberAccessBase={patterns:[]},n.memberAccessAttribute={debugName:"memberAccessAttribute",token:a.MetaTokenType.Attribute,match:/\b([a-zA-Z_]\w*)\b/g},n.specialNames={debugName:"specialNames",token:a.MetaTokenType.ConstantCaps,match:/\b(_*[A-Z][_\d]*[A-Z])[A-Z\d]*(_\w*)?\b/g},n.curlyBraces={debugName:"curlyBraces",begin:/\{/dg,beginCaptures:{0:{token:a.CharacterTokenType.OpenBracket}},end:/\}/dg,endCaptures:{0:{token:a.CharacterTokenType.CloseBracket}},patterns:[{debugName:"curlyBraces.patterns![0]",token:a.CharacterTokenType.Colon,match:/:/g},n.expression]},n.list={debugName:"list",begin:/\[/dg,beginCaptures:{0:{token:a.CharacterTokenType.OpenSquareBracket}},end:/\]/dg,endCaptures:{0:{token:a.CharacterTokenType.CloseSquareBracket}},patterns:[n.expression]},n.oddFunctionCall={debugName:"oddFunctionCall",token:a.MetaTokenType.FunctionCall,begin:/(?<=\]|\)|")\s*(?=\()/g,end:/(\))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses}},patterns:[]},n.roundBraces={debugName:"roundBraces",begin:/\(/dg,beginCaptures:{0:{token:a.CharacterTokenType.OpenParentheses}},end:/\)/dg,endCaptures:{0:{token:a.CharacterTokenType.CloseParentheses}},patterns:[n.expression]},n.lineContinuation={patterns:[{debugName:"lineContinuation.patterns![0]",match:/(\\)\s*(\S.*$\n?)/dgm,captures:{1:{token:a.CharacterTokenType.Backslash},2:{token:a.MetaTokenType.Invalid}}},{debugName:"lineContinuation.patterns![1]",begin:/(\\)\s*$\n?/dgm,beginCaptures:{1:{token:a.CharacterTokenType.Backslash}},end:/(?=^\s*$)|(?!(\s*[rR]?(\'\'\'|\"\"\"|\'|\"))|((?<=\\\s*)$))/gm,patterns:[]}]},n.assignmentOperator={debugName:"assignmentOperator",token:a.OperatorTokenType.Assignment,match:/<<=|>>=|\/\/=|\*\*=|\+=|-=|\/=|@=|\*=|%=|~=|\^=|&=|\|=|=(?!=)/gm},n.operator={debugName:"operator",match:/\b(?<!\.)(?:(and|or|not|in|is)|(for|if|else|await|(?:yield(?:\s+from)?)))(?!\s*:)\b|(<<|>>|&|\||\^|~)|(\*\*|\*|\+|-|%|\/\/|\/|@)|(!=|==|>=|<=|<|>)|(:=)/dgm,captures:{1:{token:a.MetaTokenType.LogicalOperatorKeyword},2:{token:a.MetaTokenType.ControlFlowKeyword},3:{token:a.MetaTokenType.BitwiseOperatorKeyword},4:{token:a.MetaTokenType.ArithmeticOperator},5:{token:a.MetaTokenType.ComparisonOperatorKeyword},6:{token:a.OperatorTokenType.Assignment}}},n.punctuation={patterns:[{debugName:"punctuation.patterns![0]",token:a.CharacterTokenType.Colon,match:/:/g},{debugName:"punctuation.patterns![1]",token:a.CharacterTokenType.Comma,match:/,/g}]},n.literal={patterns:[{debugName:"literal.patterns![0]",token:a.MetaTokenType.ConstantLiteral,match:/\b(True|False|None|NotImplemented|Ellipsis)\b/g}]},n.number={patterns:[{debugName:"number.patterns![6]",token:a.MetaTokenType.Invalid,match:/\b[0-9]+\w+/g}]},n.numberFloat={debugName:"numberFloat",token:a.LiteralTokenType.Float,match:/(?<!\w)(?:(?:\.[0-9](?:_?[0-9])*|[0-9](?:_?[0-9])*\.[0-9](?:_?[0-9])*|[0-9](?:_?[0-9])*\.)(?:[eE][+-]?[0-9](?:_?[0-9])*)?|[0-9](?:_?[0-9])*(?:[eE][+-]?[0-9](?:_?[0-9])*))([jJ])?\b/dg,captures:{1:{token:a.MetaTokenType.ImaginaryNumberStorageType}}},n.numberDec={debugName:"numberDec",token:a.MetaTokenType.ConstantNumeric,match:/(?<![\w.])(?:[1-9](?:_?[0-9])*|0+|[0-9](?:_?[0-9])*([jJ])|0([0-9]+)(?![eE.]))\b/dg,captures:{1:{token:a.MetaTokenType.ImaginaryNumberStorageType},2:{token:a.MetaTokenType.Invalid}}},n.numberHex={debugName:"numberHex",token:a.MetaTokenType.ConstantNumeric,match:/(?<![\w.])(0[xX])(?:_?[0-9a-fA-F])+\b/dg,captures:{1:{token:a.MetaTokenType.NumberStorageType}}},n.numberOct={debugName:"numberOct",token:a.MetaTokenType.ConstantNumeric,match:/(?<![\w.])(0[oO])(?:_?[0-7])+\b/dg,captures:{1:{token:a.MetaTokenType.NumberStorageType}}},n.numberBin={debugName:"numberBin",token:a.MetaTokenType.ConstantNumeric,match:/(?<![\w.])(0[bB])(?:_?[01])+\b/dg,captures:{1:{token:a.MetaTokenType.NumberStorageType}}},n.numberLong={debugName:"numberLong",token:a.MetaTokenType.ConstantNumeric,match:/(?<![\w.])(?:[1-9][0-9]*|0)([lL])\b/dg,captures:{1:{token:a.MetaTokenType.NumberStorageType}}},n.regexp={patterns:[]},n.string={patterns:[]},n.stringUnicodeGuts={patterns:[]},n.stringConsumeEscape={debugName:"stringConsumeEscape",match:/\\['"\n\\]/g},n.stringRawGuts={patterns:[n.stringConsumeEscape]},n.stringRawBinGuts={patterns:[n.stringConsumeEscape]},n.stringEntity={patterns:[]},n.fstringGuts={patterns:[]},n.fstringRawGuts={patterns:[n.stringConsumeEscape]},n.fstringIllegalSingleBrace={debugName:"fstringIllegalSingleBrace",begin:/(\{)(?=[^\n}]*$\n?)/dgm,beginCaptures:{1:{token:a.MetaTokenType.Placeholder}},end:/(\})|(?=\n)/dg,endCaptures:{1:{token:a.MetaTokenType.Placeholder}},patterns:[]},n.fstringIllegalMultiBrace={patterns:[n.impossible]},n.fExpression={patterns:[n.expressionBare,n.memberAccess,{debugName:"fExpression.patterns![2]",match:/\b([a-zA-Z_]\w*)\b/g}]},n.escapeSequenceUnicode={patterns:[{debugName:"escapeSequenceUnicode.patterns![0]",token:a.MetaTokenType.EscapeSequence,match:/\\(u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}|N\{[\w\s]+?\})/g}]},n.escapeSequence={debugName:"escapeSequence",token:a.MetaTokenType.EscapeSequence,match:/\\(x[0-9A-Fa-f]{2}|[0-7]{1,3}|[\\"'abfnrtv])/g},n.stringLineContinuation={debugName:"stringLineContinuation",token:a.MetaTokenType.ConstantLiteral,match:/\\$/gm},n.stringFormatting={debugName:"stringFormatting",token:a.MetaTokenType.FormatPercent,match:/(%(?:\([\w\s]*\))?[-+#0 ]*(?:\d+|\*)?(?:\.(?:\d+|\*))?(?:[hlL])?[diouxXeEfFgGcrsab%])/dg,captures:{1:{token:a.MetaTokenType.Placeholder}}},n.stringBraceFormatting={patterns:[{debugName:"stringBraceFormatting.patterns![0]",token:a.MetaTokenType.FormatBrace,match:/({{|}}|(?:{\w*(\.[a-zA-Z_]\w*|\[[^\]'"]+\])*(![rsa])?(:\w?[<>=^]?[-+ ]?\#?\d*,?(\.\d+)?[bcdeEfFgGnosxX%]?)?}))/dgm,captures:{1:{token:a.MetaTokenType.Placeholder},3:{token:a.MetaTokenType.FormatStorageType},4:{token:a.MetaTokenType.FormatStorageType}}},{debugName:"stringBraceFormatting.patterns![1]",token:a.MetaTokenType.FormatBrace,match:/({\w*(\.[a-zA-Z_]\w*|\[[^\]'"]+\])*(![rsa])?(:)[^'"{}\n]*(?:\{[^'"}\n]*?\}[^'"{}\n]*)*})/dg,captures:{1:{token:a.MetaTokenType.Placeholder},3:{token:a.MetaTokenType.FormatStorageType},4:{token:a.MetaTokenType.FormatStorageType}}}]},n.fstringFormatting={patterns:[]},n.fstringFormattingSingeBrace={debugName:"fstringFormattingSingeBrace",token:a.MetaTokenType.Invalid,match:/(}(?!}))/g},n.importStatement={patterns:[{debugName:"importStatement.patterns![0]",begin:/\b(?<!\.)(from)\b(?=.+import)/dg,beginCaptures:{1:{token:a.KeywordTokenType.Import}},end:/$|(?=import)/gm,patterns:[{debugName:"importStatement.patterns![0].patterns![0]",token:a.CharacterTokenType.Dot,match:/\.+/g},n.expression]},{debugName:"importStatement.patterns![1]",begin:/\b(?<!\.)(import)\b/dg,beginCaptures:{1:{token:a.KeywordTokenType.Import}},end:/$/gm,patterns:[{debugName:"importStatement.patterns![1].patterns![0]",token:a.KeywordTokenType.Import,match:/\b(?<!\.)as\b/g},n.expression]}]},n.classDeclaration={patterns:[{debugName:"classDeclaration.patterns![0]",token:a.MetaTokenType.ClassDefinition,begin:/\s*(class)\s+(?=[a-zA-Z_]\w*\s*(?::|\())/dg,beginCaptures:{1:{token:a.KeywordTokenType.Class}},end:/(:)/dg,endCaptures:{1:{token:a.CharacterTokenType.Colon}},patterns:[]}]},n.className={patterns:[{debugName:"className.patterns![2]",token:a.EntityTokenType.ClassName,match:/\b([a-zA-Z_]\w*)\b/g}]},n.classInheritance={debugName:"classInheritance",token:a.MetaTokenType.ClassInheritance,begin:/(\()/dg,beginCaptures:{1:{token:a.CharacterTokenType.OpenBracket}},end:/(\))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseBracket}},patterns:[{debugName:"classInheritance.patterns![0]",token:a.OperatorTokenType.Unpacking,match:/(\*\*|\*)/g},{debugName:"classInheritance.patterns![1]",token:a.CharacterTokenType.Comma,match:/,/g},{debugName:"classInheritance.patterns![2]",token:a.OperatorTokenType.Assignment,match:/=(?!=)/g},{debugName:"classInheritance.patterns![3]",token:a.KeywordTokenType.Metaclass,match:/\bmetaclass\b/g},n.expressionBase]},n.classKwarg={debugName:"classKwarg",match:/\b([a-zA-Z_]\w*)\s*(=)(?!=)/dg,captures:{1:{token:a.EntityTokenType.Identifier},2:{token:a.OperatorTokenType.Assignment}}},n.inheritanceIdentifier={debugName:"inheritanceIdentifier",match:/\b([a-zA-Z_]\w*)\b/dg,captures:{1:{token:a.EntityTokenType.InheritedClassName}}},n.memberAccessClass={debugName:"memberAccessClass",token:a.MetaTokenType.MemberAccess,begin:/(\.)\s*(?!\.)/dg,beginCaptures:{1:{token:a.CharacterTokenType.Dot}},end:/(?<=\S)(?=\W)|$/gm,patterns:[n.memberAccessBase,n.inheritanceIdentifier]},n.lambda={patterns:[{debugName:"lambda.patterns![0]",match:/((?<=\.)lambda|lambda(?=\s*[\.=]))/dg,captures:{1:{token:a.MetaTokenType.ControlFlowKeyword}}},{debugName:"lambda.patterns![1]",match:/\b(lambda)\s*?(?=[,\n]|$)/dgm,captures:{1:{token:a.KeywordTokenType.Lambda}}},{debugName:"lambda.patterns![2]",token:a.MetaTokenType.LambdaFunction,contentToken:a.MetaTokenType.FunctionDefinition,begin:/\b(lambda)\b/dg,beginCaptures:{1:{token:a.KeywordTokenType.Lambda}},end:/(:)|(\n)/dg,endCaptures:{1:{token:a.CharacterTokenType.Colon}},patterns:[{debugName:"lambda.patterns![2].patterns![0]",token:a.OperatorTokenType.PositionalParameter,match:/\//g},{debugName:"lambda.patterns![2].patterns![1]",token:a.OperatorTokenType.Unpacking,match:/(\*\*|\*)/g},{debugName:"lambda.patterns![2].patterns![4]",match:/([a-zA-Z_]\w*)\s*(?:(,)|(?=:|$))/dgm,captures:{1:{token:a.EntityTokenType.Identifier},2:{token:a.CharacterTokenType.Comma}}},n.comments,n.lineContinuation]}]},n.lambdaIncomplete={debugName:"lambdaIncomplete",token:a.KeywordTokenType.Lambda,match:/\blambda(?=\s*[,)])/g},n.lambdaNestedIncomplete={debugName:"lambdaNestedIncomplete",token:a.KeywordTokenType.Lambda,match:/\blambda(?=\s*[:,)])/g},n.lambdaParameterWithDefault={debugName:"lambdaParameterWithDefault",begin:/\b([a-zA-Z_]\w*)\s*(=)/dg,beginCaptures:{1:{token:a.EntityTokenType.Identifier},2:{token:a.MetaTokenType.Operator}},end:/(,)|(?=:|$)/dgm,endCaptures:{1:{token:a.CharacterTokenType.Comma}},patterns:[n.expression]},n.generator={debugName:"generator",begin:/\bfor\b/dg,beginCaptures:{0:{token:a.MetaTokenType.ControlFlowKeyword}},end:/\bin\b/dg,endCaptures:{0:{token:a.MetaTokenType.ControlFlowKeyword}},patterns:[n.expression]},n.functionDeclaration={debugName:"functionDeclaration",token:a.MetaTokenType.FunctionDefinition,begin:/\s*(?:\b(async)\s+)?\b(def)\s+(?=\w+\s*\()/dg,beginCaptures:{1:{token:a.KeywordTokenType.Async},2:{token:a.KeywordTokenType.Def}},end:/(:|(?=[#'"\n]))/dg,endCaptures:{1:{token:a.CharacterTokenType.Colon}},patterns:[n.lineContinuation]},n.functionDefName={patterns:[{debugName:"functionDefName.patterns![2]",token:a.EntityTokenType.FunctionName,match:/\b([a-zA-Z_]\w*)\b/g}]},n.parameters={debugName:"parameters",token:a.MetaTokenType.FunctionDefinition,begin:/(\()/dg,beginCaptures:{1:{token:a.CharacterTokenType.OpenParentheses}},end:/(\))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses}},patterns:[{debugName:"parameters.patterns![0]",token:a.OperatorTokenType.PositionalParameter,match:/\//g},{debugName:"parameters.patterns![1]",token:a.OperatorTokenType.Unpacking,match:/(\*\*|\*)/g},n.lambdaIncomplete,{debugName:"parameters.patterns![6]",match:/([a-zA-Z_]\w*)\s*(?:(,)|(?=[)#\n=]))/dg,captures:{1:{token:a.EntityTokenType.Identifier},2:{token:a.CharacterTokenType.Comma}}},n.comments]},n.parameterSpecial={debugName:"parameterSpecial",match:/\b((self)|(cls))\b\s*(?:(,)|(?=\)))/dg,captures:{1:{token:a.EntityTokenType.Identifier},2:{token:a.EntityTokenType.Identifier},3:{token:a.EntityTokenType.Identifier},4:{token:a.CharacterTokenType.Comma}}},n.looseDefault={debugName:"looseDefault",begin:/(=)/dg,beginCaptures:{1:{token:a.MetaTokenType.Operator}},end:/(,)|(?=\))/dg,endCaptures:{1:{token:a.CharacterTokenType.Comma}},patterns:[n.expression]},n.annotatedParameter={debugName:"annotatedParameter",begin:/\b([a-zA-Z_]\w*)\s*(:)/dg,beginCaptures:{1:{token:a.EntityTokenType.Identifier},2:{token:a.CharacterTokenType.Colon}},end:/(,)|(?=\))/dg,endCaptures:{1:{token:a.CharacterTokenType.Comma}},patterns:[n.expression,{debugName:"annotatedParameter.patterns![1]",token:a.OperatorTokenType.Assignment,match:/=(?!=)/g}]},n.returnAnnotation={debugName:"returnAnnotation",begin:/(->)/dg,beginCaptures:{1:{token:a.CharacterTokenType.Colon}},end:/(?=:)/g,patterns:[n.expression]},n.itemAccess={patterns:[{debugName:"itemAccess.patterns![0]",token:a.MetaTokenType.ItemAccess,begin:/\b(?=[a-zA-Z_]\w*\s*\[)/g,end:/(\])/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses}},patterns:[n.expression]}]},n.itemName={patterns:[n.specialNames,{debugName:"itemName.patterns![3]",token:a.MetaTokenType.IndexedName,match:/\b([a-zA-Z_]\w*)\b/g}]},n.itemIndex={debugName:"itemIndex",contentToken:a.MetaTokenType.Arguments,begin:/(\[)/dg,beginCaptures:{1:{token:a.CharacterTokenType.OpenParentheses}},end:/(?=\])/g,patterns:[{debugName:"itemIndex.patterns![0]",token:a.CharacterTokenType.Colon,match:/:/g},n.expression]},n.decorator={debugName:"decorator",token:a.MetaTokenType.FunctionDefinition,begin:/(?<=^[ \t]*)(@)\s*(?=[a-zA-Z_]\w*)/dgm,beginCaptures:{1:{token:a.EntityTokenType.FunctionName},2:{token:a.CharacterTokenType.AtSymbol}},end:/(\))(?:(.*?)(?=\s*(?:\#|$)))|(?=\n|\#)/dgm,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[]},n.decoratorName={patterns:[{debugName:"decoratorName.patterns![2]",token:a.EntityTokenType.FunctionName,match:/(?:[a-zA-Z_]\w*)|(\.)/dg,captures:{1:{token:a.CharacterTokenType.Dot}}},n.lineContinuation,{debugName:"decoratorName.patterns![4]",token:a.MetaTokenType.Invalid,match:/\s*([^(a-zA-Z\s_\.#\\].*?)(?=\#|$)/dgm,captures:{1:{token:a.MetaTokenType.Invalid}}}]},n.callWrapperInheritance={debugName:"callWrapperInheritance",token:a.MetaTokenType.FunctionCall,begin:/\b(?=([a-zA-Z_]\w*)\s*(\())/g,end:/(\))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses}},patterns:[]},n.inheritanceName={patterns:[n.lambdaIncomplete,n.inheritanceIdentifier]},n.functionCall={debugName:"functionCall",token:a.MetaTokenType.FunctionCall,begin:/\b(?=([a-zA-Z_]\w*)\s*(\())/g,end:/(\))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses}},patterns:[]},n.functionName={patterns:[{debugName:"functionName.patterns![1]",token:a.MetaTokenType.FunctionCall,match:/\b([a-zA-Z_]\w*)\b/g}]},n.functionArguments={debugName:"functionArguments",contentToken:a.MetaTokenType.Arguments,begin:/(\()/dg,beginCaptures:{1:{token:a.CharacterTokenType.OpenParentheses}},end:/(?=\))(?!\)\s*\()/g,patterns:[{debugName:"functionArguments.patterns![0]",token:a.CharacterTokenType.Comma,match:/(,)/g},{debugName:"functionArguments.patterns![1]",match:/(?:(?<=[,(])|^)\s*(\*{1,2})/dgm,captures:{1:{token:a.OperatorTokenType.Unpacking}}},n.lambdaIncomplete,{debugName:"functionArguments.patterns![4]",match:/\b([a-zA-Z_]\w*)(\s+)?(=)(?!=)/dg,captures:{1:{token:a.EntityTokenType.Identifier},2:{token:a.CharacterTokenType.Whitespace},3:{token:a.OperatorTokenType.Assignment}}},{debugName:"functionArguments.patterns![5]",token:a.OperatorTokenType.Assignment,match:/=(?!=)/g},n.expression,{debugName:"functionArguments.patterns![7]",match:/\s*(\))\s*(\()/dg,captures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.CharacterTokenType.OpenParentheses}}}]},n.builtinCallables={patterns:[]},n.builtinPossibleCallables={patterns:[n.builtinCallables]},n.builtinExceptions={debugName:"builtinExceptions",token:a.MetaTokenType.BuiltinExceptionType,match:/(?<!\.)\b((Arithmetic|Assertion|Attribute|Buffer|BlockingIO|BrokenPipe|ChildProcess|(Connection(Aborted|Refused|Reset)?)|EOF|Environment|FileExists|FileNotFound|FloatingPoint|IO|Import|Indentation|Index|Interrupted|IsADirectory|NotADirectory|Permission|ProcessLookup|Timeout|Key|Lookup|Memory|Name|NotImplemented|OS|Overflow|Reference|Runtime|Recursion|Syntax|System|Tab|Type|UnboundLocal|Unicode(Encode|Decode|Translate)?|Value|Windows|ZeroDivision|ModuleNotFound)Error|((Pending)?Deprecation|Runtime|Syntax|User|Future|Import|Unicode|Bytes|Resource)?Warning|SystemExit|Stop(Async)?Iteration|KeyboardInterrupt|GeneratorExit|(Base)?Exception)\b/g},n.builtinFunctions={patterns:[{debugName:"builtinFunctions.patterns![0]",token:a.EntityTokenType.FunctionName,match:/(?<!\.)\b(__import__|abs|aiter|all|any|anext|ascii|bin|breakpoint|callable|chr|compile|copyright|credits|delattr|dir|divmod|enumerate|eval|exec|exit|filter|format|getattr|globals|hasattr|hash|help|hex|id|input|isinstance|issubclass|iter|len|license|locals|map|max|memoryview|min|next|oct|open|ord|pow|print|quit|range|reload|repr|reversed|round|setattr|sorted|sum|vars|zip)\b/g},{debugName:"builtinFunctions.patterns![1]",token:a.EntityTokenType.Identifier,match:/(?<!\.)\b(file|reduce|intern|raw_input|unicode|cmp|basestring|execfile|long|xrange)\b/g}]},n.builtinTypes={debugName:"builtinTypes",token:a.MetaTokenType.BuiltinType,match:/(?<!\.)\b(bool|bytearray|bytes|classmethod|complex|dict|float|frozenset|int|list|object|property|set|slice|staticmethod|str|tuple|type|super)\b/g},n.magicFunctionNames={debugName:"magicFunctionNames",match:/\b(__(?:abs|add|aenter|aexit|aiter|and|anext|await|bool|call|ceil|class_getitem|cmp|coerce|complex|contains|copy|deepcopy|del|delattr|delete|delitem|delslice|dir|div|divmod|enter|eq|exit|float|floor|floordiv|format|ge|get|getattr|getattribute|getinitargs|getitem|getnewargs|getslice|getstate|gt|hash|hex|iadd|iand|idiv|ifloordiv||ilshift|imod|imul|index|init|instancecheck|int|invert|ior|ipow|irshift|isub|iter|itruediv|ixor|le|len|long|lshift|lt|missing|mod|mul|ne|neg|new|next|nonzero|oct|or|pos|pow|radd|rand|rdiv|rdivmod|reduce|reduce_ex|repr|reversed|rfloordiv||rlshift|rmod|rmul|ror|round|rpow|rrshift|rshift|rsub|rtruediv|rxor|set|setattr|setitem|set_name|setslice|setstate|sizeof|str|sub|subclasscheck|truediv|trunc|unicode|xor|matmul|rmatmul|imatmul|init_subclass|set_name|fspath|bytes|prepare|length_hint)__)\b/dg,captures:{1:{token:a.EntityTokenType.FunctionName}}},n.magicVariableNames={debugName:"magicVariableNames",match:/\b(__(?:all|annotations|bases|builtins|class|closure|code|debug|defaults|dict|doc|file|func|globals|kwdefaults|match_args|members|metaclass|methods|module|mro|mro_entries|name|qualname|post_init|self|signature|slots|subclasses|version|weakref|wrapped|classcell|spec|path|package|future|traceback)__)\b/dg,captures:{1:{token:a.EntityTokenType.Identifier}}},n.magicNames={patterns:[n.magicFunctionNames,n.magicVariableNames]},n.illegalNames={debugName:"illegalNames",match:/\b(?:(and|assert|async|await|break|class|continue|def|del|elif|else|except|finally|for|from|global|if|in|is|(?<=\.)lambda|lambda(?=\s*[\.=])|nonlocal|not|or|pass|raise|return|try|while|with|yield)|(as|import))\b/dg,captures:{1:{token:a.MetaTokenType.ControlFlowKeyword},2:{token:a.KeywordTokenType.Import}}},n.specialVariables={debugName:"specialVariables",match:/\b(?<!\.)(?:(self)|(cls))\b/dg,captures:{1:{token:a.EntityTokenType.Identifier},2:{token:a.EntityTokenType.Identifier}}},n.ellipsis={debugName:"ellipsis",token:a.MetaTokenType.ConstantCaps,match:/\.\.\./g},n.backticks={debugName:"backticks",token:a.MetaTokenType.Deprecated,begin:/\`/g,end:/(?:\`|(?<!\\)(\n))/g,patterns:[n.expression]},n.illegalOperator={patterns:[{debugName:"illegalOperator.patterns![0]",token:a.MetaTokenType.Invalid,match:/&&|\|\||--|\+\+/g},{debugName:"illegalOperator.patterns![1]",token:a.MetaTokenType.Invalid,match:/[?$]/gm},{debugName:"illegalOperator.patterns![2]",token:a.MetaTokenType.Invalid,match:/!\b/g}]},n.illegalObjectName={debugName:"illegalObjectName",token:a.MetaTokenType.Invalid,match:/\b(True|False|None)\b/g},n.illegalAnno={debugName:"illegalAnno",token:a.MetaTokenType.Invalid,match:/->/g},n.regexpBaseExpression={patterns:[]},n.fregexpBaseExpression={patterns:[{debugName:"fregexpBaseExpression.patterns![2]",match:/\{.*?\}/g}]},n.fstringFormattingBraces={patterns:[{debugName:"fstringFormattingBraces.patterns![0]",match:/({)(\s*?)(})/dg,captures:{1:{token:a.MetaTokenType.Placeholder},2:{token:a.MetaTokenType.Invalid},3:{token:a.MetaTokenType.Placeholder}}},{debugName:"fstringFormattingBraces.patterns![1]",token:a.MetaTokenType.EscapeSequence,match:/({{|}})/g}]},n.regexpBaseCommon={patterns:[{debugName:"regexpBaseCommon.patterns![0]",token:a.CharacterTokenType.Dot,match:/\./g},{debugName:"regexpBaseCommon.patterns![1]",token:a.CharacterTokenType.Caret,match:/\^/gm},{debugName:"regexpBaseCommon.patterns![2]",token:a.CharacterTokenType.DollarSymbol,match:/\$/gm},{debugName:"regexpBaseCommon.patterns![3]",token:a.OperatorTokenType.Quantifier,match:/[+*?]\??/g},{debugName:"regexpBaseCommon.patterns![4]",token:a.OperatorTokenType.Disjunction,match:/\|/g}]},n.regexpQuantifier={debugName:"regexpQuantifier",token:a.OperatorTokenType.Quantifier,match:/\{(\d+|\d+,(\d+)?|,\d+)\}/g},n.fregexpQuantifier={debugName:"fregexpQuantifier",token:a.OperatorTokenType.Quantifier,match:/\{\{(\d+|\d+,(\d+)?|,\d+)\}\}/g},n.regexpBackreferenceNumber={debugName:"regexpBackreferenceNumber",token:a.MetaTokenType.Backreference,match:/(\\[1-9]\d?)/dg,captures:{1:{token:a.EntityTokenType.TagName}}},n.regexpBackreference={debugName:"regexpBackreference",token:a.MetaTokenType.BackreferenceNamed,match:/(\()(\?P=\w+(?:\s+[a-zA-Z0-9]+)?)(\))/dg,captures:{1:{token:a.CharacterTokenType.OpenParentheses},2:{token:a.EntityTokenType.TagName},3:{token:a.CharacterTokenType.CloseParentheses}}},n.regexpFlags={debugName:"regexpFlags",token:a.MetaTokenType.ModifierFlagStorageType,match:/\(\?[aiLmsux]+\)/g},n.regexpEscapeSpecial={debugName:"regexpEscapeSpecial",token:a.MetaTokenType.EscapeSequence,match:/\\([AbBdDsSwWZ])/g},n.regexpEscapeCharacter={debugName:"regexpEscapeCharacter",token:a.MetaTokenType.EscapeSequence,match:/\\(x[0-9A-Fa-f]{2}|0[0-7]{1,2}|[0-7]{3})/g},n.regexpEscapeUnicode={debugName:"regexpEscapeUnicode",token:a.MetaTokenType.EscapeSequence,match:/\\(u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/g},n.regexpEscapeCatchall={debugName:"regexpEscapeCatchall",token:a.MetaTokenType.EscapeSequence,match:/\\(.|\n)/g},n.regexpEscapeSequence={patterns:[n.regexpEscapeSpecial,n.regexpEscapeCharacter,n.regexpEscapeUnicode,n.regexpBackreferenceNumber,n.regexpEscapeCatchall]},n.regexpCharecterSetEscapes={patterns:[{debugName:"regexpCharecterSetEscapes.patterns![0]",token:a.MetaTokenType.EscapeSequence,match:/\\[abfnrtv\\]/g},n.regexpEscapeSpecial,{debugName:"regexpCharecterSetEscapes.patterns![2]",token:a.MetaTokenType.EscapeSequence,match:/\\([0-7]{1,3})/g},n.regexpEscapeCharacter,n.regexpEscapeUnicode,n.regexpEscapeCatchall]},n.commentsStringSingleThree={debugName:"commentsStringSingleThree",token:a.MetaTokenType.Comment,begin:/(\#)/dg,beginCaptures:{1:{token:a.CharacterTokenType.Hashtag}},end:/($|(?='''))/gm,patterns:[]},n.commentsStringDoubleThree={debugName:"commentsStringDoubleThree",token:a.MetaTokenType.Comment,begin:/(\#)/dg,beginCaptures:{1:{token:a.CharacterTokenType.Hashtag}},end:/($|(?="""))/gm,patterns:[]},n.singleOneRegexpExpression={patterns:[n.regexpBaseExpression,n.regexpFlags,n.regexpBackreference]},n.singleOneRegexpCharacterSet={patterns:[{debugName:"singleOneRegexpCharacterSet.patterns![0]",match:/\[\^?\](?!.*?\])/gm},{debugName:"singleOneRegexpCharacterSet.patterns![1]",token:a.MetaTokenType.CharacterSet,begin:/(\[)(\^)?(\])?/dgm,beginCaptures:{1:{token:a.CharacterTokenType.OpenSquareBracket},2:{token:a.OperatorTokenType.Negation},3:{token:a.MetaTokenType.CharacterSet}},end:/(\]|(?=\'))|((?=(?<!\\)\n))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseSquareBracket},2:{token:a.MetaTokenType.Invalid}},patterns:[n.regexpCharecterSetEscapes,{debugName:"singleOneRegexpCharacterSet.patterns![1].patterns![1]",token:a.MetaTokenType.CharacterSet,match:/[^\n]/g}]}]},n.singleOneRegexpNamedGroup={debugName:"singleOneRegexpNamedGroup",token:a.MetaTokenType.Named,begin:/(\()(\?P<\w+(?:\s+[a-zA-Z0-9]+)?>)/dg,beginCaptures:{1:{token:a.CharacterTokenType.OpenParentheses},2:{token:a.EntityTokenType.TagName}},end:/(\)|(?=\'))|((?=(?<!\\)\n))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.singleOneRegexpExpression]},n.singleOneRegexpComments={debugName:"singleOneRegexpComments",token:a.MetaTokenType.Comment,begin:/\(\?#/dg,beginCaptures:{0:{token:a.MetaTokenType.CommentBegin}},end:/(\)|(?=\'))|((?=(?<!\\)\n))/dg,endCaptures:{1:{token:a.MetaTokenType.CommentEnd},2:{token:a.MetaTokenType.Invalid}},patterns:[]},n.singleOneRegexpLookahead={debugName:"singleOneRegexpLookahead",begin:/(\()\?=/dg,beginCaptures:{0:{token:a.OperatorTokenType.Lookahead},1:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?=\'))|((?=(?<!\\)\n))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.singleOneRegexpExpression]},n.singleOneRegexpLookaheadNegative={debugName:"singleOneRegexpLookaheadNegative",begin:/(\()\?!/dg,beginCaptures:{0:{token:a.OperatorTokenType.LookaheadNegative},1:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?=\'))|((?=(?<!\\)\n))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.singleOneRegexpExpression]},n.singleOneRegexpLookbehind={debugName:"singleOneRegexpLookbehind",begin:/(\()\?<=/dg,beginCaptures:{0:{token:a.OperatorTokenType.Lookbehind},1:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?=\'))|((?=(?<!\\)\n))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.singleOneRegexpExpression]},n.singleOneRegexpLookbehindNegative={debugName:"singleOneRegexpLookbehindNegative",begin:/(\()\?<!/dg,beginCaptures:{0:{token:a.OperatorTokenType.LookbehindNegative},1:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?=\'))|((?=(?<!\\)\n))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.singleOneRegexpExpression]},n.singleOneRegexpConditional={debugName:"singleOneRegexpConditional",begin:/(\()\?\((\w+(?:\s+[a-zA-Z0-9]+)?|\d+)\)/dg,beginCaptures:{0:{token:a.OperatorTokenType.Conditional},1:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?=\'))|((?=(?<!\\)\n))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.singleOneRegexpExpression]},n.singleOneRegexpParenthesesNonCapturing={debugName:"singleOneRegexpParenthesesNonCapturing",begin:/\(\?:/dg,beginCaptures:{0:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?=\'))|((?=(?<!\\)\n))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.singleOneRegexpExpression]},n.singleOneRegexpParentheses={debugName:"singleOneRegexpParentheses",begin:/\(/dg,beginCaptures:{0:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?=\'))|((?=(?<!\\)\n))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.singleOneRegexpExpression]},n.singleThreeRegexpExpression={patterns:[n.regexpBaseExpression,n.regexpFlags,n.regexpBackreference,n.commentsStringSingleThree]},n.singleThreeRegexpCharacterSet={patterns:[{debugName:"singleThreeRegexpCharacterSet.patterns![0]",match:/\[\^?\](?!.*?\])/gm},{debugName:"singleThreeRegexpCharacterSet.patterns![1]",token:a.MetaTokenType.CharacterSet,begin:/(\[)(\^)?(\])?/dgm,beginCaptures:{1:{token:a.CharacterTokenType.OpenSquareBracket},2:{token:a.OperatorTokenType.Negation},3:{token:a.MetaTokenType.CharacterSet}},end:/(\]|(?=\'\'\'))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseSquareBracket},2:{token:a.MetaTokenType.Invalid}},patterns:[n.regexpCharecterSetEscapes,{debugName:"singleThreeRegexpCharacterSet.patterns![1].patterns![1]",token:a.MetaTokenType.CharacterSet,match:/[^\n]/g}]}]},n.singleThreeRegexpNamedGroup={debugName:"singleThreeRegexpNamedGroup",token:a.MetaTokenType.Named,begin:/(\()(\?P<\w+(?:\s+[a-zA-Z0-9]+)?>)/dg,beginCaptures:{1:{token:a.CharacterTokenType.OpenParentheses},2:{token:a.EntityTokenType.TagName}},end:/(\)|(?=\'\'\'))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.singleThreeRegexpExpression,n.commentsStringSingleThree]},n.singleThreeRegexpComments={debugName:"singleThreeRegexpComments",token:a.MetaTokenType.Comment,begin:/\(\?#/dg,beginCaptures:{0:{token:a.MetaTokenType.CommentBegin}},end:/(\)|(?=\'\'\'))/dg,endCaptures:{1:{token:a.MetaTokenType.CommentEnd},2:{token:a.MetaTokenType.Invalid}},patterns:[]},n.singleThreeRegexpLookahead={debugName:"singleThreeRegexpLookahead",begin:/(\()\?=/dg,beginCaptures:{0:{token:a.OperatorTokenType.Lookahead},1:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?=\'\'\'))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.singleThreeRegexpExpression,n.commentsStringSingleThree]},n.singleThreeRegexpLookaheadNegative={debugName:"singleThreeRegexpLookaheadNegative",begin:/(\()\?!/dg,beginCaptures:{0:{token:a.OperatorTokenType.LookaheadNegative},1:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?=\'\'\'))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.singleThreeRegexpExpression,n.commentsStringSingleThree]},n.singleThreeRegexpLookbehind={debugName:"singleThreeRegexpLookbehind",begin:/(\()\?<=/dg,beginCaptures:{0:{token:a.OperatorTokenType.Lookbehind},1:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?=\'\'\'))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.singleThreeRegexpExpression,n.commentsStringSingleThree]},n.singleThreeRegexpLookbehindNegative={debugName:"singleThreeRegexpLookbehindNegative",begin:/(\()\?<!/dg,beginCaptures:{0:{token:a.OperatorTokenType.LookbehindNegative},1:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?=\'\'\'))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.singleThreeRegexpExpression,n.commentsStringSingleThree]},n.singleThreeRegexpConditional={debugName:"singleThreeRegexpConditional",begin:/(\()\?\((\w+(?:\s+[a-zA-Z0-9]+)?|\d+)\)/dg,beginCaptures:{0:{token:a.OperatorTokenType.Conditional},1:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?=\'\'\'))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.singleThreeRegexpExpression,n.commentsStringSingleThree]},n.singleThreeRegexpParenthesesNonCapturing={debugName:"singleThreeRegexpParenthesesNonCapturing",begin:/\(\?:/dg,beginCaptures:{0:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?=\'\'\'))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.singleThreeRegexpExpression,n.commentsStringSingleThree]},n.singleThreeRegexpParentheses={debugName:"singleThreeRegexpParentheses",begin:/\(/dg,beginCaptures:{0:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?=\'\'\'))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.singleThreeRegexpExpression,n.commentsStringSingleThree]},n.doubleOneRegexpExpression={patterns:[n.regexpBaseExpression,n.regexpFlags,n.regexpBackreference]},n.doubleOneRegexpCharacterSet={patterns:[{debugName:"doubleOneRegexpCharacterSet.patterns![0]",match:/\[\^?\](?!.*?\])/gm},{debugName:"doubleOneRegexpCharacterSet.patterns![1]",token:a.MetaTokenType.CharacterSet,begin:/(\[)(\^)?(\])?/dgm,beginCaptures:{1:{token:a.CharacterTokenType.OpenSquareBracket},2:{token:a.OperatorTokenType.Negation},3:{token:a.MetaTokenType.CharacterSet}},end:/(\]|(?="))|((?=(?<!\\)\n))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseSquareBracket},2:{token:a.MetaTokenType.Invalid}},patterns:[n.regexpCharecterSetEscapes,{debugName:"doubleOneRegexpCharacterSet.patterns![1].patterns![1]",token:a.MetaTokenType.CharacterSet,match:/[^\n]/g}]}]},n.doubleOneRegexpNamedGroup={debugName:"doubleOneRegexpNamedGroup",token:a.MetaTokenType.Named,begin:/(\()(\?P<\w+(?:\s+[a-zA-Z0-9]+)?>)/dg,beginCaptures:{1:{token:a.CharacterTokenType.OpenParentheses},2:{token:a.EntityTokenType.TagName}},end:/(\)|(?="))|((?=(?<!\\)\n))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.doubleOneRegexpExpression]},n.doubleOneRegexpComments={debugName:"doubleOneRegexpComments",token:a.MetaTokenType.Comment,begin:/\(\?#/dg,beginCaptures:{0:{token:a.MetaTokenType.CommentBegin}},end:/(\)|(?="))|((?=(?<!\\)\n))/dg,endCaptures:{1:{token:a.MetaTokenType.CommentEnd},2:{token:a.MetaTokenType.Invalid}},patterns:[]},n.doubleOneRegexpLookahead={debugName:"doubleOneRegexpLookahead",begin:/(\()\?=/dg,beginCaptures:{0:{token:a.OperatorTokenType.Lookahead},1:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?="))|((?=(?<!\\)\n))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.doubleOneRegexpExpression]},n.doubleOneRegexpLookaheadNegative={debugName:"doubleOneRegexpLookaheadNegative",begin:/(\()\?!/dg,beginCaptures:{0:{token:a.OperatorTokenType.LookaheadNegative},1:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?="))|((?=(?<!\\)\n))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.doubleOneRegexpExpression]},n.doubleOneRegexpLookbehind={debugName:"doubleOneRegexpLookbehind",begin:/(\()\?<=/dg,beginCaptures:{0:{token:a.OperatorTokenType.Lookbehind},1:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?="))|((?=(?<!\\)\n))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.doubleOneRegexpExpression]},n.doubleOneRegexpLookbehindNegative={debugName:"doubleOneRegexpLookbehindNegative",begin:/(\()\?<!/dg,beginCaptures:{0:{token:a.OperatorTokenType.LookbehindNegative},1:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?="))|((?=(?<!\\)\n))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.doubleOneRegexpExpression]},n.doubleOneRegexpConditional={debugName:"doubleOneRegexpConditional",begin:/(\()\?\((\w+(?:\s+[a-zA-Z0-9]+)?|\d+)\)/dg,beginCaptures:{0:{token:a.OperatorTokenType.Conditional},1:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?="))|((?=(?<!\\)\n))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.doubleOneRegexpExpression]},n.doubleOneRegexpParenthesesNonCapturing={debugName:"doubleOneRegexpParenthesesNonCapturing",begin:/\(\?:/dg,beginCaptures:{0:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?="))|((?=(?<!\\)\n))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.doubleOneRegexpExpression]},n.doubleOneRegexpParentheses={debugName:"doubleOneRegexpParentheses",begin:/\(/dg,beginCaptures:{0:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?="))|((?=(?<!\\)\n))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.doubleOneRegexpExpression]},n.doubleThreeRegexpExpression={patterns:[n.regexpBaseExpression,n.regexpFlags,n.regexpBackreference,n.commentsStringDoubleThree]},n.doubleThreeRegexpCharacterSet={patterns:[{debugName:"doubleThreeRegexpCharacterSet.patterns![0]",match:/\[\^?\](?!.*?\])/gm},{debugName:"doubleThreeRegexpCharacterSet.patterns![1]",token:a.MetaTokenType.CharacterSet,begin:/(\[)(\^)?(\])?/dgm,beginCaptures:{1:{token:a.CharacterTokenType.OpenSquareBracket},2:{token:a.OperatorTokenType.Negation},3:{token:a.MetaTokenType.CharacterSet}},end:/(\]|(?="""))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseSquareBracket},2:{token:a.MetaTokenType.Invalid}},patterns:[n.regexpCharecterSetEscapes,{debugName:"doubleThreeRegexpCharacterSet.patterns![1].patterns![1]",token:a.MetaTokenType.CharacterSet,match:/[^\n]/g}]}]},n.doubleThreeRegexpNamedGroup={debugName:"doubleThreeRegexpNamedGroup",token:a.MetaTokenType.Named,begin:/(\()(\?P<\w+(?:\s+[a-zA-Z0-9]+)?>)/dg,beginCaptures:{1:{token:a.CharacterTokenType.OpenParentheses},2:{token:a.EntityTokenType.TagName}},end:/(\)|(?="""))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.doubleThreeRegexpExpression,n.commentsStringDoubleThree]},n.doubleThreeRegexpComments={debugName:"doubleThreeRegexpComments",token:a.MetaTokenType.Comment,begin:/\(\?#/dg,beginCaptures:{0:{token:a.MetaTokenType.CommentBegin}},end:/(\)|(?="""))/dg,endCaptures:{1:{token:a.MetaTokenType.CommentEnd},2:{token:a.MetaTokenType.Invalid}},patterns:[]},n.doubleThreeRegexpLookahead={debugName:"doubleThreeRegexpLookahead",begin:/(\()\?=/dg,beginCaptures:{0:{token:a.OperatorTokenType.Lookahead},1:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?="""))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.doubleThreeRegexpExpression,n.commentsStringDoubleThree]},n.doubleThreeRegexpLookaheadNegative={debugName:"doubleThreeRegexpLookaheadNegative",begin:/(\()\?!/dg,beginCaptures:{0:{token:a.OperatorTokenType.LookaheadNegative},1:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?="""))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.doubleThreeRegexpExpression,n.commentsStringDoubleThree]},n.doubleThreeRegexpLookbehind={debugName:"doubleThreeRegexpLookbehind",begin:/(\()\?<=/dg,beginCaptures:{0:{token:a.OperatorTokenType.Lookbehind},1:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?="""))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.doubleThreeRegexpExpression,n.commentsStringDoubleThree]},n.doubleThreeRegexpLookbehindNegative={debugName:"doubleThreeRegexpLookbehindNegative",begin:/(\()\?<!/dg,beginCaptures:{0:{token:a.OperatorTokenType.LookbehindNegative},1:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?="""))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.doubleThreeRegexpExpression,n.commentsStringDoubleThree]},n.doubleThreeRegexpConditional={debugName:"doubleThreeRegexpConditional",begin:/(\()\?\((\w+(?:\s+[a-zA-Z0-9]+)?|\d+)\)/dg,beginCaptures:{0:{token:a.OperatorTokenType.Conditional},1:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?="""))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.doubleThreeRegexpExpression,n.commentsStringDoubleThree]},n.doubleThreeRegexpParenthesesNonCapturing={debugName:"doubleThreeRegexpParenthesesNonCapturing",begin:/\(\?:/dg,beginCaptures:{0:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?="""))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.doubleThreeRegexpExpression,n.commentsStringDoubleThree]},n.doubleThreeRegexpParentheses={debugName:"doubleThreeRegexpParentheses",begin:/\(/dg,beginCaptures:{0:{token:a.CharacterTokenType.OpenParentheses}},end:/(\)|(?="""))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses},2:{token:a.MetaTokenType.Invalid}},patterns:[n.doubleThreeRegexpExpression,n.commentsStringDoubleThree]},n.regexpSingleOneLine={debugName:"regexpSingleOneLine",token:a.LiteralTokenType.String,begin:/\b(?:([uU]r)|([bB]r)|(r[bB]?))(\')/dg,beginCaptures:{1:{token:a.MetaTokenType.Deprecated},2:{token:a.MetaTokenType.StringStorageType},3:{token:a.MetaTokenType.StringStorageType},4:{token:a.MetaTokenType.StringBegin}},end:/(\')|(?<!\\)(\n)/dg,endCaptures:{1:{token:a.MetaTokenType.StringEnd},2:{token:a.MetaTokenType.Invalid}},patterns:[n.singleOneRegexpExpression]},n.regexpSingleThreeLine={debugName:"regexpSingleThreeLine",token:a.LiteralTokenType.String,begin:/\b(?:([uU]r)|([bB]r)|(r[bB]?))(\'\'\')/dg,beginCaptures:{1:{token:a.MetaTokenType.Deprecated},2:{token:a.MetaTokenType.StringStorageType},3:{token:a.MetaTokenType.StringStorageType},4:{token:a.MetaTokenType.StringBegin}},end:/(\'\'\')/dg,endCaptures:{1:{token:a.MetaTokenType.StringEnd},2:{token:a.MetaTokenType.Invalid}},patterns:[n.singleThreeRegexpExpression]},n.regexpDoubleOneLine={debugName:"regexpDoubleOneLine",token:a.LiteralTokenType.String,begin:/\b(?:([uU]r)|([bB]r)|(r[bB]?))(")/dg,beginCaptures:{1:{token:a.MetaTokenType.Deprecated},2:{token:a.MetaTokenType.StringStorageType},3:{token:a.MetaTokenType.StringStorageType},4:{token:a.MetaTokenType.StringBegin}},end:/(")|(?<!\\)(\n)/dg,endCaptures:{1:{token:a.MetaTokenType.StringEnd},2:{token:a.MetaTokenType.Invalid}},patterns:[n.doubleOneRegexpExpression]},n.regexpDoubleThreeLine={debugName:"regexpDoubleThreeLine",token:a.LiteralTokenType.String,begin:/\b(?:([uU]r)|([bB]r)|(r[bB]?))(""")/dg,beginCaptures:{1:{token:a.MetaTokenType.Deprecated},2:{token:a.MetaTokenType.StringStorageType},3:{token:a.MetaTokenType.StringStorageType},4:{token:a.MetaTokenType.StringBegin}},end:/(""")/dg,endCaptures:{1:{token:a.MetaTokenType.StringEnd},2:{token:a.MetaTokenType.Invalid}},patterns:[n.doubleThreeRegexpExpression]},n.stringRawQuotedSingleLine={debugName:"stringRawQuotedSingleLine",token:a.LiteralTokenType.String,begin:/\b(?:([uU]R)|(R))(['"])/dg,beginCaptures:{1:{token:a.MetaTokenType.Deprecated},2:{token:a.MetaTokenType.StringStorageType},3:{token:a.MetaTokenType.StringBegin}},end:/(\4)|((?<!\\)\n)/dg,endCaptures:{1:{token:a.MetaTokenType.StringEnd},2:{token:a.MetaTokenType.Invalid}},patterns:[n.stringRawGuts]},n.stringBinQuotedSingleLine={debugName:"stringBinQuotedSingleLine",token:a.LiteralTokenType.String,begin:/(\b[bB])(['"])/dg,beginCaptures:{1:{token:a.MetaTokenType.StringStorageType},2:{token:a.MetaTokenType.StringBegin}},end:/(\2)|((?<!\\)\n)/dg,endCaptures:{1:{token:a.MetaTokenType.StringEnd},2:{token:a.MetaTokenType.Invalid}},patterns:[n.stringEntity]},n.stringRawBinQuotedSingleLine={debugName:"stringRawBinQuotedSingleLine",token:a.LiteralTokenType.String,begin:/(\b(?:R[bB]|[bB]R))(['"])/dg,beginCaptures:{1:{token:a.MetaTokenType.StringStorageType},2:{token:a.MetaTokenType.StringBegin}},end:/(\2)|((?<!\\)\n)/dg,endCaptures:{1:{token:a.MetaTokenType.StringEnd},2:{token:a.MetaTokenType.Invalid}},patterns:[n.stringRawBinGuts]},n.stringQuotedSingleLine={debugName:"stringQuotedSingleLine",token:a.LiteralTokenType.String,begin:/(?:\b([rR])(?=[uU]))?([uU])?(['"])/dg,beginCaptures:{1:{token:a.MetaTokenType.Invalid},2:{token:a.MetaTokenType.StringStorageType},3:{token:a.MetaTokenType.StringBegin}},end:/(\3)|((?<!\\)\n)/dg,endCaptures:{1:{token:a.MetaTokenType.StringEnd},2:{token:a.MetaTokenType.Invalid}},patterns:[n.stringUnicodeGuts]},n.stringSingleBadBrace1FormattingUnicode={debugName:"stringSingleBadBrace1FormattingUnicode",begin:/(?=\{%(?:.*?(?!['"]|(?:(?<!\\)\n)))%\})/g,end:/(?=['"]|(?:(?<!\\)\n))/g,patterns:[n.escapeSequenceUnicode,n.escapeSequence,n.stringLineContinuation]},n.stringSingleBadBrace1FormattingRaw={debugName:"stringSingleBadBrace1FormattingRaw",begin:/(?=\{%(?:.*?(?!['"]|(?:(?<!\\)\n)))%\})/g,end:/(?=['"]|(?:(?<!\\)\n))/g,patterns:[n.stringConsumeEscape]},n.stringSingleBadBrace2FormattingRaw={debugName:"stringSingleBadBrace2FormattingRaw",begin:/(?!\{\{)(?=\{(?:\w*?(?!['"]|(?:(?<!\\)\n))[^!:\.\[}\w]).*?(?!['"]|(?:(?<!\\)\n))\})/g,end:/(?=['"]|(?:(?<!\\)\n))/g,patterns:[n.stringConsumeEscape,n.stringFormatting]},n.stringRawQuotedMultiLine={debugName:"stringRawQuotedMultiLine",token:a.LiteralTokenType.String,begin:/\b(?:([uU]R)|(R))('''|""")/dg,beginCaptures:{1:{token:a.MetaTokenType.Deprecated},2:{token:a.MetaTokenType.StringStorageType},3:{token:a.MetaTokenType.StringBegin}},end:/(\4)/dg,endCaptures:{1:{token:a.MetaTokenType.StringEnd},2:{token:a.MetaTokenType.Invalid}},patterns:[n.stringRawGuts]},n.stringBinQuotedMultiLine={debugName:"stringBinQuotedMultiLine",token:a.LiteralTokenType.String,begin:/(\b[bB])('''|""")/dg,beginCaptures:{1:{token:a.MetaTokenType.StringStorageType},2:{token:a.MetaTokenType.StringBegin}},end:/(\2)/dg,endCaptures:{1:{token:a.MetaTokenType.StringEnd},2:{token:a.MetaTokenType.Invalid}},patterns:[n.stringEntity]},n.stringRawBinQuotedMultiLine={debugName:"stringRawBinQuotedMultiLine",token:a.LiteralTokenType.String,begin:/(\b(?:R[bB]|[bB]R))('''|""")/dg,beginCaptures:{1:{token:a.MetaTokenType.StringStorageType},2:{token:a.MetaTokenType.StringBegin}},end:/(\2)/dg,endCaptures:{1:{token:a.MetaTokenType.StringEnd},2:{token:a.MetaTokenType.Invalid}},patterns:[n.stringRawBinGuts]},n.stringQuotedMultiLine={debugName:"stringQuotedMultiLine",token:a.LiteralTokenType.String,begin:/(?:\b([rR])(?=[uU]))?([uU])?('''|""")/dg,beginCaptures:{1:{token:a.MetaTokenType.Invalid},2:{token:a.MetaTokenType.StringStorageType},3:{token:a.MetaTokenType.StringBegin}},end:/(\3)/dg,endCaptures:{1:{token:a.MetaTokenType.StringEnd},2:{token:a.MetaTokenType.Invalid}},patterns:[n.stringUnicodeGuts]},n.stringMultiBadBrace1FormattingUnicode={debugName:"stringMultiBadBrace1FormattingUnicode",begin:/(?=\{%(.*?(?!'''|"""))%\})/g,end:/(?='''|""")/g,patterns:[n.escapeSequenceUnicode,n.escapeSequence,n.stringLineContinuation]},n.stringMultiBadBrace1FormattingRaw={debugName:"stringMultiBadBrace1FormattingRaw",begin:/(?=\{%(.*?(?!'''|"""))%\})/g,end:/(?='''|""")/g,patterns:[n.stringConsumeEscape]},n.stringMultiBadBrace2FormattingUnicode={debugName:"stringMultiBadBrace2FormattingUnicode",begin:/(?!\{\{)(?=\{(\w*?(?!'''|""")[^!:\.\[}\w]).*?(?!'''|""")\})/g,end:/(?='''|""")/g,patterns:[n.escapeSequenceUnicode,n.stringEntity]},n.stringMultiBadBrace2FormattingRaw={debugName:"stringMultiBadBrace2FormattingRaw",begin:/(?!\{\{)(?=\{(\w*?(?!'''|""")[^!:\.\[}\w]).*?(?!'''|""")\})/g,end:/(?='''|""")/g,patterns:[n.stringConsumeEscape,n.stringFormatting]},n.fstringFnormQuotedSingleLine={debugName:"fstringFnormQuotedSingleLine",token:a.MetaTokenType.Fstring,begin:/(\b[fF])([bBuU])?((['"]))/dg,beginCaptures:{1:{token:a.MetaTokenType.StringStorageType},2:{token:a.MetaTokenType.Invalid},3:{token:a.LiteralTokenType.String}},end:/(\3)|((?<!\\)\n)/dg,endCaptures:{1:{token:a.LiteralTokenType.String},2:{token:a.MetaTokenType.Invalid}},patterns:[n.fstringGuts,n.fstringIllegalSingleBrace]},n.fstringNormfQuotedSingleLine={debugName:"fstringNormfQuotedSingleLine",token:a.MetaTokenType.Fstring,begin:/(\b[bBuU])([fF])((['"]))/dg,beginCaptures:{1:{token:a.MetaTokenType.Invalid},2:{token:a.MetaTokenType.StringStorageType},3:{token:a.MetaTokenType.StringBegin}},end:/(\3)|((?<!\\)\n)/dg,endCaptures:{1:{token:a.LiteralTokenType.String},2:{token:a.MetaTokenType.Invalid}},patterns:[n.fstringGuts,n.fstringIllegalSingleBrace]},n.fstringRawQuotedSingleLine={debugName:"fstringRawQuotedSingleLine",token:a.MetaTokenType.Fstring,begin:/(\b(?:[rR][fF]|[fF][rR]))((['"]))/dg,beginCaptures:{1:{token:a.MetaTokenType.StringStorageType},2:{token:a.MetaTokenType.StringBegin}},end:/(\2)|((?<!\\)\n)/dg,endCaptures:{1:{token:a.LiteralTokenType.String},2:{token:a.MetaTokenType.Invalid}},patterns:[n.fstringRawGuts,n.fstringIllegalSingleBrace]},n.fstringSingleCore={debugName:"fstringSingleCore",token:a.LiteralTokenType.String,match:/(.+?)(($\n?)|(?=[\\\}\{]|(['"])|((?<!\\)\n)))|\n/gm},n.fstringRawSingleCore={debugName:"fstringRawSingleCore",token:a.LiteralTokenType.String,match:/(.+?)(($\n?)|(?=[\\\}\{]|(['"])|((?<!\\)\n)))|\n/gm},n.fstringSingleBrace={debugName:"fstringSingleBrace",begin:/(\{)/dg,beginCaptures:{1:{token:a.MetaTokenType.Placeholder}},end:/(\})|(?=\n)/dg,endCaptures:{1:{token:a.MetaTokenType.Placeholder}},patterns:[n.fExpression]},n.fstringTerminatorSingle={patterns:[{debugName:"fstringTerminatorSingle.patterns![0]",token:a.MetaTokenType.FormatStorageType,match:/(=(![rsa])?)(?=})/g},{debugName:"fstringTerminatorSingle.patterns![1]",token:a.MetaTokenType.FormatStorageType,match:/(=?![rsa])(?=})/g},{debugName:"fstringTerminatorSingle.patterns![2]",match:/((?:=?)(?:![rsa])?)(:\w?[<>=^]?[-+ ]?\#?\d*,?(\.\d+)?[bcdeEfFgGnosxX%]?)(?=})/dgm,captures:{1:{token:a.MetaTokenType.FormatStorageType},2:{token:a.MetaTokenType.FormatStorageType}}}]},n.fstringTerminatorSingleTail={debugName:"fstringTerminatorSingleTail",begin:/((?:=?)(?:![rsa])?)(:)(?=.*?{)/dg,beginCaptures:{1:{token:a.MetaTokenType.FormatStorageType},2:{token:a.MetaTokenType.FormatStorageType}},end:/(?=})|(?=\n)/g,patterns:[n.fstringIllegalSingleBrace,n.fstringSingleBrace,{debugName:"fstringTerminatorSingleTail.patterns![2]",token:a.MetaTokenType.FormatStorageType,match:/([bcdeEfFgGnosxX%])(?=})/g},{debugName:"fstringTerminatorSingleTail.patterns![3]",token:a.MetaTokenType.FormatStorageType,match:/(\.\d+)/g},{debugName:"fstringTerminatorSingleTail.patterns![4]",token:a.MetaTokenType.FormatStorageType,match:/(,)/g},{debugName:"fstringTerminatorSingleTail.patterns![5]",token:a.MetaTokenType.FormatStorageType,match:/(\d+)/g},{debugName:"fstringTerminatorSingleTail.patterns![6]",token:a.MetaTokenType.FormatStorageType,match:/(\#)/g},{debugName:"fstringTerminatorSingleTail.patterns![7]",token:a.MetaTokenType.FormatStorageType,match:/([-+ ])/g},{debugName:"fstringTerminatorSingleTail.patterns![8]",token:a.MetaTokenType.FormatStorageType,match:/([<>=^])/gm},{debugName:"fstringTerminatorSingleTail.patterns![9]",token:a.MetaTokenType.FormatStorageType,match:/(\w)/g}]},n.fstringFnormQuotedMultiLine={debugName:"fstringFnormQuotedMultiLine",token:a.MetaTokenType.Fstring,begin:/(\b[fF])([bBuU])?('''|""")/dg,beginCaptures:{1:{token:a.MetaTokenType.StringStorageType},2:{token:a.MetaTokenType.Invalid},3:{token:a.LiteralTokenType.String}},end:/(\3)/dg,endCaptures:{1:{token:a.LiteralTokenType.String},2:{token:a.MetaTokenType.Invalid}},patterns:[n.fstringGuts,n.fstringIllegalMultiBrace]},n.fstringNormfQuotedMultiLine={debugName:"fstringNormfQuotedMultiLine",token:a.MetaTokenType.Fstring,begin:/(\b[bBuU])([fF])('''|""")/dg,beginCaptures:{1:{token:a.MetaTokenType.Invalid},2:{token:a.MetaTokenType.StringStorageType},3:{token:a.MetaTokenType.StringBegin}},end:/(\3)/dg,endCaptures:{1:{token:a.LiteralTokenType.String},2:{token:a.MetaTokenType.Invalid}},patterns:[n.fstringGuts,n.fstringIllegalMultiBrace]},n.fstringRawQuotedMultiLine={debugName:"fstringRawQuotedMultiLine",token:a.MetaTokenType.Fstring,begin:/(\b(?:[rR][fF]|[fF][rR]))('''|""")/dg,beginCaptures:{1:{token:a.MetaTokenType.StringStorageType},2:{token:a.MetaTokenType.StringBegin}},end:/(\2)/dg,endCaptures:{1:{token:a.LiteralTokenType.String},2:{token:a.MetaTokenType.Invalid}},patterns:[n.fstringRawGuts,n.fstringIllegalMultiBrace]},n.fstringMultiCore={debugName:"fstringMultiCore",token:a.LiteralTokenType.String,match:/(.+?)(($\n?)|(?=[\\\}\{]|'''|"""))|\n/gm},n.fstringRawMultiCore={debugName:"fstringRawMultiCore",token:a.LiteralTokenType.String,match:/(.+?)(($\n?)|(?=[\\\}\{]|'''|"""))|\n/gm},n.fstringMultiBrace={debugName:"fstringMultiBrace",begin:/(\{)/dg,beginCaptures:{1:{token:a.MetaTokenType.Placeholder}},end:/(\})/dg,endCaptures:{1:{token:a.MetaTokenType.Placeholder}},patterns:[n.fExpression]},n.fstringTerminatorMulti={patterns:[{debugName:"fstringTerminatorMulti.patterns![0]",token:a.MetaTokenType.FormatStorageType,match:/(=(![rsa])?)(?=})/g},{debugName:"fstringTerminatorMulti.patterns![1]",token:a.MetaTokenType.FormatStorageType,match:/(=?![rsa])(?=})/g},{debugName:"fstringTerminatorMulti.patterns![2]",match:/((?:=?)(?:![rsa])?)(:\w?[<>=^]?[-+ ]?\#?\d*,?(\.\d+)?[bcdeEfFgGnosxX%]?)(?=})/dgm,captures:{1:{token:a.MetaTokenType.FormatStorageType},2:{token:a.MetaTokenType.FormatStorageType}}}]},n.fstringTerminatorMultiTail={debugName:"fstringTerminatorMultiTail",begin:/((?:=?)(?:![rsa])?)(:)(?=.*?{)/dg,beginCaptures:{1:{token:a.MetaTokenType.FormatStorageType},2:{token:a.MetaTokenType.FormatStorageType}},end:/(?=})/g,patterns:[n.fstringIllegalMultiBrace,n.fstringMultiBrace,{debugName:"fstringTerminatorMultiTail.patterns![2]",token:a.MetaTokenType.FormatStorageType,match:/([bcdeEfFgGnosxX%])(?=})/g},{debugName:"fstringTerminatorMultiTail.patterns![3]",token:a.MetaTokenType.FormatStorageType,match:/(\.\d+)/g},{debugName:"fstringTerminatorMultiTail.patterns![4]",token:a.MetaTokenType.FormatStorageType,match:/(,)/g},{debugName:"fstringTerminatorMultiTail.patterns![5]",token:a.MetaTokenType.FormatStorageType,match:/(\d+)/g},{debugName:"fstringTerminatorMultiTail.patterns![6]",token:a.MetaTokenType.FormatStorageType,match:/(\#)/g},{debugName:"fstringTerminatorMultiTail.patterns![7]",token:a.MetaTokenType.FormatStorageType,match:/([-+ ])/g},{debugName:"fstringTerminatorMultiTail.patterns![8]",token:a.MetaTokenType.FormatStorageType,match:/([<>=^])/gm},{debugName:"fstringTerminatorMultiTail.patterns![9]",token:a.MetaTokenType.FormatStorageType,match:/(\w)/g}]},n.python.patterns.push(n.statement,n.expression),n.statement.patterns.push(n.importStatement,n.classDeclaration,n.functionDeclaration,n.generator,n.statementKeyword,n.assignmentOperator,n.decorator,n.docstringStatement,n.semicolon),n.docstringStatement.patterns.push(n.docstring),n.docstring.patterns[0].patterns.push(n.docstringPrompt,n.docstringGutsUnicode),n.docstring.patterns[1].patterns.push(n.stringConsumeEscape,n.docstringPrompt),n.docstring.patterns[2].patterns.push(n.docstringGutsUnicode),n.docstring.patterns[3].patterns.push(n.stringConsumeEscape),n.docstringGutsUnicode.patterns.push(n.escapeSequenceUnicode,n.escapeSequence,n.stringLineContinuation),n.expressionBare.patterns.splice(0,0,n.backticks),n.expressionBare.patterns.splice(1,0,n.illegalAnno),n.expressionBare.patterns.splice(2,0,n.literal),n.expressionBare.patterns.splice(3,0,n.regexp),n.expressionBare.patterns.splice(4,0,n.string),n.expressionBare.patterns.splice(5,0,n.lambda),n.expressionBare.patterns.splice(6,0,n.generator),n.expressionBare.patterns.splice(7,0,n.illegalOperator),n.expressionBare.patterns.splice(8,0,n.operator),n.expressionBare.patterns.splice(9,0,n.curlyBraces),n.expressionBare.patterns.splice(10,0,n.itemAccess),n.expressionBare.patterns.splice(11,0,n.list),n.expressionBare.patterns.splice(12,0,n.oddFunctionCall),n.expressionBare.patterns.splice(13,0,n.roundBraces),n.expressionBare.patterns.splice(14,0,n.functionCall),n.expressionBare.patterns.splice(15,0,n.builtinFunctions),n.expressionBare.patterns.splice(16,0,n.builtinTypes),n.expressionBare.patterns.splice(17,0,n.builtinExceptions),n.expressionBare.patterns.splice(18,0,n.magicNames),n.expressionBare.patterns.splice(19,0,n.specialNames),n.expressionBare.patterns.splice(20,0,n.illegalNames),n.expressionBare.patterns.splice(21,0,n.specialVariables),n.expressionBare.patterns.splice(22,0,n.ellipsis),n.expressionBare.patterns.splice(23,0,n.punctuation),n.expressionBare.patterns.splice(24,0,n.lineContinuation),n.expressionBase.patterns.push(n.lineContinuation),n.expression.patterns.splice(1,0,n.memberAccess),n.memberAccess.patterns.push(n.functionCall,n.memberAccessBase,n.memberAccessAttribute),n.memberAccessBase.patterns.push(n.magicNames,n.illegalNames,n.illegalObjectName,n.specialNames,n.lineContinuation,n.itemAccess),n.oddFunctionCall.patterns.push(n.functionArguments),n.lineContinuation.patterns[1].patterns.push(n.regexp,n.string),n.literal.patterns.push(n.number),n.number.patterns.splice(0,0,n.numberFloat),n.number.patterns.splice(1,0,n.numberDec),n.number.patterns.splice(2,0,n.numberHex),n.number.patterns.splice(3,0,n.numberOct),n.number.patterns.splice(4,0,n.numberBin),n.number.patterns.splice(5,0,n.numberLong),n.regexp.patterns.push(n.regexpSingleThreeLine,n.regexpDoubleThreeLine,n.regexpSingleOneLine,n.regexpDoubleOneLine),n.string.patterns.push(n.stringQuotedMultiLine,n.stringQuotedSingleLine,n.stringBinQuotedMultiLine,n.stringBinQuotedSingleLine,n.stringRawQuotedMultiLine,n.stringRawQuotedSingleLine,n.stringRawBinQuotedMultiLine,n.stringRawBinQuotedSingleLine,n.fstringFnormQuotedMultiLine,n.fstringFnormQuotedSingleLine,n.fstringNormfQuotedMultiLine,n.fstringNormfQuotedSingleLine,n.fstringRawQuotedMultiLine,n.fstringRawQuotedSingleLine),n.stringUnicodeGuts.patterns.push(n.escapeSequenceUnicode,n.stringEntity,n.stringBraceFormatting),n.stringRawGuts.patterns.push(n.stringFormatting,n.stringBraceFormatting),n.stringRawBinGuts.patterns.push(n.stringFormatting),n.stringEntity.patterns.push(n.escapeSequence,n.stringLineContinuation,n.stringFormatting),n.fstringGuts.patterns.push(n.escapeSequenceUnicode,n.escapeSequence,n.stringLineContinuation,n.fstringFormatting),n.fstringRawGuts.patterns.push(n.fstringFormatting),n.fstringIllegalSingleBrace.patterns.push(n.fstringTerminatorSingle,n.fExpression),n.fstringFormatting.patterns.push(n.fstringFormattingBraces,n.fstringFormattingSingeBrace),n.classDeclaration.patterns[0].patterns.push(n.className,n.classInheritance),n.className.patterns.splice(0,0,n.illegalObjectName),n.className.patterns.splice(1,0,n.builtinPossibleCallables),n.classInheritance.patterns.splice(4,0,n.illegalNames),n.classInheritance.patterns.splice(5,0,n.classKwarg),n.classInheritance.patterns.splice(6,0,n.callWrapperInheritance),n.classInheritance.patterns.push(n.memberAccessClass,n.inheritanceIdentifier),n.memberAccessClass.patterns.splice(0,0,n.callWrapperInheritance),n.lambda.patterns[2].patterns.splice(2,0,n.lambdaNestedIncomplete),n.lambda.patterns[2].patterns.splice(3,0,n.illegalNames),n.lambda.patterns[2].patterns.splice(6,0,n.backticks),n.lambda.patterns[2].patterns.splice(7,0,n.illegalAnno),n.lambda.patterns[2].patterns.splice(8,0,n.lambdaParameterWithDefault),n.lambda.patterns[2].patterns.push(n.illegalOperator),n.functionDeclaration.patterns.splice(0,0,n.functionDefName),n.functionDeclaration.patterns.splice(1,0,n.parameters),n.functionDeclaration.patterns.push(n.returnAnnotation),n.functionDefName.patterns.splice(0,0,n.illegalObjectName),n.functionDefName.patterns.splice(1,0,n.builtinPossibleCallables),n.parameters.patterns.splice(3,0,n.illegalNames),n.parameters.patterns.splice(4,0,n.illegalObjectName),n.parameters.patterns.splice(5,0,n.parameterSpecial),n.parameters.patterns.push(n.looseDefault,n.annotatedParameter),n.itemAccess.patterns[0].patterns.splice(0,0,n.itemName),n.itemAccess.patterns[0].patterns.splice(1,0,n.itemIndex),n.itemName.patterns.splice(0,0,n.specialVariables),n.itemName.patterns.splice(1,0,n.builtinFunctions),n.decorator.patterns.push(n.decoratorName,n.functionArguments),n.decoratorName.patterns.splice(0,0,n.builtinCallables),n.decoratorName.patterns.splice(1,0,n.illegalObjectName),n.callWrapperInheritance.patterns.push(n.inheritanceName,n.functionArguments),n.inheritanceName.patterns.splice(1,0,n.builtinPossibleCallables),n.functionCall.patterns.push(n.specialVariables,n.functionName,n.functionArguments),n.functionName.patterns.splice(0,0,n.builtinPossibleCallables),n.functionArguments.patterns.splice(3,0,n.illegalNames),n.builtinCallables.patterns.push(n.illegalNames,n.illegalObjectName,n.builtinExceptions,n.builtinFunctions,n.builtinTypes),n.builtinPossibleCallables.patterns.push(n.magicNames),n.regexpBaseExpression.patterns.push(n.regexpQuantifier,n.regexpBaseCommon),n.fregexpBaseExpression.patterns.splice(0,0,n.fregexpQuantifier),n.fregexpBaseExpression.patterns.splice(1,0,n.fstringFormattingBraces),n.fregexpBaseExpression.patterns.push(n.regexpBaseCommon),n.regexpBaseCommon.patterns.push(n.regexpEscapeSequence),n.singleOneRegexpExpression.patterns.splice(1,0,n.singleOneRegexpCharacterSet),n.singleOneRegexpExpression.patterns.splice(2,0,n.singleOneRegexpComments),n.singleOneRegexpExpression.patterns.splice(4,0,n.singleOneRegexpNamedGroup),n.singleOneRegexpExpression.patterns.push(n.singleOneRegexpLookahead,n.singleOneRegexpLookaheadNegative,n.singleOneRegexpLookbehind,n.singleOneRegexpLookbehindNegative,n.singleOneRegexpConditional,n.singleOneRegexpParenthesesNonCapturing,n.singleOneRegexpParentheses),n.singleThreeRegexpExpression.patterns.splice(1,0,n.singleThreeRegexpCharacterSet),n.singleThreeRegexpExpression.patterns.splice(2,0,n.singleThreeRegexpComments),n.singleThreeRegexpExpression.patterns.splice(4,0,n.singleThreeRegexpNamedGroup),n.singleThreeRegexpExpression.patterns.splice(6,0,n.singleThreeRegexpLookahead),n.singleThreeRegexpExpression.patterns.splice(7,0,n.singleThreeRegexpLookaheadNegative),n.singleThreeRegexpExpression.patterns.splice(8,0,n.singleThreeRegexpLookbehind),n.singleThreeRegexpExpression.patterns.splice(9,0,n.singleThreeRegexpLookbehindNegative),n.singleThreeRegexpExpression.patterns.splice(10,0,n.singleThreeRegexpConditional),n.singleThreeRegexpExpression.patterns.splice(11,0,n.singleThreeRegexpParenthesesNonCapturing),n.singleThreeRegexpExpression.patterns.splice(12,0,n.singleThreeRegexpParentheses),n.doubleOneRegexpExpression.patterns.splice(1,0,n.doubleOneRegexpCharacterSet),n.doubleOneRegexpExpression.patterns.splice(2,0,n.doubleOneRegexpComments),n.doubleOneRegexpExpression.patterns.splice(4,0,n.doubleOneRegexpNamedGroup),n.doubleOneRegexpExpression.patterns.push(n.doubleOneRegexpLookahead,n.doubleOneRegexpLookaheadNegative,n.doubleOneRegexpLookbehind,n.doubleOneRegexpLookbehindNegative,n.doubleOneRegexpConditional,n.doubleOneRegexpParenthesesNonCapturing,n.doubleOneRegexpParentheses),n.doubleThreeRegexpExpression.patterns.splice(1,0,n.doubleThreeRegexpCharacterSet),n.doubleThreeRegexpExpression.patterns.splice(2,0,n.doubleThreeRegexpComments),n.doubleThreeRegexpExpression.patterns.splice(4,0,n.doubleThreeRegexpNamedGroup),n.doubleThreeRegexpExpression.patterns.splice(6,0,n.doubleThreeRegexpLookahead),n.doubleThreeRegexpExpression.patterns.splice(7,0,n.doubleThreeRegexpLookaheadNegative),n.doubleThreeRegexpExpression.patterns.splice(8,0,n.doubleThreeRegexpLookbehind),n.doubleThreeRegexpExpression.patterns.splice(9,0,n.doubleThreeRegexpLookbehindNegative),n.doubleThreeRegexpExpression.patterns.splice(10,0,n.doubleThreeRegexpConditional),n.doubleThreeRegexpExpression.patterns.splice(11,0,n.doubleThreeRegexpParenthesesNonCapturing),n.doubleThreeRegexpExpression.patterns.splice(12,0,n.doubleThreeRegexpParentheses),n.stringRawQuotedSingleLine.patterns.splice(0,0,n.stringSingleBadBrace1FormattingRaw),n.stringRawQuotedSingleLine.patterns.splice(1,0,n.stringSingleBadBrace2FormattingRaw),n.stringQuotedSingleLine.patterns.splice(0,0,n.stringSingleBadBrace1FormattingUnicode),n.stringRawQuotedMultiLine.patterns.splice(0,0,n.stringMultiBadBrace1FormattingRaw),n.stringRawQuotedMultiLine.patterns.splice(1,0,n.stringMultiBadBrace2FormattingRaw),n.stringQuotedMultiLine.patterns.splice(0,0,n.stringMultiBadBrace1FormattingUnicode),n.stringQuotedMultiLine.patterns.splice(1,0,n.stringMultiBadBrace2FormattingUnicode),n.fstringFnormQuotedSingleLine.patterns.push(n.fstringSingleBrace,n.fstringSingleCore),n.fstringNormfQuotedSingleLine.patterns.push(n.fstringSingleBrace,n.fstringSingleCore),n.fstringRawQuotedSingleLine.patterns.push(n.fstringSingleBrace,n.fstringRawSingleCore),n.fstringSingleBrace.patterns.splice(0,0,n.fstringTerminatorSingle),n.fstringTerminatorSingle.patterns.push(n.fstringTerminatorSingleTail),n.fstringFnormQuotedMultiLine.patterns.push(n.fstringMultiBrace,n.fstringMultiCore),n.fstringNormfQuotedMultiLine.patterns.push(n.fstringMultiBrace,n.fstringMultiCore),n.fstringRawQuotedMultiLine.patterns.push(n.fstringMultiBrace,n.fstringRawMultiCore),n.fstringMultiBrace.patterns.splice(0,0,n.fstringTerminatorMulti),n.fstringTerminatorMulti.patterns.push(n.fstringTerminatorMultiTail)},1694:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.scene=n.hide=n.window=n.show=n.image=n.zorder=n.onlayer=n.behind=n.withStatement=n.asStatement=n.atStatement=n.conditionals=n.renpyBlockTester=n.pause=n.sayStatements=n.oneLinePython=n.defaultStatement=n.define=n.pythonBlockTester=n.pythonStatements=n.strings=n.stringTags=n.stringTagsBroken=n.stringsInterior=n.hexLiteral=n.escapedUnicodeChar=n.constantPlaceholder=n.escapedChar=n.comments=n.commentsBase=n.codetags=n.regionComment=n.keywords=n.simpleExpression=n.name=n.illegalIdentifiers=n.identifier=n.parenthesizedPython=n.numInt=n.numFloat=n.literal=n.fallbackPatterns=n.fallbackCharacters=n.whitespace=n.newLine=n.invalidToken=n.renpyPythonExpressions=n.renpyOnlyExpressions=n.expressions=n.statements=void 0,n.basePatterns=n.renpyStatements=n.audio=n.stop=n.queue=n.play=n.audioParams=n.audioChannel=n.builtinAudioChannels=n.menu=n.menuSet=n.menuOption=n.call=n.callFrom=n.callPass=n.jump=n.callJumpExpression=n.returnStatements=n.label=n.labelDefName=n.labelAccess=n.labelCall=n.labelName=n.builtinLabels=n.camera=void 0;const a=t(5420);n.statements={patterns:[]},n.expressions={patterns:[]},n.renpyOnlyExpressions={patterns:[]},n.renpyPythonExpressions={patterns:[n.renpyOnlyExpressions]},n.invalidToken={debugName:"invalidToken",token:a.MetaTokenType.Invalid,match:/.+/g},n.newLine={debugName:"newLine",token:a.CharacterTokenType.NewLine,match:/\r\n|\r|\n/g},n.whitespace={debugName:"whitespace",token:a.CharacterTokenType.Whitespace,match:/[ \t]+/g},n.fallbackCharacters={patterns:[n.newLine,n.whitespace,{debugName:"fallbackCharacters.patterns![2]",token:a.CharacterTokenType.OpenParentheses,match:/\(/g},{debugName:"fallbackCharacters.patterns![3]",token:a.CharacterTokenType.CloseParentheses,match:/\)/g},{debugName:"fallbackCharacters.patterns![4]",token:a.CharacterTokenType.OpenBracket,match:/{/g},{debugName:"fallbackCharacters.patterns![5]",token:a.CharacterTokenType.CloseBracket,match:/}/g},{debugName:"fallbackCharacters.patterns![6]",token:a.CharacterTokenType.OpenSquareBracket,match:/\[/g},{debugName:"fallbackCharacters.patterns![7]",token:a.CharacterTokenType.CloseSquareBracket,match:/\]/g},{debugName:"fallbackCharacters.patterns![8]",token:a.CharacterTokenType.Dot,match:/\./g},{debugName:"fallbackCharacters.patterns![9]",token:a.CharacterTokenType.Colon,match:/:/g},{debugName:"fallbackCharacters.patterns![10]",token:a.CharacterTokenType.Semicolon,match:/;/g},{debugName:"fallbackCharacters.patterns![11]",token:a.CharacterTokenType.Comma,match:/,/g},{debugName:"fallbackCharacters.patterns![12]",token:a.CharacterTokenType.Hashtag,match:/#/g},{debugName:"fallbackCharacters.patterns![13]",token:a.CharacterTokenType.Quote,match:/'/g},{debugName:"fallbackCharacters.patterns![14]",token:a.CharacterTokenType.DoubleQuote,match:/"/g},{debugName:"fallbackCharacters.patterns![15]",token:a.CharacterTokenType.BackQuote,match:/`/g},{debugName:"fallbackCharacters.patterns![16]",token:a.CharacterTokenType.Backslash,match:/\\/g},{debugName:"fallbackCharacters.patterns![17]",token:a.CharacterTokenType.ForwardSlash,match:/\//g},{debugName:"fallbackCharacters.patterns![18]",token:a.CharacterTokenType.EqualsSymbol,match:/=/g},{debugName:"fallbackCharacters.patterns![19]",token:a.MetaTokenType.Invalid,match:/\b\w+\b/g},{debugName:"fallbackCharacters.patterns![20]",token:a.CharacterTokenType.Unknown,match:/./g}]},n.fallbackPatterns={patterns:[n.fallbackCharacters]},n.literal={patterns:[{debugName:"literal.patterns![0]",token:a.MetaTokenType.ConstantLiteral,match:/\b(?<!\.)(True|False|None)\b/g}]},n.numFloat={debugName:"numFloat",match:/([\+\-])?(\d+\.?\d*|\.\d+)([eE][\-\+]?\d+)?/dg,captures:{1:{token:a.MetaTokenType.ArithmeticOperator},2:{token:a.LiteralTokenType.Float},3:{token:a.LiteralTokenType.Float}}},n.numInt={debugName:"numInt",token:a.LiteralTokenType.Integer,match:/(?<![\w.])(?:[1-9]+|0+|0([0-9]+)(?![eE.]))\b/dg,captures:{1:{token:a.MetaTokenType.Invalid}}},n.parenthesizedPython={patterns:[{debugName:"parenthesizedPython.patterns![0]",begin:/\(/dg,beginCaptures:{0:{token:a.CharacterTokenType.OpenParentheses}},end:/\)/dg,endCaptures:{0:{token:a.CharacterTokenType.CloseParentheses}},patterns:[]},{debugName:"parenthesizedPython.patterns![1]",begin:/\[/dg,beginCaptures:{0:{token:a.CharacterTokenType.OpenSquareBracket}},end:/\]/dg,endCaptures:{0:{token:a.CharacterTokenType.CloseSquareBracket}},patterns:[]},{debugName:"parenthesizedPython.patterns![2]",begin:/\{/dg,beginCaptures:{0:{token:a.CharacterTokenType.OpenBracket}},end:/\}/dg,endCaptures:{0:{token:a.CharacterTokenType.CloseBracket}},patterns:[]}]},n.identifier={debugName:"identifier",token:a.EntityTokenType.Identifier,match:/\b[\p{XID_Start}_]\p{XID_Continue}*\b/gu},n.illegalIdentifiers={patterns:[{debugName:"illegalIdentifiers.patterns![0]",token:a.MetaTokenType.Invalid,match:/\b(as|at|behind|call|expression|hide|if|in|image|init|jump|menu|onlayer|python|return|scene|show|with|while|zorder)\b/g}]},n.name={patterns:[n.illegalIdentifiers,n.identifier]},n.simpleExpression={debugName:"simpleExpression",token:a.MetaTokenType.SimpleExpression,begin:/[ \t]*/g,end:/(?!\G)(?![.\[\(\{])|$/gm,patterns:[n.literal,n.numFloat,n.identifier,n.parenthesizedPython,n.whitespace]},n.keywords={patterns:[{debugName:"keywords.patterns![0]",token:a.MetaTokenType.ControlFlowKeyword,match:/\b(?<!\.)(?:pass|return|pause|if|elif|else|while|for)\b/g},{debugName:"keywords.patterns![1]",token:a.KeywordTokenType.OtherPython,match:/\b(?<!\.)(define|default|early|hide|in|init|python)\b/g},{debugName:"keywords.patterns![2]",token:a.KeywordTokenType.Other,match:/\b(?<!\.)(?:camera|image|label|layeredimage|menu|nvl[ \t]+clear|play|queue|scene|screen|show|transform|translate|voice(?:[ \t]+sustain)?|window|frame)\b/g},{debugName:"keywords.patterns![3]",token:a.KeywordTokenType.Other,match:/\b(?<!\.)(?:set|expression|at|with|from|style_prefix|spacing|textbutton)\b/g},{debugName:"keywords.patterns![4]",token:a.KeywordTokenType.Other,match:/\b(?<!\.)(?:action)\b/g}]},n.regionComment={debugName:"regionComment",token:a.MetaTokenType.Comment,match:/(?<=^[ \t]*)(#[ \t]*(?:end)?region)\b.*$/dgm,captures:{1:{token:a.MetaTokenType.CommentRegionTag}}},n.codetags={debugName:"codetags",match:/(?:\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\b)/dg,captures:{1:{token:a.MetaTokenType.CommentCodeTag}}},n.commentsBase={debugName:"commentsBase",token:a.MetaTokenType.Comment,begin:/#/dg,beginCaptures:{0:{token:a.CharacterTokenType.Hashtag}},end:/$/gm,patterns:[n.codetags]},n.comments={patterns:[n.regionComment,n.commentsBase]},n.escapedChar={debugName:"escapedChar",match:/(\\")|(\\')|(\\ )|(\\n)|(\\\\)|(\[\[)|({{)/dg,captures:{1:{token:a.EscapedCharacterTokenType.EscDoubleQuote},2:{token:a.EscapedCharacterTokenType.EscQuote},3:{token:a.EscapedCharacterTokenType.EscWhitespace},4:{token:a.EscapedCharacterTokenType.EscNewline},5:{token:a.EscapedCharacterTokenType.EscBackslash},6:{token:a.EscapedCharacterTokenType.EscOpenBracket},7:{token:a.EscapedCharacterTokenType.EscOpenSquareBracket}}},n.constantPlaceholder={debugName:"constantPlaceholder",token:a.MetaTokenType.ConstantCaps,match:/(\[)(.*?)(\])(?![^\[]*?\])/dg,captures:{1:{token:a.MetaTokenType.Placeholder},2:{token:a.MetaTokenType.PythonLine,patterns:[{debugName:"constantPlaceholder.captures![2].patterns![0]",token:a.MetaTokenType.InterpolateFlags,match:/(!)([rstiqulc]+)/dg,captures:{1:{token:a.CharacterTokenType.ExclamationMark},2:{token:a.MetaTokenType.ModifierFlagStorageType}}}]},3:{token:a.MetaTokenType.Placeholder}}},n.escapedUnicodeChar={debugName:"escapedUnicodeChar",match:/(\\U[0-9A-Fa-f]{8})|(\\u[0-9A-Fa-f]{4})|(\\N\{[a-zA-Z ]+\})/dg,captures:{1:{token:a.MetaTokenType.EscapeSequence},2:{token:a.MetaTokenType.EscapeSequence},3:{token:a.MetaTokenType.EscapeSequence}}},n.hexLiteral={patterns:[{debugName:"hexLiteral.patterns![0]",token:a.LiteralTokenType.Color,match:/#(?:[a-f0-9]{8}|[a-f0-9]{6}|[a-f0-9]{3,4})\b/gi},{debugName:"hexLiteral.patterns![1]",token:a.MetaTokenType.Invalid,match:/#[a-f0-9]+\b/gi},{debugName:"hexLiteral.patterns![2]",match:/(#[a-f0-9]*)?(.+?)\b/dgi,captures:{1:{token:a.LiteralTokenType.Color},2:{token:a.MetaTokenType.Invalid}}}]},n.stringsInterior={patterns:[n.newLine,n.escapedChar,n.constantPlaceholder]},n.stringTagsBroken={patterns:[{debugName:"stringTagsBroken.patterns![0]",contentToken:a.MetaTokenType.TaggedString,begin:/({)\s*(u|i|b|s|plain|alt|noalt|art|rb|rt)\s*(})/dg,beginCaptures:{0:{token:a.MetaTokenType.StringTag},1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.CharacterTokenType.CloseBracket}},end:/({\/)\s*(\2)\s*(})/dg,endCaptures:{0:{token:a.MetaTokenType.StringTag},1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.CharacterTokenType.CloseBracket}},patterns:[n.stringsInterior]},{debugName:"stringTagsBroken.patterns![1]",contentToken:a.MetaTokenType.TaggedString,begin:/({)\s*(alpha|cps|k)(=)(?:(\*)|(\-)|(\+))?(\d*(?:.\d+)?)\s*(})/dg,beginCaptures:{0:{token:a.MetaTokenType.StringTag},1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.OperatorTokenType.Assignment},4:{token:a.OperatorTokenType.Multiply},5:{token:a.OperatorTokenType.Minus},6:{token:a.OperatorTokenType.Plus},7:{token:a.MetaTokenType.ConstantNumeric},8:{token:a.CharacterTokenType.CloseBracket}},end:/({\/)\s*(\2)\s*(})/dg,endCaptures:{0:{token:a.MetaTokenType.StringTag},1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.CharacterTokenType.CloseBracket}},patterns:[n.stringsInterior]},{debugName:"stringTagsBroken.patterns![2]",contentToken:a.MetaTokenType.TaggedString,begin:/({)\s*(size)(=)([\-+]?)(\d+)\s*(})/dg,beginCaptures:{0:{token:a.MetaTokenType.StringTag},1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.OperatorTokenType.Assignment},4:{token:a.MetaTokenType.ArithmeticOperator},5:{token:a.LiteralTokenType.Integer},6:{token:a.CharacterTokenType.CloseBracket}},end:/({\/)\s*(\2)\s*(})/dg,endCaptures:{0:{token:a.MetaTokenType.StringTag},1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.CharacterTokenType.CloseBracket}},patterns:[n.stringsInterior]},{debugName:"stringTagsBroken.patterns![3]",token:a.MetaTokenType.StringTag,begin:/({)\s*(font)(=)([\w.]+)\s*(})/dg,beginCaptures:{0:{token:a.MetaTokenType.StringTag},1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.OperatorTokenType.Assignment},4:{token:a.LiteralTokenType.String},5:{token:a.CharacterTokenType.CloseBracket}},end:/({\/)\s*(\2)\s*(})/dg,endCaptures:{0:{token:a.MetaTokenType.StringTag},1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.CharacterTokenType.CloseBracket}},patterns:[n.stringsInterior]},{debugName:"stringTagsBroken.patterns![4]",contentToken:a.MetaTokenType.TaggedString,begin:/({)\s*(color|outlinecolor)(=)(#?[a-zA-Z0-9]+)\s*(})/dg,beginCaptures:{0:{token:a.MetaTokenType.StringTag},1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.OperatorTokenType.Assignment},4:{patterns:[n.hexLiteral]},5:{token:a.CharacterTokenType.CloseBracket}},end:/({\/)\s*(\2)\s*(})/dg,endCaptures:{0:{token:a.MetaTokenType.StringTag},1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.CharacterTokenType.CloseBracket}},patterns:[n.stringsInterior]},{debugName:"stringTagsBroken.patterns![5]",contentToken:a.MetaTokenType.TaggedString,begin:/({)\s*(a)(=)(.*?)\s*(})/dg,beginCaptures:{0:{token:a.MetaTokenType.StringTag},1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.OperatorTokenType.Assignment},4:{token:a.LiteralTokenType.String,patterns:[]},5:{token:a.CharacterTokenType.CloseBracket}},end:/({\/)\s*(\2)\s*(})/dg,endCaptures:{0:{token:a.MetaTokenType.StringTag},1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.CharacterTokenType.CloseBracket}},patterns:[n.stringsInterior]}]},n.stringTags={patterns:[{debugName:"stringTags.patterns![0]",token:a.MetaTokenType.StringTag,match:/({)\s*(nw|done|fast|p|w|clear)\s*(})/dg,captures:{1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.CharacterTokenType.CloseBracket}}},{debugName:"stringTags.patterns![1]",token:a.MetaTokenType.StringTag,match:/({)\s*(p|w)(=)(\+?)(\d*(?:.\d+)?)\s*(})/dg,captures:{1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.OperatorTokenType.Assignment},4:{token:a.OperatorTokenType.Plus},5:{token:a.LiteralTokenType.Float},6:{token:a.CharacterTokenType.CloseBracket}}},{debugName:"stringTags.patterns![2]",token:a.MetaTokenType.StringTag,match:/({)\s*(v?space)(=)(\+?)(\d+)\s*(})/dg,captures:{1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.OperatorTokenType.Assignment},4:{token:a.OperatorTokenType.Plus},5:{token:a.LiteralTokenType.Integer},6:{token:a.CharacterTokenType.CloseBracket}}},{debugName:"stringTags.patterns![3]",token:a.MetaTokenType.StringTag,match:/({)\s*(#)\s*(.*?)\s*(})/dg,captures:{1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.CharacterTokenType.Hashtag},3:{token:a.MetaTokenType.Comment},4:{token:a.CharacterTokenType.CloseBracket}}},{debugName:"stringTags.patterns![4]",token:a.MetaTokenType.StringTag,match:/({)\s*(image)(=)([\w.]+)\s*(})/dg,captures:{1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.OperatorTokenType.Assignment},4:{token:a.LiteralTokenType.String},5:{token:a.CharacterTokenType.CloseBracket}}},{debugName:"stringTags.patterns![5]",match:/({)\s*(u|i|b|s|plain|alt|noalt|art|rb|rt)\s*(})/dg,captures:{0:{token:a.MetaTokenType.StringTag},1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.CharacterTokenType.CloseBracket}}},{debugName:"stringTags.patterns![6]",match:/({)\s*(alpha|cps|k)(=)(?:(\*)|(\-)|(\+))?(\d*(?:.\d+)?)\s*(})/dg,captures:{0:{token:a.MetaTokenType.StringTag},1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.OperatorTokenType.Assignment},4:{token:a.OperatorTokenType.Multiply},5:{token:a.OperatorTokenType.Minus},6:{token:a.OperatorTokenType.Plus},7:{token:a.MetaTokenType.ConstantNumeric},8:{token:a.CharacterTokenType.CloseBracket}}},{debugName:"stringTags.patterns![7]",match:/({)\s*(size)(=)([\-+]?)(\d+)\s*(})/dg,captures:{0:{token:a.MetaTokenType.StringTag},1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.OperatorTokenType.Assignment},4:{token:a.MetaTokenType.ArithmeticOperator},5:{token:a.LiteralTokenType.Integer},6:{token:a.CharacterTokenType.CloseBracket}}},{debugName:"stringTags.patterns![8]",token:a.MetaTokenType.StringTag,match:/({)\s*(font)(=)([\w.]+)\s*(})/dg,captures:{0:{token:a.MetaTokenType.StringTag},1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.OperatorTokenType.Assignment},4:{token:a.LiteralTokenType.String},5:{token:a.CharacterTokenType.CloseBracket}}},{debugName:"stringTags.patterns![9]",match:/({)\s*(color|outlinecolor)(=)(#?[a-zA-Z0-9]+)\s*(})/dg,captures:{0:{token:a.MetaTokenType.StringTag},1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.OperatorTokenType.Assignment},4:{patterns:[n.hexLiteral]},5:{token:a.CharacterTokenType.CloseBracket}}},{debugName:"stringTags.patterns![10]",match:/({)\s*(a)(=)(.*?)\s*(})/dg,captures:{0:{token:a.MetaTokenType.StringTag},1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.OperatorTokenType.Assignment},4:{token:a.LiteralTokenType.String},5:{token:a.CharacterTokenType.CloseBracket}}},{debugName:"stringTags.patterns![11]",match:/({)[ \t]*(\w+)\b(?:(=)(.*?))?\s*(})((?:.|\R)+?)\s*({\/)\s*(\2)\s*(})/dg,captures:{1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.OperatorTokenType.Assignment},4:{token:a.MetaTokenType.ConstantCaps},5:{token:a.CharacterTokenType.CloseBracket},6:{token:a.MetaTokenType.TaggedString,patterns:[n.stringsInterior]},7:{token:a.CharacterTokenType.OpenBracket},8:{token:a.EntityTokenType.TagName},9:{token:a.CharacterTokenType.CloseBracket}}},{debugName:"stringTags.patterns![12]",match:/({)\s*(\w*)(?:(=)(.*?))?\s*(})/dg,captures:{0:{token:a.MetaTokenType.StringTag},1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.OperatorTokenType.Assignment},4:{token:a.MetaTokenType.ConstantCaps},5:{token:a.CharacterTokenType.CloseBracket}}},{debugName:"stringTags.patterns![13]",match:/({\/)\s*(\w*?)\b\s*(})/dg,captures:{0:{token:a.MetaTokenType.StringTag},1:{token:a.CharacterTokenType.OpenBracket},2:{token:a.EntityTokenType.TagName},3:{token:a.CharacterTokenType.CloseBracket}}}]},n.strings={debugName:"strings",token:a.LiteralTokenType.String,begin:/"""|"|'''|'|```|`/dg,beginCaptures:{0:{token:a.MetaTokenType.StringBegin}},end:/(?<![^\\]\\)(((?<=\0)\0)|\0)/dg,endCaptures:{1:{token:a.MetaTokenType.StringEnd},2:{token:a.MetaTokenType.EmptyString}},patterns:[n.stringsInterior]},n.pythonStatements={patterns:[{debugName:"pythonStatements.patterns![0]",match:/(?<=^[ \t]*)(init)([ \t]+)(offset)([ \t]*)(=)([ \t]*)(-)?([^#]*?)$/dgm,captures:{1:{token:a.KeywordTokenType.Init},2:{token:a.CharacterTokenType.Whitespace},3:{token:a.KeywordTokenType.Offset},4:{token:a.CharacterTokenType.Whitespace},5:{token:a.OperatorTokenType.Assignment},6:{token:a.CharacterTokenType.Whitespace},7:{token:a.OperatorTokenType.Minus},8:{patterns:[n.numInt,n.invalidToken]}}},{debugName:"pythonStatements.patterns![1]",contentToken:a.MetaTokenType.PythonBlock,begin:/(?<=(^[ \t]*))(?:(init)(?:([ \t]+)(-)?(\d+))?([ \t]+))?(python)(.*)?(:)/dgm,beginCaptures:{2:{token:a.KeywordTokenType.Init},3:{token:a.CharacterTokenType.Whitespace},4:{token:a.OperatorTokenType.Minus},5:{token:a.LiteralTokenType.Integer},6:{token:a.CharacterTokenType.Whitespace},7:{token:a.KeywordTokenType.Python},8:{token:a.MetaTokenType.Arguments,patterns:[{debugName:"pythonStatements.patterns![1].beginCaptures![8].patterns![0]",begin:/\b(in)\b/dg,beginCaptures:{1:{token:a.KeywordTokenType.In}},end:/(?!\G)(?<=[^ \t])|$/gm,patterns:[{debugName:"pythonStatements.patterns![1].beginCaptures![8].patterns![0].patterns![0]",token:a.EntityTokenType.NamespaceName,match:/\b[\p{XID_Start}_]\p{XID_Continue}*\b/gu},n.fallbackPatterns]},{debugName:"pythonStatements.patterns![1].beginCaptures![8].patterns![1]",match:/\b(hide)|(early)|(in)\b/dg,captures:{1:{token:a.KeywordTokenType.Hide},2:{token:a.KeywordTokenType.Early},3:{token:a.KeywordTokenType.In}}}]},9:{token:a.CharacterTokenType.Colon}},end:/^(?=(?!\1)[ \t]*[^\s#]|\1[^\s#])/gm,patterns:[]}]},n.pythonBlockTester={patterns:[{debugName:"pythonBlockTester.patterns![0]",contentToken:a.MetaTokenType.PythonExpression,begin:/(?<=(^[ \t]*)(?:image)\b.*?)(=)/dgm,beginCaptures:{2:{token:a.OperatorTokenType.Assignment}},end:/^(?=(?!\1)[ \t]*[^\s#]|\1[^\s#])/gm,patterns:[]},{debugName:"pythonBlockTester.patterns![1]",contentToken:a.MetaTokenType.PythonBlock,begin:/(?<=(^[ \t]*).*?python\b\s*)(:)/dgm,beginCaptures:{2:{token:a.CharacterTokenType.Colon}},end:/^(?=(?!\1)[ \t]*[^\s#]|\1[^\s#])/gm,patterns:[]}]},n.define={debugName:"define",begin:/(?<=^[ \t]*)(define)\b/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Define}},end:/$/gm,patterns:[n.numInt,n.strings,{debugName:"define.patterns![3]",contentToken:a.MetaTokenType.PythonExpression,begin:/(\+=)|(\|=)|(=)/dg,beginCaptures:{1:{token:a.OperatorTokenType.PlusAssign},2:{token:a.MetaTokenType.BitwiseOperatorKeyword},3:{token:a.OperatorTokenType.Assignment}},end:/$/gm,patterns:[n.whitespace]},n.fallbackCharacters]},n.defaultStatement={debugName:"defaultStatement",begin:/(?<=^[ \t]*)(default)\b/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Default}},end:/$/gm,patterns:[n.strings,{debugName:"defaultStatement.patterns![2]",contentToken:a.MetaTokenType.PythonExpression,begin:/=/dg,beginCaptures:{0:{token:a.OperatorTokenType.Assignment}},end:/$/gm,patterns:[n.whitespace]},n.whitespace]},n.oneLinePython={debugName:"oneLinePython",begin:/(?<=^[ \t]*)(\$)(?=[ \t]|$)/dgm,beginCaptures:{1:{token:a.KeywordTokenType.DollarSign}},end:/$/gm,patterns:[n.strings,n.fallbackPatterns]},n.sayStatements={patterns:[{debugName:"sayStatements.patterns![0]",token:a.MetaTokenType.SayStatement,contentToken:a.LiteralTokenType.String,begin:/(?<=^[ \t]+)(?:([a-zA-Z_]\w*)\b|"([a-zA-Z_]\w*)\b")((?:[ \t]+(?:@|\w+))*)?[ \t]*("""|"|'''|'|```|`)/dgm,beginCaptures:{1:{token:a.EntityTokenType.Identifier,patterns:[{debugName:"sayStatements.patterns![0].beginCaptures![1].patterns![0]",token:a.KeywordTokenType.Extend,match:/extend/g},{debugName:"sayStatements.patterns![0].beginCaptures![1].patterns![1]",token:a.KeywordTokenType.Voice,match:/voice/g},{debugName:"sayStatements.patterns![0].beginCaptures![1].patterns![2]",token:a.EntityTokenType.Identifier,match:/adv|nvl|narrator|name_only|centered|vcentered/g}]},2:{token:a.MetaTokenType.CharacterNameString},3:{token:a.MetaTokenType.Arguments,patterns:[{debugName:"sayStatements.patterns![0].beginCaptures![3].patterns![0]",token:a.KeywordTokenType.At,match:/@/g}]},4:{token:a.MetaTokenType.StringBegin}},end:/(?<![^\\]\\)(((?<=\4)\4)|\4)[ \t]*(\(.*?\)(?![^\(]*?\)))?/dg,endCaptures:{1:{token:a.MetaTokenType.StringEnd},2:{token:a.MetaTokenType.EmptyString},3:{patterns:[]}},patterns:[n.stringsInterior]},{debugName:"sayStatements.patterns![1]",token:a.MetaTokenType.SayNarrator,contentToken:a.LiteralTokenType.String,begin:/(?<=^[ \t]+)("""|"|'''|'|```|`)/dgm,beginCaptures:{1:{token:a.MetaTokenType.StringBegin}},end:/(?<![^\\]\\)(((?<=\1)\1)|\1)[ \t]*(\(.*?\)(?![^\(]*?\)))?/dg,endCaptures:{1:{token:a.MetaTokenType.StringEnd},2:{token:a.MetaTokenType.EmptyString},3:{patterns:[]}},patterns:[n.stringsInterior]}]},n.pause={debugName:"pause",token:a.MetaTokenType.PauseStatement,contentToken:a.MetaTokenType.PauseParameters,begin:/(?<=^[ \t]+)(pause)\b/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Pause}},end:/(?=#)|$/gm,patterns:[n.simpleExpression]},n.renpyBlockTester={debugName:"renpyBlockTester",contentToken:a.MetaTokenType.RenpyBlock,begin:/(?<=(^[ \t]*)(?:if|elif|else|for|while)\b.*?)(:)/dgm,beginCaptures:{2:{token:a.CharacterTokenType.Colon}},end:/^(?=(?!\1)[ \t]*[^\s#]|\1[^\s#])/gm,patterns:[]},n.conditionals={debugName:"conditionals",begin:/(?<=^[ \t]+)(if|elif|else|while|for)\b/dgm,beginCaptures:{1:{token:a.MetaTokenType.ControlFlowKeyword}},end:/$|^/gm,patterns:[n.renpyBlockTester,n.fallbackPatterns]},n.atStatement={debugName:"atStatement",token:a.MetaTokenType.AtStatement,contentToken:a.MetaTokenType.AtParameters,begin:/\b(?!\.)(at)\b/dg,beginCaptures:{1:{token:a.KeywordTokenType.At}},end:/(?=\b(at|as|behind|onlayer|expression|with|zorder)\b|#|=|:)|$/gm,patterns:[n.simpleExpression]},n.asStatement={debugName:"asStatement",token:a.MetaTokenType.AsStatement,contentToken:a.MetaTokenType.AsParameters,begin:/\b(?!\.)(as)\b/dg,beginCaptures:{1:{token:a.KeywordTokenType.As}},end:/(?=\b(at|as|behind|onlayer|expression|with|zorder)\b|#|=|:)|$/gm,patterns:[n.whitespace,n.simpleExpression]},n.withStatement={debugName:"withStatement",token:a.MetaTokenType.WithStatement,contentToken:a.MetaTokenType.WithParameters,begin:/\b(?!\.)(with)\b/dg,beginCaptures:{1:{token:a.KeywordTokenType.With}},end:/(?=\b(at|as|behind|onlayer|expression|with|zorder)\b|#|=|:)|$/gm,patterns:[n.whitespace,n.simpleExpression]},n.behind={debugName:"behind",token:a.MetaTokenType.BehindStatement,contentToken:a.MetaTokenType.BehindParameters,begin:/\b(?!\.)(behind)\b/dg,beginCaptures:{1:{token:a.KeywordTokenType.Behind}},end:/(?=\b(at|as|behind|onlayer|expression|with|zorder)\b|#|=|:)|$/gm,patterns:[n.whitespace,n.simpleExpression]},n.onlayer={debugName:"onlayer",token:a.MetaTokenType.OnlayerStatement,contentToken:a.MetaTokenType.OnlayerParameters,begin:/\b(?!\.)(onlayer)\b/dg,beginCaptures:{1:{token:a.KeywordTokenType.Onlayer}},end:/(?=\b(at|as|behind|onlayer|expression|with|zorder)\b|#|=|:)|$/gm,patterns:[n.whitespace,n.simpleExpression]},n.zorder={debugName:"zorder",token:a.MetaTokenType.ZorderStatement,contentToken:a.MetaTokenType.ZorderParameters,begin:/\b(?!\.)(zorder)\b/dg,beginCaptures:{1:{token:a.KeywordTokenType.Zorder}},end:/(?=\b(at|as|behind|onlayer|expression|with|zorder)\b|#|=|:)|$/gm,patterns:[n.whitespace,n.simpleExpression]},n.image={patterns:[{debugName:"image.patterns![0]",token:a.MetaTokenType.ImageStatement,begin:/(?<=^[ \t]*)(image)\b[ \t]*/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Image}},end:/(?=\b(at|with)\b|#|=|:)|$/gm,patterns:[n.strings,{debugName:"image.patterns![0].patterns![1]",token:a.EntityTokenType.ImageName,match:/\b(?:[a-zA-Z_0-9]+)\b[ \t]*/g}]},n.atStatement,n.withStatement]},n.show={patterns:[{debugName:"show.patterns![0]",token:a.MetaTokenType.ShowStatement,begin:/(?<=^[ \t]*)(show)\b/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Show}},end:/(?=\b(at|as|behind|onlayer|expression|with|zorder)\b|#|:)|$/gm,patterns:[n.strings,{debugName:"show.patterns![0].patterns![1]",token:a.KeywordTokenType.Layer,match:/\b(layer)\b/g},{debugName:"show.patterns![0].patterns![2]",token:a.EntityTokenType.ImageName,match:/\b(?:[a-zA-Z_0-9]+)\b/g},n.whitespace]},n.atStatement,n.asStatement,n.withStatement,n.behind,n.onlayer,n.zorder,n.whitespace]},n.window={patterns:[{debugName:"window.patterns![0]",token:a.MetaTokenType.ShowStatement,begin:/(?<=^[ \t]*)(window)/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Window}},end:/$/gm,patterns:[{debugName:"window.patterns![0].patterns![0]",token:a.KeywordTokenType.Show,match:/\b(show)\b/g},{debugName:"window.patterns![0].patterns![1]",token:a.KeywordTokenType.Hide,match:/\b(hide)\b/g},n.whitespace,n.simpleExpression]}]},n.hide={patterns:[{debugName:"hide.patterns![0]",token:a.MetaTokenType.HideStatement,begin:/(?<=^[ \t]*)(hide)\b[ \t]*/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Hide}},end:/(?=\b(behind|expression|with|zorder)\b|#)|$/gm,patterns:[n.strings,{debugName:"hide.patterns![0].patterns![1]",token:a.EntityTokenType.ImageName,match:/\b(?:[a-zA-Z_0-9]+)\b[ \t]*/g}]},n.withStatement,n.behind,n.zorder]},n.scene={patterns:[{debugName:"scene.patterns![0]",token:a.MetaTokenType.SceneStatement,begin:/(?<=^[ \t]*)(scene)\b[ \t]*/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Scene}},end:/(?=\b(at|as|behind|onlayer|expression|with|zorder)\b|#|:)|$/gm,patterns:[n.strings,{debugName:"scene.patterns![0].patterns![1]",token:a.EntityTokenType.ImageName,match:/\b(?:[a-zA-Z_0-9]+)\b[ \t]*/g}]},n.withStatement,n.behind,n.onlayer,n.zorder]},n.camera={patterns:[{debugName:"camera.patterns![0]",token:a.MetaTokenType.CameraStatement,begin:/(?<=^[ \t]*)(camera)\b[ \t]*/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Camera}},end:/(?=\b(at|with)\b|#|:)|$/gm,patterns:[{debugName:"camera.patterns![0].patterns![0]",token:a.EntityTokenType.ImageName,match:/\b(?:[a-zA-Z_0-9]+)\b[ \t]*/g}]},n.atStatement,n.withStatement]},n.builtinLabels={debugName:"builtinLabels",token:a.EntityTokenType.FunctionName,match:/(?<!\.)\b(?:start|quit|after_load|splashscreen|before_main_menu|main_menu|after_warp|hide_windows)\b/g},n.labelName={patterns:[n.builtinLabels,{debugName:"labelName.patterns![2]",token:a.EntityTokenType.FunctionName,match:/\b(?:[a-zA-Z_]\w*)\b/g}]},n.labelCall={debugName:"labelCall",token:a.MetaTokenType.LabelCall,begin:/\b(?=([a-zA-Z_]\w*)\s*(\())/g,end:/(\))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses}},patterns:[n.labelName]},n.labelAccess={debugName:"labelAccess",token:a.MetaTokenType.LabelAccess,begin:/(\.)\s*(?!\.)/dg,beginCaptures:{1:{token:a.CharacterTokenType.Dot}},end:/(?<=\S)(?=\W)|(^|(?<=\s))(?=[^\\\w\s])|$/gm,patterns:[n.labelCall,n.labelName]},n.labelDefName={patterns:[n.builtinLabels,{debugName:"labelDefName.patterns![2]",match:/(?<=^|[ \t])(\b(?:[a-zA-Z_]\w*)\b)?(\.)?(\b(?:[a-zA-Z_]\w*)\b)/dgm,captures:{1:{token:a.EntityTokenType.FunctionName},2:{token:a.CharacterTokenType.Dot},3:{token:a.EntityTokenType.FunctionName}}}]},n.label={debugName:"label",token:a.MetaTokenType.LabelStatement,match:/(?<=^[ \t]*)(label)\b[ \t]*(.*?)(?:[ \t]*(hide))?(:)/dgm,captures:{1:{token:a.KeywordTokenType.Label},2:{patterns:[n.labelDefName,n.invalidToken]},3:{token:a.KeywordTokenType.Hide},4:{token:a.CharacterTokenType.Colon}}},n.returnStatements={debugName:"returnStatements",begin:/(?<=^[ \t]+)(return)\b/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Return}},end:/$/gm,patterns:[n.renpyOnlyExpressions]},n.callJumpExpression={debugName:"callJumpExpression",begin:/\b(?<!\.)(expression)\b/dg,beginCaptures:{1:{token:a.KeywordTokenType.Expression}},end:/(?=\b(?<!\.)(?:pass|from)\b)|$/gm,patterns:[n.renpyOnlyExpressions]},n.jump={debugName:"jump",token:a.MetaTokenType.JumpStatement,begin:/(?<=^[ \t]+)(jump)\b[ \t]*/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Jump}},end:/(?=#)|$/dgm,endCaptures:{1:{token:a.MetaTokenType.Invalid}},patterns:[n.callJumpExpression,{debugName:"jump.patterns![1]",begin:/(?=[a-zA-Z_.])/g,end:/(?![a-zA-Z_.])(?![ \t]*\.[ \t]*)/g,patterns:[n.labelAccess,n.labelName]}]},n.callPass={debugName:"callPass",begin:/\b(?<!\.)(pass)\b(?=[ \t]*\()/dg,beginCaptures:{1:{token:a.KeywordTokenType.Pass}},end:/(\))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses}},patterns:[n.whitespace]},n.callFrom={debugName:"callFrom",token:a.MetaTokenType.FromClause,contentToken:a.MetaTokenType.Arguments,begin:/\b(?<!\.)(from)\b/dg,beginCaptures:{1:{token:a.KeywordTokenType.From}},end:/(?!\G)(?<=[^ \t])|$/gm,patterns:[n.labelName,n.fallbackPatterns]},n.call={debugName:"call",token:a.MetaTokenType.CallStatement,contentToken:a.MetaTokenType.Arguments,begin:/(?<=^[ \t]+)(call)\b/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Call}},end:/$/dgm,endCaptures:{1:{token:a.MetaTokenType.Invalid}},patterns:[n.callJumpExpression,n.callPass,n.callFrom,{debugName:"call.patterns![3]",token:a.MetaTokenType.FromClause,begin:/(?<=call[ \t]+)(screen)\b/dg,beginCaptures:{1:{token:a.KeywordTokenType.Screen}},end:/(?!\G)(?<=[^ \t])/g,patterns:[{debugName:"call.patterns![3].patterns![0]",begin:/(?<=screen[ \t]+)(?=[a-zA-Z_.])/g,end:/(?![a-zA-Z_.])(?![ \t]*\.[ \t]*)/g,patterns:[n.labelCall,n.labelAccess,n.labelName]},n.whitespace]},{debugName:"call.patterns![4]",begin:/(?<=call[ \t]+)(?=[a-zA-Z_.])/g,end:/(?![a-zA-Z_.])(?![ \t]*\.[ \t]*)/g,patterns:[n.labelCall,n.labelAccess,n.labelName]},n.whitespace,n.comments,{debugName:"call.patterns![7]",token:a.MetaTokenType.Invalid,match:/[^ \t]+/g}]},n.menuOption={debugName:"menuOption",contentToken:a.MetaTokenType.MenuOptionBlock,begin:/(?<=(^[ \t]+))((?:".*")|(?:'.*')|(?:""".*"""))(.+)?(:)/dgm,beginCaptures:{2:{token:a.MetaTokenType.MenuOption,patterns:[n.strings]},3:{token:a.MetaTokenType.PythonLine,patterns:[{debugName:"menuOption.beginCaptures![3].patterns![1]",begin:/\b(if)\b/dg,beginCaptures:{1:{token:a.KeywordTokenType.If}},end:/(?=#|:)|$/gm,patterns:[]}]},4:{token:a.CharacterTokenType.Colon}},end:/^(?=(?!\1)[ \t]*[^\s#]|\1[^\s#])/gm,patterns:[]},n.menuSet={debugName:"menuSet",contentToken:a.MetaTokenType.PythonLine,begin:/(?<=^[ \t]+)(set)\b/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Set}},end:/$/gm,patterns:[]},n.menu={debugName:"menu",token:a.MetaTokenType.MenuStatement,contentToken:a.MetaTokenType.MenuBlock,begin:/(?<=(^[ \t]*))(menu)[ \t]*(.+)?(:)/dgm,beginCaptures:{2:{token:a.KeywordTokenType.Def},3:{patterns:[{debugName:"menu.beginCaptures![3].patterns![0]",token:a.EntityTokenType.FunctionName,match:/[a-zA-Z_.]\w*/g},{debugName:"menu.beginCaptures![3].patterns![1]",token:a.MetaTokenType.FunctionCall,begin:/(?<=\bmenu\s*)(?=\()/g,end:/(\))/dg,endCaptures:{1:{token:a.CharacterTokenType.CloseParentheses}},patterns:[]}]},4:{token:a.CharacterTokenType.Colon}},end:/^(?=(?!\1)[ \t]*[^\s#]|\1[^\s#])/gm,patterns:[n.comments,n.menuOption,n.sayStatements,n.menuSet,n.fallbackCharacters]},n.builtinAudioChannels={debugName:"builtinAudioChannels",token:a.MetaTokenType.BuiltinType,match:/(?<!\.)\b(?:music|sound|voice|audio)\b/g},n.audioChannel={patterns:[n.builtinAudioChannels,{debugName:"audioChannel.patterns![1]",token:a.EntityTokenType.AudioName,match:/.+/g}]},n.audioParams={patterns:[{debugName:"audioParams.patterns![0]",token:a.KeywordTokenType.OtherAudio,match:/\b(?<!\.)(?:fadeout|fadein|volume|loop|noloop)\b/g}]},n.play={patterns:[{debugName:"play.patterns![0]",token:a.MetaTokenType.PlayAudioStatement,begin:/(?<=^[ \t]*)(play)\b[ \t]+\b([a-zA-Z_0-9]*)\b/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Play},2:{patterns:[n.audioChannel]}},end:/(?=#)|$/gm,patterns:[n.strings,n.audioParams,n.whitespace]}]},n.queue={patterns:[{debugName:"queue.patterns![0]",token:a.MetaTokenType.QueueAudioStatement,begin:/(?<=^[ \t]*)(queue)\b[ \t]+\b([a-zA-Z_0-9]*)\b/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Queue},2:{patterns:[n.audioChannel]}},end:/(?=#)|$/gm,patterns:[n.strings,n.audioParams,n.whitespace]}]},n.stop={patterns:[{debugName:"stop.patterns![0]",token:a.MetaTokenType.StopAudioStatement,begin:/(?<=^[ \t]*)(stop)\b[ \t]+\b([a-zA-Z_0-9]*)\b/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Stop},2:{patterns:[n.audioChannel]}},end:/(?=#)|$/gm,patterns:[{debugName:"stop.patterns![0].patterns![0]",token:a.KeywordTokenType.Fadeout,match:/\b(?<!\.)(?:fadeout)\b/g},n.whitespace]}]},n.audio={patterns:[n.play,n.queue,n.stop]},n.renpyStatements={patterns:[n.label,n.menu,n.image,n.audio,n.pause,n.scene,n.camera,n.window,n.show,n.hide,n.withStatement,n.returnStatements,n.jump,n.call]},n.basePatterns={patterns:[n.statements,n.expressions]},n.statements.patterns.push(n.renpyStatements,n.pythonStatements,n.conditionals,n.keywords,n.sayStatements),n.expressions.patterns.push(n.renpyPythonExpressions,n.fallbackCharacters),n.renpyOnlyExpressions.patterns.push(n.comments,n.strings,n.literal),n.fallbackPatterns.patterns.splice(0,0,n.comments),n.simpleExpression.patterns.splice(7,0,n.comments),n.stringsInterior.patterns.splice(2,0,n.stringTags),n.pythonStatements.patterns.push(n.define,n.defaultStatement,n.oneLinePython,n.pythonBlockTester),n.renpyBlockTester.patterns.push(n.basePatterns),n.menuOption.patterns.push(n.basePatterns)},5420:(e,n)=>{var t,a,i,o,s,r,l,h;Object.defineProperty(n,"__esModule",{value:!0}),n.MetaTokenType=n.EscapedCharacterTokenType=n.CharacterTokenType=n.OperatorTokenType=n.LiteralTokenType=n.EntityTokenType=n.KeywordTokenType=n.TokenTypeIndex=void 0,function(e){e[e.Error=0]="Error",e[e.KeywordStart=1]="KeywordStart",e[e.EntityStart=1001]="EntityStart",e[e.ConstantStart=2001]="ConstantStart",e[e.OperatorsStart=3001]="OperatorsStart",e[e.CharactersStart=4001]="CharactersStart",e[e.EscapedCharacterStart=5001]="EscapedCharacterStart",e[e.MetaStart=6001]="MetaStart",e[e.DeprecatedTokenID=9997]="DeprecatedTokenID",e[e.UnknownCharacterID=9998]="UnknownCharacterID",e[e.InvalidTokenID=9999]="InvalidTokenID"}(t||(n.TokenTypeIndex=t={})),function(e){e[e.Init=1]="Init",e[e.Offset=2]="Offset",e[e.Python=3]="Python",e[e.Hide=4]="Hide",e[e.Early=5]="Early",e[e.Define=6]="Define",e[e.Default=7]="Default",e[e.Label=8]="Label",e[e.Menu=9]="Menu",e[e.Pause=10]="Pause",e[e.Style=11]="Style",e[e.Screen=12]="Screen",e[e.Scene=13]="Scene",e[e.Camera=14]="Camera",e[e.Show=15]="Show",e[e.Image=16]="Image",e[e.LayeredImage=17]="LayeredImage",e[e.Window=18]="Window",e[e.Frame=19]="Frame",e[e.Transform=20]="Transform",e[e.Translate=21]="Translate",e[e.Extend=22]="Extend",e[e.NVLClear=23]="NVLClear",e[e.Voice=24]="Voice",e[e.Sound=25]="Sound",e[e.Play=26]="Play",e[e.Queue=27]="Queue",e[e.Stop=28]="Stop",e[e.Fadeout=29]="Fadeout",e[e.Set=30]="Set",e[e.Expression=31]="Expression",e[e.Animation=32]="Animation",e[e.From=33]="From",e[e.Time=34]="Time",e[e.Repeat=35]="Repeat",e[e.DollarSign=36]="DollarSign",e[e.Sensitive=37]="Sensitive",e[e.Text=38]="Text",e[e.Other=39]="Other",e[e.OtherPython=40]="OtherPython",e[e.OtherAudio=41]="OtherAudio",e[e.Layer=42]="Layer",e[e.Take=43]="Take",e[e.Del=44]="Del",e[e.Clear=45]="Clear",e[e.Variant=46]="Variant",e[e.Vbox=47]="Vbox",e[e.Hbox=48]="Hbox",e[e.At=49]="At",e[e.As=50]="As",e[e.With=51]="With",e[e.Onlayer=52]="Onlayer",e[e.Zorder=53]="Zorder",e[e.Behind=54]="Behind",e[e.If=55]="If",e[e.Elif=56]="Elif",e[e.Else=57]="Else",e[e.In=58]="In",e[e.For=59]="For",e[e.While=60]="While",e[e.Pass=61]="Pass",e[e.Return=62]="Return",e[e.Jump=63]="Jump",e[e.Call=64]="Call",e[e.Contains=65]="Contains",e[e.Parallel=66]="Parallel",e[e.Block=67]="Block",e[e.Choice=68]="Choice",e[e.Warp=69]="Warp",e[e.Circles=70]="Circles",e[e.Clockwise=71]="Clockwise",e[e.Counterclockwise=72]="Counterclockwise",e[e.Event=73]="Event",e[e.On=74]="On",e[e.Function=75]="Function",e[e.Import=76]="Import",e[e.Class=77]="Class",e[e.Metaclass=78]="Metaclass",e[e.Lambda=79]="Lambda",e[e.Async=80]="Async",e[e.Def=81]="Def",e[e.Global=82]="Global",e[e.Nonlocal=83]="Nonlocal"}(a||(n.KeywordTokenType=a={})),function(e){e[e.ClassName=1001]="ClassName",e[e.InheritedClassName=1002]="InheritedClassName",e[e.TypeName=1003]="TypeName",e[e.NamespaceName=1004]="NamespaceName",e[e.FunctionName=1005]="FunctionName",e[e.TagName=1006]="TagName",e[e.Identifier=1007]="Identifier",e[e.StyleName=1008]="StyleName",e[e.ImageName=1009]="ImageName",e[e.TextName=1010]="TextName",e[e.AudioName=1011]="AudioName",e[e.CharacterName=1012]="CharacterName",e[e.EventName=1013]="EventName",e[e.PropertyName=1014]="PropertyName"}(i||(n.EntityTokenType=i={})),function(e){e[e.String=2001]="String",e[e.UnquotedString=2002]="UnquotedString",e[e.Color=2003]="Color",e[e.Integer=2004]="Integer",e[e.Float=2005]="Float",e[e.Boolean=2006]="Boolean"}(o||(n.LiteralTokenType=o={})),function(e){e[e.Plus=3001]="Plus",e[e.Minus=3002]="Minus",e[e.Multiply=3003]="Multiply",e[e.Divide=3004]="Divide",e[e.Modulo=3005]="Modulo",e[e.Exponentiate=3006]="Exponentiate",e[e.FloorDivide=3007]="FloorDivide",e[e.BitwiseAnd=3008]="BitwiseAnd",e[e.BitwiseOr=3009]="BitwiseOr",e[e.BitwiseXOr=3010]="BitwiseXOr",e[e.BitwiseNot=3011]="BitwiseNot",e[e.BitwiseLeftShift=3012]="BitwiseLeftShift",e[e.BitwiseRightShift=3013]="BitwiseRightShift",e[e.Assignment=3014]="Assignment",e[e.PlusAssign=3015]="PlusAssign",e[e.MinusAssign=3016]="MinusAssign",e[e.MultiplyAssign=3017]="MultiplyAssign",e[e.DivideAssign=3018]="DivideAssign",e[e.ModuloAssign=3019]="ModuloAssign",e[e.ExponentiateAssign=3020]="ExponentiateAssign",e[e.FloorDivideAssign=3021]="FloorDivideAssign",e[e.BitwiseAndAssign=3022]="BitwiseAndAssign",e[e.BitwiseOrAssign=3023]="BitwiseOrAssign",e[e.BitwiseXOrAssign=3024]="BitwiseXOrAssign",e[e.BitwiseLeftShiftAssign=3025]="BitwiseLeftShiftAssign",e[e.BitwiseRightShiftAssign=3026]="BitwiseRightShiftAssign",e[e.Equals=3027]="Equals",e[e.NotEquals=3028]="NotEquals",e[e.GreaterThan=3029]="GreaterThan",e[e.LessThan=3030]="LessThan",e[e.GreaterThanEquals=3031]="GreaterThanEquals",e[e.LessThanEquals=3032]="LessThanEquals",e[e.And=3033]="And",e[e.Or=3034]="Or",e[e.Not=3035]="Not",e[e.Is=3036]="Is",e[e.IsNot=3037]="IsNot",e[e.NotIn=3038]="NotIn",e[e.Unpacking=3039]="Unpacking",e[e.PositionalParameter=3040]="PositionalParameter",e[e.Quantifier=3041]="Quantifier",e[e.Disjunction=3042]="Disjunction",e[e.Negation=3043]="Negation",e[e.Lookahead=3044]="Lookahead",e[e.LookaheadNegative=3045]="LookaheadNegative",e[e.Lookbehind=3046]="Lookbehind",e[e.LookbehindNegative=3047]="LookbehindNegative",e[e.Conditional=3048]="Conditional",e[e.ConditionalNegative=3049]="ConditionalNegative"}(s||(n.OperatorTokenType=s={})),function(e){e[e.Unknown=9998]="Unknown",e[e.OpenParentheses=4001]="OpenParentheses",e[e.CloseParentheses=4002]="CloseParentheses",e[e.OpenBracket=4003]="OpenBracket",e[e.CloseBracket=4004]="CloseBracket",e[e.OpenSquareBracket=4005]="OpenSquareBracket",e[e.CloseSquareBracket=4006]="CloseSquareBracket",e[e.Whitespace=4007]="Whitespace",e[e.NewLine=4008]="NewLine",e[e.Dot=4009]="Dot",e[e.Colon=4010]="Colon",e[e.Semicolon=4011]="Semicolon",e[e.Comma=4012]="Comma",e[e.Hashtag=4013]="Hashtag",e[e.Caret=4014]="Caret",e[e.DollarSymbol=4015]="DollarSymbol",e[e.AtSymbol=4016]="AtSymbol",e[e.EqualsSymbol=4017]="EqualsSymbol",e[e.ExclamationMark=4018]="ExclamationMark",e[e.Quote=4019]="Quote",e[e.DoubleQuote=4020]="DoubleQuote",e[e.BackQuote=4021]="BackQuote",e[e.Backslash=4022]="Backslash",e[e.ForwardSlash=4023]="ForwardSlash"}(r||(n.CharacterTokenType=r={})),function(e){e[e.EscWhitespace=5001]="EscWhitespace",e[e.EscNewline=5002]="EscNewline",e[e.EscQuote=5003]="EscQuote",e[e.EscDoubleQuote=5004]="EscDoubleQuote",e[e.EscBackslash=5005]="EscBackslash",e[e.EscOpenSquareBracket=5006]="EscOpenSquareBracket",e[e.EscOpenBracket=5007]="EscOpenBracket"}(l||(n.EscapedCharacterTokenType=l={})),function(e){e[e.Invalid=9999]="Invalid",e[e.Deprecated=9997]="Deprecated",e[e.Comment=6001]="Comment",e[e.CommentCodeTag=6002]="CommentCodeTag",e[e.CommentRegionTag=6003]="CommentRegionTag",e[e.TypehintComment=6004]="TypehintComment",e[e.TypehintDirective=6005]="TypehintDirective",e[e.TypehintIgnore=6006]="TypehintIgnore",e[e.TypehintType=6007]="TypehintType",e[e.TypehintPunctuation=6008]="TypehintPunctuation",e[e.TypehintVariable=6009]="TypehintVariable",e[e.Docstring=6010]="Docstring",e[e.StringBegin=6011]="StringBegin",e[e.StringEnd=6012]="StringEnd",e[e.SimpleExpression=6013]="SimpleExpression",e[e.RenpyBlock=6014]="RenpyBlock",e[e.CodeBlock=6015]="CodeBlock",e[e.PythonLine=6016]="PythonLine",e[e.PythonBlock=6017]="PythonBlock",e[e.PythonExpression=6018]="PythonExpression",e[e.Arguments=6019]="Arguments",e[e.EmptyString=6020]="EmptyString",e[e.StringTag=6021]="StringTag",e[e.TagBlock=6022]="TagBlock",e[e.TaggedString=6023]="TaggedString",e[e.Placeholder=6024]="Placeholder",e[e.MenuStatement=6025]="MenuStatement",e[e.MenuBlock=6026]="MenuBlock",e[e.MenuOption=6027]="MenuOption",e[e.MenuOptionBlock=6028]="MenuOptionBlock",e[e.LabelStatement=6029]="LabelStatement",e[e.LabelCall=6030]="LabelCall",e[e.LabelAccess=6031]="LabelAccess",e[e.BehindStatement=6032]="BehindStatement",e[e.OnlayerStatement=6033]="OnlayerStatement",e[e.ZorderStatement=6034]="ZorderStatement",e[e.AtStatement=6035]="AtStatement",e[e.AsStatement=6036]="AsStatement",e[e.WithStatement=6037]="WithStatement",e[e.ImageStatement=6038]="ImageStatement",e[e.CameraStatement=6039]="CameraStatement",e[e.SceneStatement=6040]="SceneStatement",e[e.ShowStatement=6041]="ShowStatement",e[e.HideStatement=6042]="HideStatement",e[e.CallStatement=6043]="CallStatement",e[e.CallArguments=6044]="CallArguments",e[e.FromClause=6045]="FromClause",e[e.FromArguments=6046]="FromArguments",e[e.JumpStatement=6047]="JumpStatement",e[e.PlayAudioStatement=6048]="PlayAudioStatement",e[e.QueueAudioStatement=6049]="QueueAudioStatement",e[e.StopAudioStatement=6050]="StopAudioStatement",e[e.ScreenStatement=6051]="ScreenStatement",e[e.ScreenSensitive=6052]="ScreenSensitive",e[e.ScreenFrame=6053]="ScreenFrame",e[e.ScreenFrameStatement=6054]="ScreenFrameStatement",e[e.ScreenWindow=6055]="ScreenWindow",e[e.ScreenWindowStatement=6056]="ScreenWindowStatement",e[e.ScreenText=6057]="ScreenText",e[e.ScreenBlock=6058]="ScreenBlock",e[e.ScreenVboxStatement=6059]="ScreenVboxStatement",e[e.ScreenHboxStatement=6060]="ScreenHboxStatement",e[e.StyleStatement=6061]="StyleStatement",e[e.StyleParameters=6062]="StyleParameters",e[e.StyleBlock=6063]="StyleBlock",e[e.NarratorSayStatement=6064]="NarratorSayStatement",e[e.SayStatement=6065]="SayStatement",e[e.CharacterNameString=6066]="CharacterNameString",e[e.SayNarrator=6067]="SayNarrator",e[e.SayCharacter=6068]="SayCharacter",e[e.AtParameters=6069]="AtParameters",e[e.AsParameters=6070]="AsParameters",e[e.BehindParameters=6071]="BehindParameters",e[e.OnlayerParameters=6072]="OnlayerParameters",e[e.WithParameters=6073]="WithParameters",e[e.ZorderParameters=6074]="ZorderParameters",e[e.PauseStatement=6075]="PauseStatement",e[e.PauseParameters=6076]="PauseParameters",e[e.ATLBlock=6077]="ATLBlock",e[e.ATLChoiceBlock=6078]="ATLChoiceBlock",e[e.TransformBlock=6079]="TransformBlock",e[e.ATLContains=6080]="ATLContains",e[e.ATLWith=6081]="ATLWith",e[e.ATLEvent=6082]="ATLEvent",e[e.ATLFunction=6083]="ATLFunction",e[e.ATLWarper=6084]="ATLWarper",e[e.ATLOnStatement=6085]="ATLOnStatement",e[e.ATLOnParameters=6086]="ATLOnParameters",e[e.ATLChoiceStatement=6087]="ATLChoiceStatement",e[e.ATLChoiceParameters=6088]="ATLChoiceParameters",e[e.ATLBlockStatement=6089]="ATLBlockStatement",e[e.ATLParallelStatement=6090]="ATLParallelStatement",e[e.ATLContainsStatement=6091]="ATLContainsStatement",e[e.TransformStatement=6092]="TransformStatement",e[e.TransformParameters=6093]="TransformParameters",e[e.MemberAccess=6094]="MemberAccess",e[e.ItemAccess=6095]="ItemAccess",e[e.IndexedName=6096]="IndexedName",e[e.Attribute=6097]="Attribute",e[e.ClassDefinition=6098]="ClassDefinition",e[e.ClassInheritance=6099]="ClassInheritance",e[e.FunctionDefinition=6100]="FunctionDefinition",e[e.LambdaFunction=6101]="LambdaFunction",e[e.FunctionLambdaParameters=6102]="FunctionLambdaParameters",e[e.FunctionParameters=6103]="FunctionParameters",e[e.FunctionDecorator=6104]="FunctionDecorator",e[e.FunctionCall=6105]="FunctionCall",e[e.FunctionCallGeneric=6106]="FunctionCallGeneric",e[e.Fstring=6107]="Fstring",e[e.InterpolateFlags=6108]="InterpolateFlags",e[e.ControlFlowKeyword=6109]="ControlFlowKeyword",e[e.LogicalOperatorKeyword=6110]="LogicalOperatorKeyword",e[e.Operator=6111]="Operator",e[e.ArithmeticOperator=6112]="ArithmeticOperator",e[e.BitwiseOperatorKeyword=6113]="BitwiseOperatorKeyword",e[e.ComparisonOperatorKeyword=6114]="ComparisonOperatorKeyword",e[e.ConstantLiteral=6115]="ConstantLiteral",e[e.ConstantNumeric=6116]="ConstantNumeric",e[e.ConstantCaps=6117]="ConstantCaps",e[e.BuiltinExceptionType=6118]="BuiltinExceptionType",e[e.BuiltinType=6119]="BuiltinType",e[e.MagicVariable=6120]="MagicVariable",e[e.EscapeSequence=6121]="EscapeSequence",e[e.FormatPercent=6122]="FormatPercent",e[e.FormatBrace=6123]="FormatBrace",e[e.StringStorageType=6124]="StringStorageType",e[e.FormatStorageType=6125]="FormatStorageType",e[e.ImaginaryNumberStorageType=6126]="ImaginaryNumberStorageType",e[e.NumberStorageType=6127]="NumberStorageType",e[e.ClassStorageType=6128]="ClassStorageType",e[e.CommentBegin=6129]="CommentBegin",e[e.CommentEnd=6130]="CommentEnd",e[e.Backreference=6131]="Backreference",e[e.BackreferenceNamed=6132]="BackreferenceNamed",e[e.CharacterSet=6133]="CharacterSet",e[e.Named=6134]="Named",e[e.ModifierFlagStorageType=6135]="ModifierFlagStorageType"}(h||(n.MetaTokenType=h={}))},3496:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.screenLanguage=n.screenFallback=n.screen=n.screenBox=n.screenText=n.screenWindow=n.screenFrame=n.screenBlockTester=n.screenKeywords=n.screenSimpleExpression=n.screenBuildInProperties=n.screenDefName=n.builtinScreens=void 0;const a=t(5420);n.builtinScreens={debugName:"builtinScreens",token:a.EntityTokenType.FunctionName,match:/(?<!\.)\b(?:start|quit|after_load|splashscreen|before_main_menu|main_menu|after_warp|hide_windows)\b/g},n.screenDefName={patterns:[n.builtinScreens,{debugName:"screenDefName.patterns![2]",match:/(?<=^|[ \t])(\b(?:[a-zA-Z_]\w*)\b)?(\.)?(\b(?:[a-zA-Z_]\w*)\b)/dgm,captures:{1:{token:a.EntityTokenType.FunctionName},2:{token:a.CharacterTokenType.Dot},3:{token:a.EntityTokenType.FunctionName}}}]},n.screenBuildInProperties={patterns:[{debugName:"screenBuildInProperties.patterns![0]",match:/\b(?<!\.)(?:(warp)|(circles)|(clockwise)|(counterclockwise))\b/dg,captures:{1:{token:a.KeywordTokenType.Warp},2:{token:a.KeywordTokenType.Circles},3:{token:a.KeywordTokenType.Clockwise},4:{token:a.KeywordTokenType.Counterclockwise}}},{debugName:"screenBuildInProperties.patterns![1]",match:/\b(?<!\.)(key|input|(?:text|image)?button|grid|auto|mousearea|side|timer|[vh]?bar|action|viewport|scrollbars|mousewheel|vpgrid|imagemap)\b/dg,captures:{1:{token:a.KeywordTokenType.Other}}},{debugName:"screenBuildInProperties.patterns![2]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:[xy]padding|area|(un)?hovered|draggable|cols|spacing|side_[xy]align)\b/g},{debugName:"screenBuildInProperties.patterns![3]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:xpos|ypos|xanchor|yanchor|xcenter|ycenter|radius)\b/g},{debugName:"screenBuildInProperties.patterns![4]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:pos|anchor|xycenter|around|alignaround|matrixanchor)\b/g},{debugName:"screenBuildInProperties.patterns![5]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:xalign|yalign|zoom|xzoom|yzoom|alpha|additive|angle|delay|events|zpos)\b/g},{debugName:"screenBuildInProperties.patterns![6]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:align|knot)\b/g},{debugName:"screenBuildInProperties.patterns![7]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:xoffset|yoffset|xtile|ytile|size)\b/g},{debugName:"screenBuildInProperties.patterns![8]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:offset)\b/g},{debugName:"screenBuildInProperties.patterns![9]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:rotate_pad|transform_anchor|nearest|crop_relative|subpixel|zzoom)\b/g},{debugName:"screenBuildInProperties.patterns![10]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:rotate|xpan|ypan|blur)\b/g},{debugName:"screenBuildInProperties.patterns![11]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:xsize|ysize)\b/g},{debugName:"screenBuildInProperties.patterns![12]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:crop)\b/g},{debugName:"screenBuildInProperties.patterns![13]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:corner1|corner2)\b/g},{debugName:"screenBuildInProperties.patterns![14]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:xysize)\b/g},{debugName:"screenBuildInProperties.patterns![15]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:fit)\b/g},{debugName:"screenBuildInProperties.patterns![16]",token:a.MetaTokenType.Deprecated,match:/\b(?<!\.)(?:size|maxsize)\b/g},{debugName:"screenBuildInProperties.patterns![17]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:matrixcolor)\b/g},{debugName:"screenBuildInProperties.patterns![18]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:matrixtransform)\b/g},{debugName:"screenBuildInProperties.patterns![19]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:perspective)\b/g}]},n.screenSimpleExpression={patterns:[n.screenBuildInProperties,{debugName:"screenSimpleExpression.patterns![21]",token:a.EntityTokenType.Identifier,match:/\b([a-zA-Z_]\w*)\b/g}]},n.screenKeywords={patterns:[{debugName:"screenKeywords.patterns![0]",contentToken:a.MetaTokenType.ScreenSensitive,begin:/(?<=^[ \t]*)(sensitive)\b[ \t]*/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Sensitive}},end:/$/gm,patterns:[n.screenSimpleExpression]},{debugName:"screenKeywords.patterns![1]",token:a.KeywordTokenType.Other,match:/\b(?<!\.)(?:modal|sensitive|tag|at|use|zorder|variant|layer|roll_forward|text)\b/g},{debugName:"screenKeywords.patterns![2]",token:a.KeywordTokenType.Other,match:/\b(?<!\.)(?:style|style_group|style_prefix)\b/g},{debugName:"screenKeywords.patterns![3]",token:a.KeywordTokenType.Other,match:/\b(?<!\.)(?:has|vbox|hbox|label|add|xfill)\b/g}]},n.screenBlockTester={patterns:[{debugName:"screenBlockTester.patterns![0]",contentToken:a.MetaTokenType.ScreenBlock,begin:/(?<=(^[ \t]*)(?:screen|frame|window|text|vbox|hbox)\b.*?)(:)/dgm,beginCaptures:{2:{token:a.CharacterTokenType.Colon}},end:/^(?=(?!\1)[ \t]*[^\s#]|\1[^\s#])/gm,patterns:[]}]},n.screenFrame={debugName:"screenFrame",token:a.MetaTokenType.ScreenFrameStatement,match:/(?<=^[ \t]*)(frame)\b/dgm,captures:{1:{token:a.KeywordTokenType.Frame}}},n.screenWindow={debugName:"screenWindow",token:a.MetaTokenType.ScreenWindowStatement,match:/(?<=^[ \t]*)(window)\b/dgm,captures:{1:{token:a.KeywordTokenType.Window}}},n.screenText={debugName:"screenText",contentToken:a.MetaTokenType.ScreenText,begin:/^([ \t]+)?(text)\b[ \t]*(:)/dgm,beginCaptures:{1:{token:a.CharacterTokenType.Whitespace},2:{token:a.KeywordTokenType.Text},3:{token:a.CharacterTokenType.Colon}},end:/^(?=(?!\1)[ \t]*[^\s#]|\1[^\s#])/gm,patterns:[{debugName:"screenText.patterns![0]",token:a.MetaTokenType.ScreenText,contentToken:a.MetaTokenType.ATLBlock,begin:/^([ \t]+)?(text)\b[ \t]*([a-zA-Z_0-9 ]*)(:)/dgm,beginCaptures:{1:{token:a.CharacterTokenType.Whitespace},2:{token:a.KeywordTokenType.Text},3:{token:a.EntityTokenType.TextName},4:{token:a.CharacterTokenType.Colon}},end:/^(?=(?!\1)[ \t]*[^\s#]|\1[^\s#])/gm,patterns:[]},{debugName:"screenText.patterns![1]",token:a.MetaTokenType.ScreenText,begin:/(?<=^[ \t]*)(text)\b[ \t]*/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Text}},end:/(?=\b(at)\b|#|=)|$/gm,patterns:[{debugName:"screenText.patterns![1].patterns![1]",token:a.EntityTokenType.TextName,match:/\b(?:[a-zA-Z_0-9]+)\b[ \t]*/g}]}]},n.screenBox={patterns:[{debugName:"screenBox.patterns![0]",token:a.MetaTokenType.ScreenVboxStatement,match:/(?<=^[ \t]*)(vbox)\b/dgm,captures:{1:{token:a.KeywordTokenType.Vbox}}},{debugName:"screenBox.patterns![1]",token:a.MetaTokenType.ScreenHboxStatement,match:/(?<=^[ \t]*)(hbox)\b/dgm,captures:{1:{token:a.KeywordTokenType.Hbox}}}]},n.screen={patterns:[{debugName:"screen.patterns![0]",contentToken:a.MetaTokenType.ScreenBlock,begin:/(?<=^[ \t]*)(screen)\b/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Screen}},end:/$|^/gm,patterns:[n.screenDefName,n.screenBlockTester]}]},n.screenFallback={patterns:[]},n.screenLanguage={patterns:[n.screenFrame,n.screenWindow,n.screenBox,n.screenText,n.screenKeywords,n.screenSimpleExpression,n.screenFallback]},n.screenBlockTester.patterns[0].patterns.push(n.screenLanguage)},3839:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.style=n.styleClause=n.styleProperty=n.styleBlockTester=void 0;const a=t(5420);n.styleBlockTester={patterns:[{debugName:"styleBlockTester.patterns![0]",contentToken:a.MetaTokenType.StyleBlock,begin:/(?<=(^[ \t]*)(?:style)\b.*?)(:)/dgm,beginCaptures:{2:{token:a.CharacterTokenType.Colon}},end:/^(?=(?!\1)[ \t]*[^\s#]|\1[^\s#])/gm,patterns:[]}]},n.styleProperty={patterns:[{debugName:"styleProperty.patterns![0]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:(?:selected_)?(?:hover_|idle_|insensitive_|activate_)?(?:activate_sound|adjust_spacing|aft_bar|aft_gutter|align|alt|altruby_style|anchor|antialias|area|background|bar_invert|bar_resizing|bar_vertical|base_bar|black_color|bold|bottom_bar|bottom_gutter|bottom_margin|bottom_padding|box_first_spacing|box_layout|box_reverse|box_spacing|box_wrap|box_wrap_spacing|caret|child|clipping|color|debug|drop_shadow|drop_shadow_color|enable_hover|first_indent|first_spacing|fit_first|focus_mask|focus_rect|font|fore_bar|fore_gutter|foreground|hinting|hover_sound|hyperlink_functions|italic|justify|kerning|key_events|keyboard_focus|language|layout|left_bar|left_gutter|left_margin|left_padding|line_leading|line_overlap_split|line_spacing|margin|maximum|min_width|minimum|minwidth|mipmap|modal|mouse|newline_indent|offset|order_reverse|outline_scaling|outlines|padding|pos|rest_indent|right_bar|right_gutter|right_margin|right_padding|ruby_style|size|size_group|slow_abortable|slow_cps|slow_cps_multiplier|slow_speed|sound|spacing|strikethrough|subpixel|subtitle_width|text_align|text_y_fudge|textalign|thumb|thumb_offset|thumb_shadow|time_policy|top_bar|top_gutter|top_margin|top_padding|underline|unscrollable|vertical|xalign|xanchor|xcenter|xfill|xfit|xmargin|xmaximum|xminimum|xoffset|xpadding|xpos|xsize|xspacing|xysize|yalign|yanchor|ycenter|yfill|yfit|ymargin|ymaximum|yminimum|yoffset|ypadding|ypos|ysize|yspacing))\b/g},{debugName:"styleProperty.patterns![1]",token:a.EntityTokenType.TagName,match:/\b(?<!\.)(?:properties)\b/g},{debugName:"styleProperty.patterns![2]",token:a.MetaTokenType.Invalid,match:/.+/g}]},n.styleClause={patterns:[{debugName:"styleClause.patterns![0]",begin:/\b(?<!\.)(is)\b/dg,beginCaptures:{1:{token:a.MetaTokenType.LogicalOperatorKeyword}},end:/(?!\G)(?<=[^ \t])|$/gm,patterns:[{debugName:"styleClause.patterns![0].patterns![0]",token:a.EntityTokenType.StyleName,match:/\b[\p{XID_Start}_]\p{XID_Continue}*\b/gu}]},{debugName:"styleClause.patterns![1]",token:a.KeywordTokenType.Clear,match:/\b(?<!\.)clear\b/g},{debugName:"styleClause.patterns![2]",begin:/\b(?<!\.)(take)\b/dg,beginCaptures:{1:{token:a.KeywordTokenType.Take}},end:/(?!\G)(?<=[^ \t])|$/gm,patterns:[]},{debugName:"styleClause.patterns![3]",match:/\b(?<!\.)(del)\b[ \t]*(\w*)/dg,captures:{1:{token:a.KeywordTokenType.Del},2:{patterns:[n.styleProperty]}}},{debugName:"styleClause.patterns![4]",begin:/\b(?<!\.)(variant)\b/dg,beginCaptures:{1:{token:a.KeywordTokenType.Variant}},end:/(?!\G)/g,patterns:[]},{debugName:"styleClause.patterns![5]",begin:/\b(?<!\.)(properties|(?:(?:selected_)?(?:hover_|idle_|insensitive_|activate_)?(?:activate_sound|adjust_spacing|aft_bar|aft_gutter|align|alt|altruby_style|anchor|antialias|area|background|bar_invert|bar_resizing|bar_vertical|base_bar|black_color|bold|bottom_bar|bottom_gutter|bottom_margin|bottom_padding|box_first_spacing|box_layout|box_reverse|box_spacing|box_wrap|box_wrap_spacing|caret|child|clipping|color|debug|drop_shadow|drop_shadow_color|enable_hover|first_indent|first_spacing|fit_first|focus_mask|focus_rect|font|fore_bar|fore_gutter|foreground|hinting|hover_sound|hyperlink_functions|italic|justify|kerning|key_events|keyboard_focus|language|layout|left_bar|left_gutter|left_margin|left_padding|line_leading|line_overlap_split|line_spacing|margin|maximum|min_width|minimum|minwidth|mipmap|modal|mouse|newline_indent|offset|order_reverse|outline_scaling|outlines|padding|pos|rest_indent|right_bar|right_gutter|right_margin|right_padding|ruby_style|size|size_group|slow_abortable|slow_cps|slow_cps_multiplier|slow_speed|sound|spacing|strikethrough|subpixel|subtitle_width|text_align|text_y_fudge|textalign|thumb|thumb_offset|thumb_shadow|time_policy|top_bar|top_gutter|top_margin|top_padding|underline|unscrollable|vertical|xalign|xanchor|xcenter|xfill|xfit|xmargin|xmaximum|xminimum|xoffset|xpadding|xpos|xsize|xspacing|xysize|yalign|yanchor|ycenter|yfill|yfit|ymargin|ymaximum|yminimum|yoffset|ypadding|ypos|ysize|yspacing)))\b/dg,beginCaptures:{1:{token:a.EntityTokenType.TagName}},end:/(?!\G)/g,patterns:[]}]},n.style={debugName:"style",token:a.MetaTokenType.StyleStatement,contentToken:a.MetaTokenType.StyleParameters,begin:/(?<=^[ \t]*)(style)\b/dgm,beginCaptures:{1:{token:a.KeywordTokenType.Style}},end:/$|^/gm,patterns:[n.styleClause,{debugName:"style.patterns![1]",token:a.EntityTokenType.StyleName,match:/\b[\p{XID_Start}_]\p{XID_Continue}*\b/gu},n.styleBlockTester]},n.styleBlockTester.patterns[0].patterns.push(n.styleClause)},7957:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.tokenTypeToStringMap=n.TokenListIterator=n.TokenTree=n.TreeNode=n.Token=n.TokenPosition=n.Range=void 0,n.isRangePattern=c,n.isMatchPattern=function(e){return void 0!==e.match},n.isRepoPattern=function(e){return!c(e)&&void 0!==e.patterns},n.tokenTypeToString=g;const a=t(1398),i=t(5420),o=t(4483),s=t(1377);class r{start;end;constructor(e,n){this.start=e,this.end=n}overlaps(e){return this.start<=e.end&&e.start<=this.end}contains(e){return e>=this.start&&e<=this.end}}n.Range=r;class l{line;character;charStartOffset;constructor(e,n,t){this.line=e,this.character=n,this.charStartOffset=t}next(){++this.character,++this.charStartOffset}advance(e){this.character+=e,this.charStartOffset+=e}nextLine(){++this.line,this.character=0}clone(){return new l(this.line,this.character,this.charStartOffset)}setValue(e){this.line=e.line,this.character=e.character,this.charStartOffset=e.charStartOffset}toString(){return`L${this.line+1}:C${this.character+1}`}}n.TokenPosition=l;class h{type;metaTokens;startPos;endPos;constructor(e,n,t){this.type=e,this.startPos=n,this.endPos=t,this.metaTokens=new o.Vector}getVSCodeRange(){const e=new a.Position(this.startPos.line,this.startPos.character),n=new a.Position(this.endPos.line,this.endPos.character);return e.isEqual(n)&&(0,s.logMessage)(a.LogLevel.Warning,`Empty token detected at L: ${e.line+1}, C: ${e.character+1} !`),new a.Range(e,n)}getRange(){return new r(this.startPos.charStartOffset,this.endPos.charStartOffset)}isKeyword(){return this.type>=i.TokenTypeIndex.KeywordStart&&this.type<i.TokenTypeIndex.EntityStart}isEntity(){return this.type>=i.TokenTypeIndex.EntityStart&&this.type<i.TokenTypeIndex.ConstantStart}isConstant(){return this.type>=i.TokenTypeIndex.ConstantStart&&this.type<i.TokenTypeIndex.OperatorsStart}isOperator(){return this.type>=i.TokenTypeIndex.OperatorsStart&&this.type<i.TokenTypeIndex.CharactersStart}isCharacter(){return this.type>=i.TokenTypeIndex.CharactersStart&&this.type<i.TokenTypeIndex.EscapedCharacterStart}isEscapedCharacter(){return this.type>=i.TokenTypeIndex.EscapedCharacterStart&&this.type<i.TokenTypeIndex.MetaStart}isMetaToken(){return this.type>=i.TokenTypeIndex.MetaStart&&this.type<i.TokenTypeIndex.UnknownCharacterID}isUnknownCharacter(){return this.type===i.CharacterTokenType.Unknown}isInvalid(){return this.hasMetaToken(i.MetaTokenType.Invalid)}addMetaToken(){this.metaTokens.pushBack(this.type)}removeMetaToken(e){this.metaTokens.erase(e)}hasMetaToken(e){return this.metaTokens.contains(e)}getValue(e){return e.getText(this.getVSCodeRange())}toString(){let e="";return this.metaTokens.isEmpty()||this.metaTokens.forEach((n=>{e+=`, ${g(n)}`})),`${g(this.type)}${e}: (${this.startPos}) -> (${this.endPos})`}}function c(e){return void 0!==e.begin}n.Token=h;class d{token;children;parent;constructor(e=null){this.token=e,this.children=new o.Vector,this.parent=null}addChild(e){e.parent=this,this.children.pushBack(e)}hasChildren(){return!this.children.isEmpty()}isEmpty(){return null===this.token&&!this.hasChildren()}forEach(e){this.children.forEach((n=>{e(n),n.forEach(e)}))}filter(e){const n=[];return this.forEach((t=>{e(t)&&n.push(t)})),n}count(){let e=0;return this.forEach((()=>{++e})),e}flatten(){const e=new o.Vector;if(this.children.forEach((n=>{n.flatten().forEach((n=>{e.pushBack(n)}))})),e.sort(((e,n)=>e.startPos.charStartOffset-n.startPos.charStartOffset)),!this.token)return e;e.forEach((e=>{e.metaTokens.pushBack(this.token.type)}));let n=this.token.startPos;for(const t of e){const a=t.startPos;if(a.charStartOffset>n.charStartOffset){const t=new h(this.token.type,n,a);e.pushBack(t)}n=n.charStartOffset>t.endPos.charStartOffset?n:t.endPos}if(n.charStartOffset<this.token.endPos.charStartOffset){const t=new h(this.token.type,n,this.token.endPos);e.pushBack(t)}return e}}n.TreeNode=d,n.TokenTree=class{root;constructor(){this.root=new d}isEmpty(){return!this.root.hasChildren()}forEach(e){this.root.forEach(e)}filter(e){return this.root.filter(e)}count(){return this.root.count()}getIterator(){return new u(this.flatten())}flatten(){return this.root.flatten()}};class u{_tokens;_index=0;_blacklist=new Set;constructor(e){this._tokens=e}next(){if(!this.hasNext())throw new Error("next() was called on an iterator that has no more nodes to visit.");for(this._index++;this.isBlacklisted()&&this.hasNext();)this._index++}clone(){const e=new u(this._tokens);return e._index=this._index,e._blacklist=new Set(this._blacklist),e}get token(){return this._tokens.at(this._index)}get tokenType(){return this.token.type}get metaTokens(){return this.token.metaTokens}isBlacklisted(){return!!this._blacklist.has(this.tokenType)||this.metaTokens.any((e=>this._blacklist.has(e)))}setFilter(e){this._blacklist=e}getFilter(){return this._blacklist}hasNext(){return this._index<this._tokens.size-1}}n.TokenListIterator=u;const p={Init:{name:"Init",value:i.KeywordTokenType.Init},Offset:{name:"Offset",value:i.KeywordTokenType.Offset},Python:{name:"Python",value:i.KeywordTokenType.Python},Hide:{name:"Hide",value:i.KeywordTokenType.Hide},Early:{name:"Early",value:i.KeywordTokenType.Early},Define:{name:"Define",value:i.KeywordTokenType.Define},Default:{name:"Default",value:i.KeywordTokenType.Default},Label:{name:"Label",value:i.KeywordTokenType.Label},Menu:{name:"Menu",value:i.KeywordTokenType.Menu},Pause:{name:"Pause",value:i.KeywordTokenType.Pause},Style:{name:"Style",value:i.KeywordTokenType.Style},Screen:{name:"Screen",value:i.KeywordTokenType.Screen},Scene:{name:"Scene",value:i.KeywordTokenType.Scene},Camera:{name:"Camera",value:i.KeywordTokenType.Camera},Show:{name:"Show",value:i.KeywordTokenType.Show},Image:{name:"Image",value:i.KeywordTokenType.Image},LayeredImage:{name:"LayeredImage",value:i.KeywordTokenType.LayeredImage},Window:{name:"Window",value:i.KeywordTokenType.Window},Frame:{name:"Frame",value:i.KeywordTokenType.Frame},Transform:{name:"Transform",value:i.KeywordTokenType.Transform},Translate:{name:"Translate",value:i.KeywordTokenType.Translate},Extend:{name:"Extend",value:i.KeywordTokenType.Extend},NVLClear:{name:"NVLClear",value:i.KeywordTokenType.NVLClear},Voice:{name:"Voice",value:i.KeywordTokenType.Voice},Sound:{name:"Sound",value:i.KeywordTokenType.Sound},Play:{name:"Play",value:i.KeywordTokenType.Play},Queue:{name:"Queue",value:i.KeywordTokenType.Queue},Stop:{name:"Stop",value:i.KeywordTokenType.Stop},Fadeout:{name:"Fadeout",value:i.KeywordTokenType.Fadeout},Set:{name:"Set",value:i.KeywordTokenType.Set},Expression:{name:"Expression",value:i.KeywordTokenType.Expression},At:{name:"At",value:i.KeywordTokenType.At},As:{name:"As",value:i.KeywordTokenType.As},With:{name:"With",value:i.KeywordTokenType.With},Onlayer:{name:"Onlayer",value:i.KeywordTokenType.Onlayer},Zorder:{name:"Zorder",value:i.KeywordTokenType.Zorder},Behind:{name:"Behind",value:i.KeywordTokenType.Behind},Animation:{name:"Animation",value:i.KeywordTokenType.Animation},From:{name:"From",value:i.KeywordTokenType.From},Time:{name:"Time",value:i.KeywordTokenType.Time},Repeat:{name:"Repeat",value:i.KeywordTokenType.Repeat},DollarSign:{name:"DollarSign",value:i.KeywordTokenType.DollarSign},Sensitive:{name:"Sensitive",value:i.KeywordTokenType.Sensitive},Text:{name:"Text",value:i.KeywordTokenType.Text},Other:{name:"Other",value:i.KeywordTokenType.Other},OtherPython:{name:"OtherPython",value:i.KeywordTokenType.OtherPython},OtherAudio:{name:"OtherAudio",value:i.KeywordTokenType.OtherAudio},Layer:{name:"Layer",value:i.KeywordTokenType.Layer},Take:{name:"Take",value:i.KeywordTokenType.Take},Del:{name:"Del",value:i.KeywordTokenType.Del},Clear:{name:"Clear",value:i.KeywordTokenType.Clear},Variant:{name:"Variant",value:i.KeywordTokenType.Variant},Vbox:{name:"Vbox",value:i.KeywordTokenType.Vbox},Hbox:{name:"Hbox",value:i.KeywordTokenType.Hbox},If:{name:"If",value:i.KeywordTokenType.If},Elif:{name:"Elif",value:i.KeywordTokenType.Elif},Else:{name:"Else",value:i.KeywordTokenType.Else},In:{name:"In",value:i.KeywordTokenType.In},For:{name:"For",value:i.KeywordTokenType.For},While:{name:"While",value:i.KeywordTokenType.While},Pass:{name:"Pass",value:i.KeywordTokenType.Pass},Return:{name:"Return",value:i.KeywordTokenType.Return},Jump:{name:"Jump",value:i.KeywordTokenType.Jump},Call:{name:"Call",value:i.KeywordTokenType.Call},Contains:{name:"Contains",value:i.KeywordTokenType.Contains},Parallel:{name:"Parallel",value:i.KeywordTokenType.Parallel},Block:{name:"Block",value:i.KeywordTokenType.Block},Choice:{name:"Choice",value:i.KeywordTokenType.Choice},Warp:{name:"Warp",value:i.KeywordTokenType.Warp},Circles:{name:"Circles",value:i.KeywordTokenType.Circles},Clockwise:{name:"Clockwise",value:i.KeywordTokenType.Clockwise},Counterclockwise:{name:"Counterclockwise",value:i.KeywordTokenType.Counterclockwise},Event:{name:"Event",value:i.KeywordTokenType.Event},On:{name:"On",value:i.KeywordTokenType.On},Function:{name:"Function",value:i.KeywordTokenType.Function},Import:{name:"Import",value:i.KeywordTokenType.Import},Class:{name:"Class",value:i.KeywordTokenType.Class},Metaclass:{name:"Metaclass",value:i.KeywordTokenType.Metaclass},Lambda:{name:"Lambda",value:i.KeywordTokenType.Lambda},Async:{name:"Async",value:i.KeywordTokenType.Async},Def:{name:"Def",value:i.KeywordTokenType.Def},Global:{name:"Global",value:i.KeywordTokenType.Global},Nonlocal:{name:"Nonlocal",value:i.KeywordTokenType.Nonlocal},ClassName:{name:"ClassName",value:i.EntityTokenType.ClassName},InheritedClassName:{name:"InheritedClassName",value:i.EntityTokenType.InheritedClassName},TypeName:{name:"TypeName",value:i.EntityTokenType.TypeName},NamespaceName:{name:"NamespaceName",value:i.EntityTokenType.NamespaceName},FunctionName:{name:"FunctionName",value:i.EntityTokenType.FunctionName},TagName:{name:"TagName",value:i.EntityTokenType.TagName},Identifier:{name:"Identifier",value:i.EntityTokenType.Identifier},StyleName:{name:"StyleName",value:i.EntityTokenType.StyleName},ImageName:{name:"ImageName",value:i.EntityTokenType.ImageName},TextName:{name:"TextName",value:i.EntityTokenType.TextName},AudioName:{name:"AudioName",value:i.EntityTokenType.AudioName},CharacterName:{name:"CharacterName",value:i.EntityTokenType.CharacterName},EventName:{name:"EventName",value:i.EntityTokenType.EventName},PropertyName:{name:"PropertyName",value:i.EntityTokenType.PropertyName},String:{name:"String",value:i.LiteralTokenType.String},UnquotedString:{name:"UnquotedString",value:i.LiteralTokenType.UnquotedString},Color:{name:"Color",value:i.LiteralTokenType.Color},Integer:{name:"Integer",value:i.LiteralTokenType.Integer},Float:{name:"Float",value:i.LiteralTokenType.Float},Boolean:{name:"Boolean",value:i.LiteralTokenType.Boolean},Plus:{name:"Plus",value:i.OperatorTokenType.Plus},Minus:{name:"Minus",value:i.OperatorTokenType.Minus},Multiply:{name:"Multiply",value:i.OperatorTokenType.Multiply},Divide:{name:"Divide",value:i.OperatorTokenType.Divide},Modulo:{name:"Modulo",value:i.OperatorTokenType.Modulo},Exponentiate:{name:"Exponentiate",value:i.OperatorTokenType.Exponentiate},FloorDivide:{name:"FloorDivide",value:i.OperatorTokenType.FloorDivide},BitwiseAnd:{name:"BitwiseAnd",value:i.OperatorTokenType.BitwiseAnd},BitwiseOr:{name:"BitwiseOr",value:i.OperatorTokenType.BitwiseOr},BitwiseXOr:{name:"BitwiseXOr",value:i.OperatorTokenType.BitwiseXOr},BitwiseNot:{name:"BitwiseNot",value:i.OperatorTokenType.BitwiseNot},BitwiseLeftShift:{name:"BitwiseLeftShift",value:i.OperatorTokenType.BitwiseLeftShift},BitwiseRightShift:{name:"BitwiseRightShift",value:i.OperatorTokenType.BitwiseRightShift},Assignment:{name:"Assignment",value:i.OperatorTokenType.Assignment},PlusAssign:{name:"PlusAssign",value:i.OperatorTokenType.PlusAssign},MinusAssign:{name:"MinusAssign",value:i.OperatorTokenType.MinusAssign},MultiplyAssign:{name:"MultiplyAssign",value:i.OperatorTokenType.MultiplyAssign},DivideAssign:{name:"DivideAssign",value:i.OperatorTokenType.DivideAssign},ModuloAssign:{name:"ModuloAssign",value:i.OperatorTokenType.ModuloAssign},ExponentiateAssign:{name:"ExponentiateAssign",value:i.OperatorTokenType.ExponentiateAssign},FloorDivideAssign:{name:"FloorDivideAssign",value:i.OperatorTokenType.FloorDivideAssign},BitwiseAndAssign:{name:"BitwiseAndAssign",value:i.OperatorTokenType.BitwiseAndAssign},BitwiseOrAssign:{name:"BitwiseOrAssign",value:i.OperatorTokenType.BitwiseOrAssign},BitwiseXOrAssign:{name:"BitwiseXOrAssign",value:i.OperatorTokenType.BitwiseXOrAssign},BitwiseLeftShiftAssign:{name:"BitwiseLeftShiftAssign",value:i.OperatorTokenType.BitwiseLeftShiftAssign},BitwiseRightShiftAssign:{name:"BitwiseRightShiftAssign",value:i.OperatorTokenType.BitwiseRightShiftAssign},Equals:{name:"Equals",value:i.OperatorTokenType.Equals},NotEquals:{name:"NotEquals",value:i.OperatorTokenType.NotEquals},GreaterThan:{name:"GreaterThan",value:i.OperatorTokenType.GreaterThan},LessThan:{name:"LessThan",value:i.OperatorTokenType.LessThan},GreaterThanEquals:{name:"GreaterThanEquals",value:i.OperatorTokenType.GreaterThanEquals},LessThanEquals:{name:"LessThanEquals",value:i.OperatorTokenType.LessThanEquals},And:{name:"And",value:i.OperatorTokenType.And},Or:{name:"Or",value:i.OperatorTokenType.Or},Not:{name:"Not",value:i.OperatorTokenType.Not},Is:{name:"Is",value:i.OperatorTokenType.Is},IsNot:{name:"IsNot",value:i.OperatorTokenType.IsNot},NotIn:{name:"NotIn",value:i.OperatorTokenType.NotIn},Unpacking:{name:"Unpacking",value:i.OperatorTokenType.Unpacking},PositionalParameter:{name:"PositionalParameter",value:i.OperatorTokenType.PositionalParameter},Quantifier:{name:"Quantifier",value:i.OperatorTokenType.Quantifier},Disjunction:{name:"Disjunction",value:i.OperatorTokenType.Disjunction},Negation:{name:"Negation",value:i.OperatorTokenType.Negation},Lookahead:{name:"Lookahead",value:i.OperatorTokenType.Lookahead},LookaheadNegative:{name:"LookaheadNegative",value:i.OperatorTokenType.LookaheadNegative},Lookbehind:{name:"Lookbehind",value:i.OperatorTokenType.Lookbehind},LookbehindNegative:{name:"LookbehindNegative",value:i.OperatorTokenType.LookbehindNegative},Conditional:{name:"Conditional",value:i.OperatorTokenType.Conditional},ConditionalNegative:{name:"ConditionalNegative",value:i.OperatorTokenType.ConditionalNegative},Unknown:{name:"Unknown",value:i.CharacterTokenType.Unknown},OpenParentheses:{name:"OpenParentheses",value:i.CharacterTokenType.OpenParentheses},CloseParentheses:{name:"CloseParentheses",value:i.CharacterTokenType.CloseParentheses},OpenBracket:{name:"OpenBracket",value:i.CharacterTokenType.OpenBracket},CloseBracket:{name:"CloseBracket",value:i.CharacterTokenType.CloseBracket},OpenSquareBracket:{name:"OpenSquareBracket",value:i.CharacterTokenType.OpenSquareBracket},CloseSquareBracket:{name:"CloseSquareBracket",value:i.CharacterTokenType.CloseSquareBracket},Whitespace:{name:"Whitespace",value:i.CharacterTokenType.Whitespace},NewLine:{name:"NewLine",value:i.CharacterTokenType.NewLine},Dot:{name:"Dot",value:i.CharacterTokenType.Dot},Colon:{name:"Colon",value:i.CharacterTokenType.Colon},Semicolon:{name:"Semicolon",value:i.CharacterTokenType.Semicolon},Comma:{name:"Comma",value:i.CharacterTokenType.Comma},Hashtag:{name:"Hashtag",value:i.CharacterTokenType.Hashtag},Caret:{name:"Caret",value:i.CharacterTokenType.Caret},DollarSymbol:{name:"DollarSymbol",value:i.CharacterTokenType.DollarSymbol},AtSymbol:{name:"AtSymbol",value:i.CharacterTokenType.AtSymbol},EqualsSymbol:{name:"EqualsSymbol",value:i.CharacterTokenType.EqualsSymbol},ExclamationMark:{name:"ExclamationMark",value:i.CharacterTokenType.ExclamationMark},Quote:{name:"Quote",value:i.CharacterTokenType.Quote},DoubleQuote:{name:"DoubleQuote",value:i.CharacterTokenType.DoubleQuote},BackQuote:{name:"BackQuote",value:i.CharacterTokenType.BackQuote},Backslash:{name:"Backslash",value:i.CharacterTokenType.Backslash},ForwardSlash:{name:"ForwardSlash",value:i.CharacterTokenType.ForwardSlash},EscWhitespace:{name:"EscWhitespace",value:i.EscapedCharacterTokenType.EscWhitespace},EscNewline:{name:"EscNewline",value:i.EscapedCharacterTokenType.EscNewline},EscQuote:{name:"EscQuote",value:i.EscapedCharacterTokenType.EscQuote},EscDoubleQuote:{name:"EscDoubleQuote",value:i.EscapedCharacterTokenType.EscDoubleQuote},EscBackslash:{name:"EscBackslash",value:i.EscapedCharacterTokenType.EscBackslash},EscOpenSquareBracket:{name:"EscOpenSquareBracket",value:i.EscapedCharacterTokenType.EscOpenSquareBracket},EscOpenBracket:{name:"EscOpenBracket",value:i.EscapedCharacterTokenType.EscOpenBracket},Invalid:{name:"Invalid",value:i.MetaTokenType.Invalid},Deprecated:{name:"Deprecated",value:i.MetaTokenType.Deprecated},Comment:{name:"Comment",value:i.MetaTokenType.Comment},CommentCodeTag:{name:"CommentCodeTag",value:i.MetaTokenType.CommentCodeTag},CommentRegionTag:{name:"CommentRegionTag",value:i.MetaTokenType.CommentRegionTag},TypehintComment:{name:"TypehintComment",value:i.MetaTokenType.TypehintComment},TypehintDirective:{name:"TypehintDirective",value:i.MetaTokenType.TypehintDirective},TypehintIgnore:{name:"TypehintIgnore",value:i.MetaTokenType.TypehintIgnore},TypehintType:{name:"TypehintType",value:i.MetaTokenType.TypehintType},TypehintPunctuation:{name:"TypehintPunctuation",value:i.MetaTokenType.TypehintPunctuation},TypehintVariable:{name:"TypehintVariable",value:i.MetaTokenType.TypehintVariable},Docstring:{name:"Docstring",value:i.MetaTokenType.Docstring},StringBegin:{name:"StringBegin",value:i.MetaTokenType.StringBegin},StringEnd:{name:"StringEnd",value:i.MetaTokenType.StringEnd},SimpleExpression:{name:"SimpleExpression",value:i.MetaTokenType.SimpleExpression},RenpyBlock:{name:"RenpyBlock",value:i.MetaTokenType.RenpyBlock},CodeBlock:{name:"CodeBlock",value:i.MetaTokenType.CodeBlock},PythonLine:{name:"PythonLine",value:i.MetaTokenType.PythonLine},PythonBlock:{name:"PythonBlock",value:i.MetaTokenType.PythonBlock},PythonExpression:{name:"PythonExpression",value:i.MetaTokenType.PythonExpression},Arguments:{name:"Arguments",value:i.MetaTokenType.Arguments},EmptyString:{name:"EmptyString",value:i.MetaTokenType.EmptyString},StringTag:{name:"StringTag",value:i.MetaTokenType.StringTag},TagBlock:{name:"TagBlock",value:i.MetaTokenType.TagBlock},TaggedString:{name:"TaggedString",value:i.MetaTokenType.TaggedString},Placeholder:{name:"Placeholder",value:i.MetaTokenType.Placeholder},MenuStatement:{name:"MenuStatement",value:i.MetaTokenType.MenuStatement},MenuBlock:{name:"MenuBlock",value:i.MetaTokenType.MenuBlock},MenuOption:{name:"MenuOption",value:i.MetaTokenType.MenuOption},MenuOptionBlock:{name:"MenuOptionBlock",value:i.MetaTokenType.MenuOptionBlock},LabelStatement:{name:"LabelStatement",value:i.MetaTokenType.LabelStatement},LabelCall:{name:"LabelCall",value:i.MetaTokenType.LabelCall},LabelAccess:{name:"LabelAccess",value:i.MetaTokenType.LabelAccess},BehindStatement:{name:"BehindStatement",value:i.MetaTokenType.BehindStatement},OnlayerStatement:{name:"OnlayerStatement",value:i.MetaTokenType.OnlayerStatement},ZorderStatement:{name:"ZorderStatement",value:i.MetaTokenType.ZorderStatement},AtStatement:{name:"AtStatement",value:i.MetaTokenType.AtStatement},AsStatement:{name:"AsStatement",value:i.MetaTokenType.AsStatement},WithStatement:{name:"WithStatement",value:i.MetaTokenType.WithStatement},ImageStatement:{name:"ImageStatement",value:i.MetaTokenType.ImageStatement},CameraStatement:{name:"CameraStatement",value:i.MetaTokenType.CameraStatement},SceneStatement:{name:"SceneStatement",value:i.MetaTokenType.SceneStatement},ShowStatement:{name:"ShowStatement",value:i.MetaTokenType.ShowStatement},HideStatement:{name:"HideStatement",value:i.MetaTokenType.HideStatement},CallStatement:{name:"CallStatement",value:i.MetaTokenType.CallStatement},CallArguments:{name:"CallArguments",value:i.MetaTokenType.CallArguments},FromClause:{name:"FromClause",value:i.MetaTokenType.FromClause},FromArguments:{name:"FromArguments",value:i.MetaTokenType.FromArguments},JumpStatement:{name:"JumpStatement",value:i.MetaTokenType.JumpStatement},PlayAudioStatement:{name:"PlayAudioStatement",value:i.MetaTokenType.PlayAudioStatement},QueueAudioStatement:{name:"QueueAudioStatement",value:i.MetaTokenType.QueueAudioStatement},StopAudioStatement:{name:"StopAudioStatement",value:i.MetaTokenType.StopAudioStatement},ScreenStatement:{name:"ScreenStatement",value:i.MetaTokenType.ScreenStatement},ScreenSensitive:{name:"ScreenSensitive",value:i.MetaTokenType.ScreenSensitive},ScreenFrame:{name:"ScreenFrame",value:i.MetaTokenType.ScreenFrame},ScreenFrameStatement:{name:"ScreenFrameStatement",value:i.MetaTokenType.ScreenFrameStatement},ScreenWindow:{name:"ScreenWindow",value:i.MetaTokenType.ScreenWindow},ScreenWindowStatement:{name:"ScreenWindowStatement",value:i.MetaTokenType.ScreenWindowStatement},ScreenText:{name:"ScreenText",value:i.MetaTokenType.ScreenText},ScreenBlock:{name:"ScreenBlock",value:i.MetaTokenType.ScreenBlock},ScreenVboxStatement:{name:"ScreenVboxStatement",value:i.MetaTokenType.ScreenVboxStatement},ScreenHboxStatement:{name:"ScreenHboxStatement",value:i.MetaTokenType.ScreenHboxStatement},StyleStatement:{name:"StyleStatement",value:i.MetaTokenType.StyleStatement},StyleParameters:{name:"StyleParameters",value:i.MetaTokenType.StyleParameters},StyleBlock:{name:"StyleBlock",value:i.MetaTokenType.StyleBlock},NarratorSayStatement:{name:"NarratorSayStatement",value:i.MetaTokenType.NarratorSayStatement},SayStatement:{name:"SayStatement",value:i.MetaTokenType.SayStatement},CharacterNameString:{name:"CharacterNameString",value:i.MetaTokenType.CharacterNameString},SayNarrator:{name:"SayNarrator",value:i.MetaTokenType.SayNarrator},SayCharacter:{name:"SayCharacter",value:i.MetaTokenType.SayCharacter},AtParameters:{name:"AtParameters",value:i.MetaTokenType.AtParameters},AsParameters:{name:"AsParameters",value:i.MetaTokenType.AsParameters},BehindParameters:{name:"BehindParameters",value:i.MetaTokenType.BehindParameters},OnlayerParameters:{name:"OnlayerParameters",value:i.MetaTokenType.OnlayerParameters},WithParameters:{name:"WithParameters",value:i.MetaTokenType.WithParameters},ZorderParameters:{name:"ZorderParameters",value:i.MetaTokenType.ZorderParameters},PauseStatement:{name:"PauseStatement",value:i.MetaTokenType.PauseStatement},PauseParameters:{name:"PauseParameters",value:i.MetaTokenType.PauseParameters},ATLBlock:{name:"ATLBlock",value:i.MetaTokenType.ATLBlock},ATLChoiceBlock:{name:"ATLChoiceBlock",value:i.MetaTokenType.ATLChoiceBlock},TransformBlock:{name:"TransformBlock",value:i.MetaTokenType.TransformBlock},ATLContains:{name:"ATLContains",value:i.MetaTokenType.ATLContains},ATLWith:{name:"ATLWith",value:i.MetaTokenType.ATLWith},ATLEvent:{name:"ATLEvent",value:i.MetaTokenType.ATLEvent},ATLFunction:{name:"ATLFunction",value:i.MetaTokenType.ATLFunction},ATLWarper:{name:"ATLWarper",value:i.MetaTokenType.ATLWarper},ATLOnStatement:{name:"ATLOnStatement",value:i.MetaTokenType.ATLOnStatement},ATLOnParameters:{name:"ATLOnParameters",value:i.MetaTokenType.ATLOnParameters},ATLChoiceStatement:{name:"ATLChoiceStatement",value:i.MetaTokenType.ATLChoiceStatement},ATLChoiceParameters:{name:"ATLChoiceParameters",value:i.MetaTokenType.ATLChoiceParameters},ATLBlockStatement:{name:"ATLBlockStatement",value:i.MetaTokenType.ATLBlockStatement},ATLParallelStatement:{name:"ATLParallelStatement",value:i.MetaTokenType.ATLParallelStatement},ATLContainsStatement:{name:"ATLContainsStatement",value:i.MetaTokenType.ATLContainsStatement},TransformStatement:{name:"TransformStatement",value:i.MetaTokenType.TransformStatement},TransformParameters:{name:"TransformParameters",value:i.MetaTokenType.TransformParameters},MemberAccess:{name:"MemberAccess",value:i.MetaTokenType.MemberAccess},ItemAccess:{name:"ItemAccess",value:i.MetaTokenType.ItemAccess},IndexedName:{name:"IndexedName",value:i.MetaTokenType.IndexedName},Attribute:{name:"Attribute",value:i.MetaTokenType.Attribute},ClassDefinition:{name:"ClassDefinition",value:i.MetaTokenType.ClassDefinition},ClassInheritance:{name:"ClassInheritance",value:i.MetaTokenType.ClassInheritance},FunctionDefinition:{name:"FunctionDefinition",value:i.MetaTokenType.FunctionDefinition},LambdaFunction:{name:"LambdaFunction",value:i.MetaTokenType.LambdaFunction},FunctionLambdaParameters:{name:"FunctionLambdaParameters",value:i.MetaTokenType.FunctionLambdaParameters},FunctionParameters:{name:"FunctionParameters",value:i.MetaTokenType.FunctionParameters},FunctionDecorator:{name:"FunctionDecorator",value:i.MetaTokenType.FunctionDecorator},FunctionCall:{name:"FunctionCall",value:i.MetaTokenType.FunctionCall},FunctionCallGeneric:{name:"FunctionCallGeneric",value:i.MetaTokenType.FunctionCallGeneric},Fstring:{name:"Fstring",value:i.MetaTokenType.Fstring},InterpolateFlags:{name:"InterpolateFlags",value:i.MetaTokenType.InterpolateFlags},ControlFlowKeyword:{name:"ControlFlowKeyword",value:i.MetaTokenType.ControlFlowKeyword},LogicalOperatorKeyword:{name:"LogicalOperatorKeyword",value:i.MetaTokenType.LogicalOperatorKeyword},Operator:{name:"Operator",value:i.MetaTokenType.Operator},ArithmeticOperator:{name:"ArithmeticOperator",value:i.MetaTokenType.ArithmeticOperator},BitwiseOperatorKeyword:{name:"BitwiseOperatorKeyword",value:i.MetaTokenType.BitwiseOperatorKeyword},ComparisonOperatorKeyword:{name:"ComparisonOperatorKeyword",value:i.MetaTokenType.ComparisonOperatorKeyword},ConstantLiteral:{name:"ConstantLiteral",value:i.MetaTokenType.ConstantLiteral},ConstantNumeric:{name:"ConstantNumeric",value:i.MetaTokenType.ConstantNumeric},ConstantCaps:{name:"ConstantCaps",value:i.MetaTokenType.ConstantCaps},BuiltinExceptionType:{name:"BuiltinExceptionType",value:i.MetaTokenType.BuiltinExceptionType},BuiltinType:{name:"BuiltinType",value:i.MetaTokenType.BuiltinType},MagicVariable:{name:"MagicVariable",value:i.MetaTokenType.MagicVariable},EscapeSequence:{name:"EscapeSequence",value:i.MetaTokenType.EscapeSequence},FormatPercent:{name:"FormatPercent",value:i.MetaTokenType.FormatPercent},FormatBrace:{name:"FormatBrace",value:i.MetaTokenType.FormatBrace},StringStorageType:{name:"StringStorageType",value:i.MetaTokenType.StringStorageType},FormatStorageType:{name:"FormatStorageType",value:i.MetaTokenType.FormatStorageType},ImaginaryNumberStorageType:{name:"ImaginaryNumberStorageType",value:i.MetaTokenType.ImaginaryNumberStorageType},NumberStorageType:{name:"NumberStorageType",value:i.MetaTokenType.NumberStorageType},ClassStorageType:{name:"ClassStorageType",value:i.MetaTokenType.ClassStorageType},CommentBegin:{name:"CommentBegin",value:i.MetaTokenType.CommentBegin},CommentEnd:{name:"CommentEnd",value:i.MetaTokenType.CommentEnd},Backreference:{name:"Backreference",value:i.MetaTokenType.Backreference},BackreferenceNamed:{name:"BackreferenceNamed",value:i.MetaTokenType.BackreferenceNamed},CharacterSet:{name:"CharacterSet",value:i.MetaTokenType.CharacterSet},Named:{name:"Named",value:i.MetaTokenType.Named},ModifierFlagStorageType:{name:"ModifierFlagStorageType",value:i.MetaTokenType.ModifierFlagStorageType}};function g(e){return n.tokenTypeToStringMap[e]}n.tokenTypeToStringMap=Object.fromEntries(Object.entries(p).map((([,e])=>[e.value,e.name])))},7419:function(e,n,t){var a=this&&this.__createBinding||(Object.create?function(e,n,t,a){void 0===a&&(a=t);var i=Object.getOwnPropertyDescriptor(n,t);i&&!("get"in i?!n.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,a,i)}:function(e,n,t,a){void 0===a&&(a=t),e[a]=n[t]}),i=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&a(n,e,t);return i(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.ScreenPatterns=n.PythonPatterns=n.StylePatterns=n.AtlPatterns=n.RenpyPatterns=void 0;const s=o(t(1694));n.RenpyPatterns=s;const r=o(t(9365));n.AtlPatterns=r;const l=o(t(3839));n.StylePatterns=l;const h=o(t(2810));n.PythonPatterns=h;const c=o(t(3496));n.ScreenPatterns=c,s.literal.patterns.push(h.literal),s.parenthesizedPython.patterns[0].patterns.push(h.expression),s.parenthesizedPython.patterns[1].patterns.push(h.expression),s.parenthesizedPython.patterns[2].patterns.push(h.expression),s.simpleExpression.patterns.splice(0,0,h.string),s.simpleExpression.patterns.splice(3,0,h.memberAccess),s.simpleExpression.patterns.splice(4,0,h.functionCall),s.constantPlaceholder.captures[2].patterns.push(h.expression),s.pythonStatements.patterns[1].patterns.push(h.python),s.pythonBlockTester.patterns[0].patterns.push(h.python),s.pythonBlockTester.patterns[1].patterns.push(h.python),s.define.patterns.splice(2,0,h.expression),s.define.patterns[3].patterns.splice(0,0,h.expression),s.defaultStatement.patterns.splice(1,0,h.expression),s.defaultStatement.patterns[2].patterns.splice(0,0,h.expression),s.oneLinePython.patterns.splice(1,0,h.expression),s.sayStatements.patterns[0].endCaptures[3].patterns.push(h.oddFunctionCall),s.sayStatements.patterns[1].endCaptures[3].patterns.push(h.oddFunctionCall),s.conditionals.patterns.splice(0,0,h.expression),s.labelName.patterns.splice(0,0,h.builtinPossibleCallables),s.labelCall.patterns.splice(0,0,h.specialVariables),s.labelCall.patterns.push(h.functionArguments),s.labelDefName.patterns.splice(0,0,h.builtinPossibleCallables),s.label.captures[2].patterns.splice(1,0,h.parameters),s.returnStatements.patterns.push(h.expression),s.callJumpExpression.patterns.push(h.expression),s.callPass.patterns.splice(0,0,h.functionArguments),s.menuOption.beginCaptures[3].patterns.splice(0,0,h.oddFunctionCall),s.menuOption.beginCaptures[3].patterns[1].patterns.push(h.expression),s.menuSet.patterns.push(h.expression),s.menu.beginCaptures[3].patterns[1].patterns.push(h.functionArguments),s.audioParams.patterns.push(h.number),s.play.patterns[0].patterns.splice(2,0,h.expression),s.queue.patterns[0].patterns.splice(2,0,h.expression),s.stop.patterns[0].patterns.splice(1,0,h.number),s.renpyStatements.patterns.splice(5,0,r.transform),s.renpyStatements.patterns.splice(6,0,r.atlBlockTester),s.renpyStatements.patterns.splice(13,0,c.screen),s.renpyStatements.patterns.splice(14,0,l.style),r.atl.patterns.splice(0,0,s.conditionals),r.atlSimpleExpression.patterns.splice(0,0,s.renpyOnlyExpressions),r.atlSimpleExpression.patterns.splice(2,0,h.memberAccess),r.atlSimpleExpression.patterns.splice(3,0,h.illegalOperator),r.atlSimpleExpression.patterns.splice(4,0,h.operator),r.atlSimpleExpression.patterns.splice(5,0,h.curlyBraces),r.atlSimpleExpression.patterns.splice(6,0,h.itemAccess),r.atlSimpleExpression.patterns.splice(7,0,h.list),r.atlSimpleExpression.patterns.splice(8,0,h.oddFunctionCall),r.atlSimpleExpression.patterns.splice(9,0,h.roundBraces),r.atlSimpleExpression.patterns.splice(10,0,h.functionCall),r.atlSimpleExpression.patterns.splice(11,0,h.builtinFunctions),r.atlSimpleExpression.patterns.splice(12,0,h.builtinTypes),r.atlSimpleExpression.patterns.splice(13,0,h.builtinExceptions),r.atlSimpleExpression.patterns.splice(14,0,h.magicNames),r.atlSimpleExpression.patterns.splice(15,0,h.specialNames),r.atlSimpleExpression.patterns.splice(16,0,h.illegalNames),r.atlSimpleExpression.patterns.splice(17,0,h.specialVariables),r.atlSimpleExpression.patterns.splice(18,0,h.ellipsis),r.atlSimpleExpression.patterns.splice(19,0,h.punctuation),r.atlSimpleExpression.patterns.splice(20,0,h.lineContinuation),r.atlSimpleExpression.patterns.push(s.whitespace),r.atlExpression.patterns.push(h.expression),r.atlKeywords.patterns.push(s.keywords),r.atlEventName.patterns.splice(0,0,h.builtinPossibleCallables),r.atlEventDefName.patterns.splice(0,0,h.builtinPossibleCallables),r.atlOn.patterns.push(s.comments),r.atlFunction.captures[2].patterns.splice(0,0,h.builtinPossibleCallables),r.atlWarperName.patterns.splice(0,0,h.builtinPossibleCallables),r.atlFallback.patterns.push(s.basePatterns),r.atlBlockTester.patterns.push(r.atl),c.screenDefName.patterns.splice(0,0,h.builtinPossibleCallables),c.screenSimpleExpression.patterns.splice(0,0,s.renpyOnlyExpressions),c.screenSimpleExpression.patterns.splice(2,0,h.memberAccess),c.screenSimpleExpression.patterns.splice(3,0,h.illegalOperator),c.screenSimpleExpression.patterns.splice(4,0,h.operator),c.screenSimpleExpression.patterns.splice(5,0,h.curlyBraces),c.screenSimpleExpression.patterns.splice(6,0,h.itemAccess),c.screenSimpleExpression.patterns.splice(7,0,h.list),c.screenSimpleExpression.patterns.splice(8,0,h.oddFunctionCall),c.screenSimpleExpression.patterns.splice(9,0,h.roundBraces),c.screenSimpleExpression.patterns.splice(10,0,h.functionCall),c.screenSimpleExpression.patterns.splice(11,0,h.builtinFunctions),c.screenSimpleExpression.patterns.splice(12,0,h.builtinTypes),c.screenSimpleExpression.patterns.splice(13,0,h.builtinExceptions),c.screenSimpleExpression.patterns.splice(14,0,h.magicNames),c.screenSimpleExpression.patterns.splice(15,0,h.specialNames),c.screenSimpleExpression.patterns.splice(16,0,h.illegalNames),c.screenSimpleExpression.patterns.splice(17,0,h.specialVariables),c.screenSimpleExpression.patterns.splice(18,0,h.ellipsis),c.screenSimpleExpression.patterns.splice(19,0,h.punctuation),c.screenSimpleExpression.patterns.splice(20,0,h.lineContinuation),c.screenSimpleExpression.patterns.push(s.whitespace),c.screenText.patterns.push(s.atStatement),c.screenText.patterns[0].patterns.push(r.atl),c.screenText.patterns[1].patterns.splice(0,0,s.strings),c.screen.patterns[0].patterns.splice(1,0,h.parameters),c.screen.patterns[0].patterns.push(s.fallbackPatterns),c.screenFallback.patterns.push(s.basePatterns),c.screenLanguage.patterns.splice(0,0,s.define),c.screenLanguage.patterns.splice(1,0,s.defaultStatement),c.screenLanguage.patterns.splice(2,0,s.conditionals),c.screenLanguage.patterns.splice(3,0,s.pythonStatements),l.styleBlockTester.patterns[0].patterns.push(s.fallbackPatterns),l.styleClause.patterns[0].patterns.push(s.fallbackPatterns),l.styleClause.patterns[2].patterns.push(s.name,s.fallbackPatterns),l.styleClause.patterns[4].patterns.push(s.simpleExpression),l.styleClause.patterns[5].patterns.push(s.simpleExpression),l.style.patterns.push(s.fallbackPatterns),h.comments.patterns.splice(0,0,s.regionComment),h.comments.patterns.push(s.commentsBase),h.docstring.patterns[0].patterns.splice(1,0,s.codetags),h.docstring.patterns[1].patterns.push(s.codetags),h.docstring.patterns[2].patterns.splice(0,0,s.codetags),h.docstring.patterns[3].patterns.push(s.codetags),h.stringUnicodeGuts.patterns.splice(0,0,s.stringsInterior),h.commentsStringSingleThree.patterns.push(s.codetags),h.commentsStringDoubleThree.patterns.push(s.codetags),h.singleOneRegexpComments.patterns.push(s.codetags),h.singleThreeRegexpComments.patterns.push(s.codetags),h.doubleOneRegexpComments.patterns.push(s.codetags),h.doubleThreeRegexpComments.patterns.push(s.codetags)},7414:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.Tokenizer=void 0;const a=t(4236),i=t(2987),o=t(1398),s=t(7957),r=t(7419),l=t(3150),h=t(4483),c=t(1377),d=t(1487),u=t(2144),p=e=>{if(void 0!==e)return null===e?null:{...e}};class g{static _uniquePatternCount=-1;static _tokenCache=new Map;static get UNIQUE_PATTERN_COUNT(){return this._uniquePatternCount}static async tokenizeDocument(e){this.setupAndValidatePatterns();const n=this._tokenCache.get(e.uri);return n?.documentVersion===e.version?n.tokens:await this.runTokenizer(e)}static clearTokenCache(){this._tokenCache.clear()}static async runTokenizer(e){(0,c.logCatMessage)(o.LogLevel.Info,c.LogCategory.Tokenizer,`Running tokenizer on document: ${e.fileName}`);const n=new y(e);return await Promise.resolve(n.tokenize()),(0,c.logCatMessage)(o.LogLevel.Info,c.LogCategory.Tokenizer,"Tokenizer completed!"),this._tokenCache.set(e.uri,{documentVersion:e.version,tokens:n.tokens}),n.tokens}static benchmark(e){const n=1e4;(0,c.logCatMessage)(o.LogLevel.Info,c.LogCategory.Tokenizer,"Running tokenizer benchmark for 10000 loops...");let t=0;for(let a=0;a<n;++a){const s=i.performance.now(),r=new y(e);t+=i.performance.now()-s,r.tokens.isEmpty()&&(0,c.logCatMessage)(o.LogLevel.Error,c.LogCategory.Tokenizer,"No tokens were found.");const l=t/(a+1),h=l*(n-a+1)*.001,d=Math.floor(h/3600),u=Math.floor(h/60%60),p=Math.ceil(h%60),g=[!!d&&d+"h",!!u&&u+"m",!!p&&p+"s"].filter(Boolean).join(":").replace(/\b(\d)(?=[hms])/g,"0$1");a%100==0&&(0,c.logCatMessage)(o.LogLevel.Info,c.LogCategory.Tokenizer,`${a/100}% complete... (avg.: ${l.toFixed(2)}ms, approx. ${g} remaining)`)}t/=n,(0,c.logCatMessage)(o.LogLevel.Info,c.LogCategory.Tokenizer,`DocumentTokenizer took ${t} avg. milliseconds to complete.`)}static setupAndValidatePatterns(){if(-1!==this._uniquePatternCount)return;this._uniquePatternCount=0;const e=new l.Stack(32);e.push(r.RenpyPatterns.basePatterns);const n=/(?<!\[)[\^$]/g,t=/\(\\G\)|\(\?!\\G\)/g;for(;!e.isEmpty();){const i=e.pop();if((0,a.assert)(void 0!==i,"This pattern is undefined! Please make sure that circular includes are added after both patterns are defined."),void 0===i._patternId||-1===i._patternId)if(i._patternId=this._uniquePatternCount,++this._uniquePatternCount,(0,s.isRepoPattern)(i)){i._patternType=f.RepoPattern;for(let n=0;n<i.patterns.length;++n)e.push(i.patterns[n])}else if((0,s.isRangePattern)(i)){i._patternType=f.RangePattern;let o=i.begin.source;o.match(n)&&(0,a.assert)(i.begin.multiline,"To match this pattern the 'm' flag is required on the begin RegExp!"),t.test(o)&&((0,a.assert)("Can't use the \\G anchor, please update the regex!"),o=o.replace(t,"")),(0,a.assert)(i.begin.global&&i.end.global,"To match this pattern the 'g' flag is required on the begin and end RegExp!"),i.beginCaptures?((0,a.assert)(i.begin.hasIndices,"To match this begin pattern the 'd' flag is required!"),Object.entries(i.beginCaptures).forEach((([,n])=>{n.patterns&&e.push(n)}))):(0,a.assert)(!i.begin.hasIndices,"This pattern should not have the 'd' flag set!"),i.endCaptures?((0,a.assert)(i.end.hasIndices,"To match this end pattern the 'd' flag is required!"),Object.entries(i.endCaptures).forEach((([,n])=>{n.patterns&&e.push(n)}))):(0,a.assert)(!i.end.hasIndices,"This pattern should not have the 'd' flag set!"),i.patterns&&(i._patternsRepo={patterns:i.patterns,_patternId:-1,_patternType:f.RepoPattern},e.push(i._patternsRepo));let s=i.end.source;n.test(s)&&(0,a.assert)(i.end.multiline,"To match this pattern the 'm' flag is required on the end RegExp!"),i._endNotG=!1,t.test(s)&&(s.startsWith("(?!\\G)")?i._endNotG=!0:((0,a.assert)("The end patterns only supports (?!\\G) at the start of the regex. Please update the regex!"),s=s.replace(t,""))),i._hasBackref=/\\\d+/.test(s),s=s.replaceAll("\\Z","$(?!\r\n|\r|\n)"),s=s.replaceAll("\\R","(?!\r\n|\r|\n)"),i.begin=new RegExp(o,i.begin.flags),i.end=new RegExp(s,i.end.flags)}else(0,s.isMatchPattern)(i)?(i._patternType=f.MatchPattern,i.match.source.match(n)&&(0,a.assert)(i.match.multiline,"To match this pattern the 'm' flag is required!"),(0,a.assert)(i.match.global,"To match this pattern the 'g' flag is required!"),i.captures?((0,a.assert)(i.match.hasIndices,"To match this pattern the 'd' flag is required!"),Object.entries(i.captures).forEach((([,n])=>{n.patterns&&e.push(n)}))):(0,a.assert)(!i.match.hasIndices,"This pattern should not have the 'd' flag set!")):(0,a.assert)(!1,"Should not get here!")}}}var m,f;n.Tokenizer=g,function(e){e[e.MatchCaptures=0]="MatchCaptures",e[e.BeginCaptures=1]="BeginCaptures",e[e.EndCaptures=2]="EndCaptures"}(m||(m={}));class y{backrefTestRe=/\\(\d+)/g;tokens=new s.TokenTree;document;constructor(e){this.document=e}tokenize(){const e=this.document.getText();this.executePattern(r.RenpyPatterns.basePatterns,e,new s.Range(0,e.length),this.tokens.root)}checkTokenTreeCoverage(e,n){const t=new h.Vector(e.count());e.token&&t.pushBack(e.token.getRange()),e.forEach((e=>{e.token&&t.pushBack(e.token.getRange())})),t.sort(((e,n)=>e.start-n.start));let a=n.start;const i=[];for(const e of t){if(!n.contains(e.start))return{valid:!1,gaps:i};e.start>a&&i.push(new s.Range(a,e.start)),a=Math.max(a,e.end)}return a<n.end&&i.push(new s.Range(a,n.end)),{valid:0===i.length,gaps:i}}applyCaptures(e,n,t,a,i){const r=n===m.MatchCaptures?e.captures:n===m.BeginCaptures?e.beginCaptures:e.endCaptures;if(void 0===r||void 0===t.indices)return;let l=i;void 0!==r[0]&&(l=new s.TreeNode,i.addChild(l));for(let i=1;i<t.indices.length;i++){if(void 0===t.indices[i])continue;const[h,d]=t.indices[i];if(void 0===r[i]){const a=this.positionAt(h);if(!(0,u.isShippingBuild)()){if(n===m.BeginCaptures&&void 0!==e.end&&new RegExp(`\\\\${i}`,"g").test(e.end.source))continue;(0,c.logCatMessage)(o.LogLevel.Debug,c.LogCategory.Tokenizer,`There is no pattern defined for capture group '${i}', on a pattern that matched '${t[i]}' near L:${a.line+1} C:${a.character+1}.\nThis should probably be added or be a non-capturing group.`)}continue}const p=r[i],g=new s.TreeNode;p.token&&(g.token=new s.Token(p.token,this.positionAt(h),this.positionAt(d))),p.patterns&&this.executePattern(p,a,new s.Range(h,d),g),g.isEmpty()||l.addChild(g)}if(void 0!==r[0]){const e=r[0],n=t[0],i=t.index,o=i+n.length;if(e.token&&(l.token=new s.Token(e.token,this.positionAt(i),this.positionAt(o))),e.patterns){const n=new s.TreeNode;l.addChild(n),this.executePattern(e,a,new s.Range(i,o),n)}}}scanMatchPattern(e,n,t){const a=e.match;a.lastIndex=t;const i=a.exec(n);return i?{pattern:e,matchBegin:i}:null}scanRangePattern(e,n,t){const a=e.begin;a.lastIndex=t;const i=a.exec(n);return i?{pattern:e,matchBegin:i,matchEnd:null,expanded:!1,contentMatches:null,source:n}:null}expandRangeScanResult(e,n){const t=e.pattern,a=e.matchBegin;let i=t.end;if(t._hasBackref){let e=t.end.source;this.backrefTestRe.lastIndex=0,e=e.replace(this.backrefTestRe,((e,n)=>{const t=a.at(parseInt(n,10));return void 0!==t?(0,d.escapeRegExpCharacters)(t):((0,c.logCatMessage)(o.LogLevel.Warning,c.LogCategory.Tokenizer,`Could not find content to replace backreference ${n}!`),"")})),i=new RegExp(e,t.end.flags)}i.lastIndex=a.index+a[0].length,t._endNotG&&++i.lastIndex;let r=i.exec(e.source);const h=new l.Stack;if(!r){const n=/$(?!\r\n|\r|\n)/dg;n.lastIndex=Math.max(0,e.source.length-1),r=n.exec(e.source)}if(r&&t._patternsRepo){const l=new s.Range(a.index+a[0].length,r.index),d=(e=>{const n=new Array(e.length);for(let t=0;t<e.length;++t)n[t]=p(e[t]);return n})(n);let u=l.end,g=l.start;for(;g<u;){const a=this.scanPattern(t._patternsRepo,e.source,g,d);if(!a||a.matchBegin.index>=u)break;const s=g,l=a.matchBegin;if(a.pattern._patternType===f.RangePattern){a?.pattern._patternType!==f.RangePattern||a.expanded||this.expandRangeScanResult(a,n);const e=a.matchEnd;g=e.index+e[0].length}else g=l.index+l[0].length;if(s===g){(0,c.logCatMessage)(o.LogLevel.Error,c.LogCategory.Tokenizer,"The range expand loop has not advanced since the last cycle. This indicates a programming error. Breaking the loop!");break}if(h.push(a),!(g<=u)){if(i.lastIndex=g,r=i.exec(e.source),!r)break;u=r.index}}}if(!r){const n=/$(?!\r\n|\r|\n)/g;n.lastIndex=Math.max(0,e.source.length-1),r=n.exec(e.source)}e.matchEnd=r,e.contentMatches=h,e.expanded=!0}scanPattern(e,n,t,i){if(0===e.patterns.length)return null;const o=i[e._patternId];if(void 0!==o&&(null===o||o.matchBegin.index>=t))return o?.pattern._patternType!==f.RangePattern||o.expanded||this.expandRangeScanResult(o,i),o;let s=Number.MAX_VALUE,r=null;const l=e.patterns.length;let h=null;for(let o=0;o<l;o++){const l=e.patterns[o];h=null;const c=i[l._patternId];if(void 0!==c){if(null===c)continue;c.matchBegin.index>=t&&(h=c)}if(null===h){switch(l._patternType){case f.MatchPattern:h=this.scanMatchPattern(l,n,t);break;case f.RangePattern:h=this.scanRangePattern(l,n,t);break;case f.RepoPattern:h=this.scanPattern(l,n,t,i);break;default:(0,a.assert)(!1,"Invalid TokenPatternType found! If this triggers, setupAndValidatePatterns() didn't assign the PatternStateProperties properly.")}i[l._patternId]=h}if(!h)continue;const d=h.matchBegin.index;if(!(d>=s)&&(s=d,r=h,s===t))break}return i[e._patternId]=r,r}executeRangePattern(e,n,t){if(!e)return;(0,a.assert)(e.expanded,"A range pattern should always be expanded on execute.");const i=e.pattern,r=e.matchBegin,l=e.matchEnd,h=r.index,d=l.index+l[0].length,u=r.index+r[0].length,p=l.index,g=new s.TreeNode;i.token&&(g.token=new s.Token(i.token,this.positionAt(h),this.positionAt(d))),this.applyCaptures(i,m.BeginCaptures,r,n,g);const f=new s.TreeNode;if(i.contentToken&&u!==p&&(f.token=new s.Token(i.contentToken,this.positionAt(u),this.positionAt(p))),i._patternsRepo)for(;!e.contentMatches.isEmpty();){const t=e.contentMatches.pop();this.applyScanResult(t,n,f)}f.isEmpty()||g.addChild(f),this.applyCaptures(i,m.EndCaptures,l,n,g);const y=this.checkTokenTreeCoverage(g,new s.Range(h,d));if(!y.valid){(0,c.logCatMessage)(o.LogLevel.Debug,c.LogCategory.Tokenizer,"The token tree is not covering the entire match range!");for(const e of y.gaps){const n=this.document.positionAt(e.start),t=this.document.positionAt(e.end),a=this.document.getText(new o.Range(n,t));(0,c.logCatMessage)(o.LogLevel.Debug,c.LogCategory.Tokenizer,`Gap from L:${n.line+1} C:${n.character+1} to L:${t.line+1} C:${t.character+1}, Text: '${a}'`)}}t.addChild(g)}executeMatchPattern(e,n,t){const i=e.pattern,r=e.matchBegin,l=new s.TreeNode,h=r.index,d=h+r[0].length;i.token&&(l.token=new s.Token(i.token,this.positionAt(h),this.positionAt(d))),this.applyCaptures(i,m.MatchCaptures,r,n,l);const u=this.checkTokenTreeCoverage(l,new s.Range(h,d));if(!u.valid){(0,c.logCatMessage)(o.LogLevel.Debug,c.LogCategory.Tokenizer,"The token tree is not covering the entire match range!");for(const e of u.gaps){const n=this.document.positionAt(e.start),t=this.document.positionAt(e.end),a=this.document.getText(new o.Range(n,t));(0,c.logCatMessage)(o.LogLevel.Debug,c.LogCategory.Tokenizer,`Gap from L${n.line+1}:${n.character+1} to L${t.line+1}:${t.character+1}, Text: '${a}'`)}}(0,a.assert)(i.token||i.captures,"A MatchPattern must have either a token or captures!"),(0,a.assert)(!l.isEmpty(),"A MatchPattern must produce a valid token tree!"),t.addChild(l)}applyScanResult(e,n,t){switch(e.pattern._patternType){case f.RangePattern:this.executeRangePattern(e,n,t);break;case f.MatchPattern:this.executeMatchPattern(e,n,t);break;default:(0,a.assert)(!1,"Should not get here!")}}executePattern(e,n,t,a){if(0===n.length)return;const i=new Array(g.UNIQUE_PATTERN_COUNT).fill(void 0),s=t.end;let r=t.start;for(;r<s;){const t=this.scanPattern(e,n,r,i);if(!t)break;const l=t.matchBegin,h=l.index+l[0].length;if(l.index>=s||h>s)break;const d=r;if(t.pattern._patternType===f.RangePattern){t?.pattern._patternType!==f.RangePattern||t.expanded||this.expandRangeScanResult(t,i);const e=t.matchEnd;r=e.index+e[0].length}else r=h;if(d===r){(0,c.logCatMessage)(o.LogLevel.Error,c.LogCategory.Tokenizer,"The loop has not advanced since the last cycle. This indicates a programming error. Breaking the loop!");break}this.applyScanResult(t,n,a)}}positionAt(e){const n=this.document.positionAt(e);return new s.TokenPosition(n.line,n.character,e)}}!function(e){e[e.RepoPattern=0]="RepoPattern",e[e.RangePattern=1]="RangePattern",e[e.MatchPattern=2]="MatchPattern"}(f||(f={}))},719:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.getAllOpenTabInputTextUri=function(){const e=[];return a.window.tabGroups.all.flatMap((e=>e.tabs.map((e=>e)))).forEach((n=>{n.input instanceof a.TabInputText&&e.push(n.input.uri)})),e};const a=t(1398)},5238:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.HashSet=n.ValueEqualsSet=void 0;class t extends Set{add(e){return this.has(e)||super.add(e),this}addRange(e){for(const n of e)this.add(n);return this}has(e){for(const n of this.values())if(n.equals(e))return!0;return!1}toArray(){return Array.from(this)}}n.ValueEqualsSet=t;class a{_hash;_buckets=[];_size=0;constructor(e){this._hash=e}get size(){return this._size}add(e){const n=this._hash(e),t=this._buckets[n];void 0===t?this._buckets[n]=[e]:t.includes(e)||t.push(e),this._size++}addRange(e){for(const n of e)this.add(n)}has(e){const n=this._hash(e),t=this._buckets[n];return void 0!==t&&t.includes(e)}remove(e){const n=this._hash(e),t=this._buckets[n];if(void 0!==t){const n=t.indexOf(e);n>=0&&(t.splice(n,1),this._size--)}}[Symbol.iterator](){let e=0,n=0,t=this._buckets[0];return{next:()=>{for(;void 0===t||e>=t.length;)t=this._buckets[++n],e=0;return{value:t[e++],done:!1}}}}toArray(){const e=[];for(const n of this._buckets)void 0!==n&&e.push(...n);return e}}n.HashSet=a},3150:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.Stack=void 0;const a=t(4483);class i{buffer;constructor(e=0){this.buffer=new a.Vector(e)}clone(){const e=new i(this.capacity);return e.buffer=this.buffer.clone(),e}[Symbol.iterator](){let e=0;return{next:()=>e>=this.size?{done:!0,value:null}:{done:!1,value:this.buffer.at(e++)}}}push(e){this.buffer.pushBack(e)}pop(){if(this.buffer.isEmpty())throw new RangeError("Stack was already empty. Can't pop another item.");return this.buffer.popBack()}peek(){return this.buffer.back()}get capacity(){return this.buffer.capacity}get size(){return this.buffer.size}isEmpty(){return this.buffer.isEmpty()}clear(e=!1){this.buffer.clear(e)}}n.Stack=i},1487:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.escapeRegExpCharacters=function(e){return e.replace(/[-\\{}*+?|^$.,[\]()#\s]/g,"\\$&")},n.withTimeout=function(e,n,t,a){const i=new Promise(((e,i)=>{setTimeout((()=>{t&&t(),i(a||`Promise timed out after ${n}ms.`)}),n)}));return Promise.race([e,i])}},4483:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.Vector=void 0;class t{buffer=[];headPtr=-1;itemCount=0;tailRef=null;headRef=null;constructor(e=0){e>0&&(this.buffer=new Array(e).fill(null))}clone(){const e=new t(this.capacity);return e.buffer=this.buffer.slice(),e.headPtr=this.headPtr,e.itemCount=this.itemCount,e.tailRef=this.tailRef,e.headRef=this.headRef,e}[Symbol.iterator](){let e=0;return{next:()=>e>=this.size?{done:!0,value:null}:{done:!1,value:this.buffer[e++]}}}pushBack(e){this.size===this.capacity&&this._grow(),++this.itemCount,++this.headPtr,this.buffer[this.headPtr]=e,this.headRef=this.buffer[this.headPtr],0===this.headPtr&&(this.tailRef=this.buffer[this.headPtr])}sort(e){this.buffer.sort(((n,t)=>null===n||null===t?0:e(n,t)))}popBack(){if(-1===this.headPtr)throw new RangeError("Vector was already empty. Can't pop another item.");const e=this.buffer[this.headPtr];return this.buffer[this.headPtr]=null,--this.itemCount,--this.headPtr,this.isEmpty()?(this.headRef=null,this.tailRef=null):this.headRef=this.buffer[this.headPtr],e}at(e){if(e<0||e>=this.itemCount)throw new RangeError("Index out of range");return this.buffer[e]}front(){return this.tailRef}back(){return this.headRef}insert(e,n){if(n<0||n>=this.itemCount)throw new RangeError("Index out of range");this.size===this.capacity&&this._grow();for(let e=this.itemCount;e>n;--e)this.buffer[e]=this.buffer[e-1];this.buffer[n]=e,++this.itemCount,++this.headPtr}erase(e){const n=this.indexOf(e);this.eraseAt(n)}contains(e){return-1!==this.indexOf(e)}eraseAt(e){if(e<0||e>=this.itemCount)throw new RangeError("Index out of range");for(let n=e;n<this.itemCount-1;++n)this.buffer[n]=this.buffer[n+1];this.popBack()}swapElements(e,n){if(e<0||e>=this.itemCount)throw new RangeError("ElementIndexA out of range");if(n<0||n>=this.itemCount)throw new RangeError("ElementIndexB out of range");const t=this.buffer[n];this.buffer[n]=this.buffer[e],this.buffer[e]=t}forEach(e){for(let n=0;n<this.itemCount;++n)e(this.buffer[n])}any(e){for(let n=0;n<this.itemCount;++n)if(e(this.buffer[n]))return!0;return!1}map(e){const n=new t(this.itemCount);for(let t=0;t<this.itemCount;++t)n.pushBack(e(this.buffer[t]));return n}swapToBack(e){if(e<0||e>=this.itemCount)throw new RangeError("Index out of range");const n=this.back();this.buffer[this.headPtr]=this.buffer[e],this.buffer[e]=n}indexOf(e,n){const t=this.buffer.indexOf(e,n);return t>=this.itemCount?-1:t}get capacity(){return this.buffer.length}get size(){return this.itemCount}isEmpty(){return 0===this.itemCount}toArray(){return this.buffer.slice(0,this.itemCount)}toString(){return`[${this.toArray().toString()}]`}clear(e=!1){for(let e=0;e<this.itemCount;++e)this.buffer[e]=null;this.itemCount=0,this.headPtr=-1,this.headRef=null,this.tailRef=null,e&&this.shrink()}shrink(){this.buffer.length=this.size}_grow(){const e=Math.max(this.capacity,1);this.buffer=this.buffer.concat(new Array(e).fill(null))}}n.Vector=t},8200:function(e,n,t){var a=this&&this.__createBinding||(Object.create?function(e,n,t,a){void 0===a&&(a=t);var i=Object.getOwnPropertyDescriptor(n,t);i&&!("get"in i?!n.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,a,i)}:function(e,n,t,a){void 0===a&&(a=t),e[a]=n[t]}),i=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&a(n,e,t);return i(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.extractFilename=function(e){return e?(e=e.replace(/\\/g,"/")).split("/").pop():null},n.extractFilenameWithoutExtension=function(e){if(e){const n=(e=e.replace(/\\/g,"/")).split("/").pop();if(n)return n.replace(/\.[^/.]+$/,"")}return null},n.stripWorkspaceFromFile=function(e){const n=l();let t=h(e);for(t.toLowerCase().startsWith(n.toLowerCase())&&(t=t.substring(n.length+1));t.startsWith("/");)t=t.substring(1);return t},n.getWorkspaceFolder=l,n.cleanUpPath=h,n.getFileWithPath=c,n.getImagesFolder=function(){const e=l();let n=e+"/game/images";return r.existsSync(n)||(n=e+"/images"),n},n.getAudioFolder=function(){const e=l();let n=e+"/game/audio";return r.existsSync(n)||(n=e+"/audio"),n},n.getNavigationJsonFilepath=function(){return c("saves/navigation.json")};const s=t(1398),r=o(t(9896));function l(){if(s.workspace.workspaceFolders&&s.workspace.workspaceFolders.length>0){let e=s.workspace.workspaceFolders[0].uri.path;return e=h(e),e}return""}function h(e){return e.startsWith("/")&&e.startsWith(":/",2)&&(e=e.substring(1)),e}function c(e){const n=l();if(n&&n.length>0){if(e.startsWith(n))return e;let t=n+"/game/"+e;return r.existsSync(t)||(t=n+"/"+e),t}return e}},1398:e=>{e.exports=require("vscode")},5317:e=>{e.exports=require("child_process")},4236:e=>{e.exports=require("console")},4434:e=>{e.exports=require("events")},9896:e=>{e.exports=require("fs")},9278:e=>{e.exports=require("net")},6928:e=>{e.exports=require("path")},2987:e=>{e.exports=require("perf_hooks")},7016:e=>{e.exports=require("url")},9023:e=>{e.exports=require("util")},3061:e=>{e.exports=JSON.parse('{"config":{"config.adjust_attributes":["renpy","var","= { }","","var","If not None, this is a dictionary. When a statement or function that\\ncontains image attributes executes or is predicted, the tag is\\nlooked up in this dictionary. If it is not found, the None key\\nis looked up in this dictionary.\\n\\nIf either is found, they\'re expected to be a function. The function\\nis given an image name, a tuple consisting of the tag and any\\nattributes. It should return an adjusted tuple, which contains\\nand a potential new set of attributes.\\n\\nAs this function may be called during prediction, it must not rely\\non any state.\\n\\n"],"config.adjust_view_size":["renpy","var","= None","","var","If not None, this should be a function taking two arguments, the width\\nand height of the physical window. It is expected to return a tuple\\ngiving the width and height of the OpenGL viewport, the portion of the\\nscreen that Ren\'Py will draw pictures to.\\n\\nThis can be used to configure Ren\'Py to only allow certain sizes of\\nscreen. For example, the following allows only integer multiples\\nof the original screen size\\n\\n```\\ninit python:\\n\\n    def force_integer_multiplier(width, height):\\n        multiplier = min(width / config.screen_width, height / config.screen_height)\\n        multiplier = max(int(multiplier), 1)\\n        return (multiplier * config.screen_width, multiplier * config.screen_height)\\n        \\n    config.adjust_view_size = force_integer_multiplier\\n    \\n```\\n\\n"],"config.adv_nvl_transition":["renpy","var","= None","","var","A transition that is used to show the NVL-mode window when\\nshowing ADV-mode text directly after NVL-mode text.\\n\\n"],"config.afm_bonus":["renpy","var","= 25","","var","The number of bonus characters added to every string when\\nauto-forward mode is in effect.\\n\\n"],"config.afm_callback":["renpy","var","= None","","var","If not None, a Python function that is called to determine if it\\nis safe to auto-forward. The intent is that this can be used by a\\nvoice system to disable auto-forwarding when a voice is playing.\\n\\n"],"config.afm_characters":["renpy","var","= 250","","var","The number of characters in a string it takes to cause the amount\\nof time specified in the auto forward mode preference to be\\ndelayed before auto-forward mode takes effect.\\n\\n"],"config.afm_voice_delay":["renpy","var","= .5","","var","The number of seconds after a voice file finishes playing\\nbefore AFM can advance text.\\n\\n"],"config.after_default_callbacks":["renpy","var","= [ ... ]","","var","A list of functions that are called (with no arguments) whenever\\ndefault statements are processed. The default statements are\\nrun after the init phase, but before the game starts; when the\\na save is loaded; after rollback; before lint; and potentially at\\nother times.\\n\\nSimilar to the default statement, these callbacks are a good place\\nto add data to the game that does not exist, but needs to.\\n\\n"],"config.after_load_callbacks":["renpy","var","= [ ... ]","","var","A list of functions that are called (with no arguments) when a load\\noccurs.\\n\\nIf these callbacks change data (for example, migrating data from an\\nold version of the game), renpy.block_rollback should be\\ncalled to prevent the player from rolling back and reverting\\nthe changes.\\n\\n"],"config.after_load_transition":["renpy","var","= None","","var","A transition that is used after loading, when entering the loaded\\ngame.\\n\\n"],"config.after_replay_callback":["renpy","var","= None","","var","If not None, a function that is called with no arguments after a\\nreplay completes.\\n\\n"],"config.all_character_callbacks":["renpy","var","= [ ... ]","","var","A list of callbacks that are called by all characters. This list\\nis prepended to the list of character-specific callbacks. Ren\'Py\\nincludes its own callbacks at the start of this list.\\n\\n"],"config.allow_screensaver":["renpy","var","= True","","var","If True, the screensaver may activite while the game is running. If\\nFalse, the screensaver is disabled.\\n\\n"],"config.allow_skipping":["renpy","var","= True","","var","If set to False, the user is not able to skip over the text of the\\ngame. See _skipping.\\n\\n"],"config.always_shown_screens":["renpy","var","= [ ... ]","","var","A list of names of screens that Ren\'Py will always show, even in menus,\\nand when the interface is hidden. If a screen in this list is ever not\\nshown, that screen will be re-shown. This is used by Ren\'Py, which may modify the list.\\n\\nSetting config.overlay_screens is usually more appropriate.\\n\\n"],"config.archives":["renpy","var","= [ ... ]","","var","A list of archive files that will be searched for images and other\\ndata. The entries in this should consist of strings giving the\\nbase names of archive files, without the .rpa extension.\\n\\nThe archives are searched in the order they are found in this list.\\nA file is taken from the first archive it is found in.\\n\\nAt startup, Ren\'Py will automatically populate this variable with\\nthe names of all archives found in the game directory, sorted in\\nreverse ascii order. For example, if Ren\'Py finds the files\\ndata.rpa, patch01.rpa, and patch02.rpa,\\nthis variable will be populated with ``[\'patch02\', \'patch01\', \'data\']``.\\n\\n"],"config.audio_filename_callback":["renpy","var","= None","","var","If not None, this is a function that is called with an audio filename,\\nand is expected to return a second audio filename, the latter of which\\nwill be played.\\n\\nThis is intended for use when an a games has audio file formats changed,\\nbut it\'s not destired to update the game script.\\n\\n"],"config.auto_channels":["renpy","var","= { \\"audio\\" : ( \\"sfx\\", \\"\\", \\"\\"  ), ... }","","var","This is used to define automatic audio channels. It\'s a map the\\nchannel name to a tuple containing 3 components:\\n\\n* The mixer the channel uses.\\n* A prefix that is given to files played on the channel.\\n* A suffix that is given to files played on the channel.\\n\\n"],"config.auto_choice_delay":["renpy","var","= None","","var","If not None, this variable gives a number of seconds that Ren\'Py\\nwill pause at an in-game menu before picking a random choice from\\nthat menu. We\'d expect this variable to always be set to None in\\nreleased games, but setting it to a number will allow for\\nautomated demonstrations of games without much human interaction.\\n\\n"],"config.auto_load":["renpy","var","= None","","var","If not None, the name of a save file to automatically load when\\nRen\'Py starts up. This is intended for developer use, rather than\\nfor end users. Setting this to \\"1\\" will automatically load the\\ngame in save slot 1.\\n\\n"],"config.auto_movie_channel":["renpy","var","= True","","var","If True, and the `play` argument is given to Movie, an\\naudio channel name is automatically generated for each movie.\\n\\nconfig.single_movie_channel takes precendece over this\\nvariable.\\n\\n"],"config.auto_voice":["renpy","var","= None","","var","This may be a string, a function, or None. If None, auto-voice is\\ndisabled.\\n\\nIf a string, this is formatted with the ``id`` variable bound to the\\nidentifier of the current line of dialogue. If this gives an existing\\nfile, that file is played as voice audio.\\n\\nIf a function, the function is called with a single argument, the\\nidentifier of the current line of dialogue. The function is expected to\\nreturn a string. If this gives an existing file, that file is played as\\nvoice audio.\\n\\nSee Automatic Voice for more details.\\n\\n"],"config.autoreload":["renpy","var","= True","","var","If True, Shift+R will toggle automatic reloading. When automatic\\nreloading is enabled, Ren\'Py will reload the game whenever a used\\nfile is modified.\\n\\nIf False, Ren\'Py will reload the game once per press of Shift+R.\\n\\n"],"config.autosave_callback":["renpy","var","= None","","var","A callback or list of callbacks or Actions that will be called after\\neach time a background autosave happens. Although actions may be used,\\nthe Return action will not function.\\n\\nIf a non-Action callback shows a displayable or screen,\\nrenpy.restart_interaction should be called.\\n\\n\\n\\n```\\ndefine config.autosave_callback = Notify(\\"Autosaved.\\")\\n\\n```\\n\\n"],"config.autosave_frequency":["renpy","var","= 200","","var","Roughly, the number of interactions that will occur before an\\nautosave occurs. To disable autosaving, set config.has_autosave to\\nFalse, don\'t change this variable.\\n\\n"],"config.autosave_on_choice":["renpy","var","= True","","var","If True, Ren\'Py will autosave upon encountering an in-game choice.\\n(When renpy.choice_for_skipping is called.)\\n\\n"],"config.autosave_on_input":["renpy","var","= True","","var","If True, Ren\'Py will autosave when the user inputs text.\\n(When renpy.input is called.)\\n\\n"],"config.autosave_on_quit":["renpy","var","= True","","var","If True, Ren\'Py will attempt to autosave when the user attempts to quit,\\nreturn to the main menu, or load a game over the existing game. (To\\nsave time, the autosave occurs while the user is being prompted to confirm\\nhis or her decision.)\\n\\n"],"config.autosave_prefix_callback":["renpy","var","= None","","var","If not None, this is a function that is called with no arguments, and\\nreturn the prefix of autosave files. The default prefix used is \\"auto-\\",\\nwhich means the autosave slots will be \\"auto-1\\", \\"auto-2\\", etc.\\n\\n"],"config.autosave_slots":["renpy","var","= 10","","var","The number of slots used by autosaves.\\n\\n"],"config.bottom_layers":["renpy","var","= [ \\"bottom\\", ... ]","","var","This is a list of names of layers that are displayed above all\\nother layers, and do not participate in a transition that is\\napplied to all layers. If a layer name is listed here, it should\\nnot be listed in config.layers` or config.top_layers.\\n\\n"],"config.cache_surfaces":["renpy","var","= False","","var","If True, the underlying data of an image is stored in RAM, allowing\\nimage manipulators to be applied to that image without reloading it\\nfrom disk. If False, the data is dropped from the cache, but kept as\\na texture in video memory, reducing RAM usage.\\n\\n"],"config.call_screen_roll_forward":["renpy","var","= False","","var","The value is used when the `roll_forward` property of\\na screen is None.\\n\\n"],"config.character_callback":["renpy","var","= None","","var","The default value of the `callback` parameter of Character.\\n\\n"],"config.character_id_prefixes":["renpy","var","= [ ... ]","","var","This specifies a list of style property prefixes that can be given\\nto a Character. When a style prefixed with one of the given\\nprefix is given, it is applied to the displayable with that prefix\\nas its ID.\\n\\nFor example, the default GUI adds \\"namebox\\" to this. When a Character\\nis given the `namebox_background` property, it sets background\\non the displayable in the say screen with the id \\"namebox\\".\\n\\n"],"config.choice_empty_window":["renpy","var","= None","","var","If not None, and a choice menu (usually invoked with the ``menu``\\nstatement) does not have a caption, this function is called with\\nthe arguments (\\"\\", interact=False).\\n\\nThe expected use of this is\\n\\n```\\ndefine config.choice_empty_window = extend\\n\\n```\\n\\nDoing this displays repeats the last line of dialogue as the\\ncaption of the menu, if no other caption is given.\\n\\nOther implementations are possible, but it\'s assumed that this will\\nalways display a dialogue window.\\n\\n"],"config.choice_layer":["renpy","var","= \\"screens\\"","","var","The layer the choice screen (used by the menu statement) is shown on.\\n\\n"],"config.clear_layers":["renpy","var","= [ ... ]","","var","A list of names of layers to clear when entering the main and game\\nmenus.\\n\\n"],"config.clear_log":["renpy","var","= False","","var","If true, the log created by config.log is cleared each time\\nRen\'Py starts.\\n\\n"],"config.conditionswitch_predict_all":["renpy","var","= False","","var","The default value of the predict_all argument for ConditionSwitch\\nand ShowingSwitch, which determines if all possible displayables\\nare shown.\\n\\n"],"config.console":["renpy","var","= False","","var","This enables the console in the case config.developer is not true.\\n\\n"],"config.context_callback":["renpy","var","= None","","var","This is a callback that is called with no arguments when Ren\'Py enters a\\nnew context, such as a menu context.\\n\\n"],"config.context_clear_layers":["renpy","var","= [ \'screens\', \'top\', \'bottom\', ... ]","","var","A list of layers that are cleared when entering a new context.\\n\\n"],"config.context_copy_remove_screens":["renpy","var","= [ \'notify\', ... ]","","var","Contains a list of screens that are removed when a context is copied\\nfor rollback or saving.\\n\\n"],"config.context_fadein_music":["renpy","var","= 0","","var","The amount of time in seconds Ren\'Py spends fading in music when the music is\\nplayed due to a context change. (Usually, when the game is loaded.)\\n\\n"],"config.context_fadeout_music":["renpy","var","= 0","","var","The amount of time in seconds Ren\'Py spends fading out music when the music is\\nplayed due to a context change. (Usually, when the game is loaded.)\\n\\n"],"config.controller_blocklist":["renpy","var","= [ ... ]","","var","A list of strings, where each string is matched against the GUID\\nof a game controller. These strings are mached as a prefix to the\\ncontroller GUID (which cand be found in log.txt), and if matched,\\nprevent the controller from being initialized.\\n\\n"],"config.debug_image_cache":["renpy","var","= False","","var","If True, Ren\'Py will write information about the image cache\\nto image_cache.txt.\\n\\n"],"config.debug_prediction":["renpy","var","= False","","var","If True, Ren\'Py will will write information about and errors that\\noccur during prediction (of execution flow, images, and screens) to\\nlog.txt and the console.\\n\\n"],"config.debug_sound":["renpy","var","= False","","var","Enables debugging of sound functionality. This disables the\\nsuppression of errors when generating sound. However, if a sound\\ncard is missing or flawed, then such errors are normal, and\\nenabling this may prevent Ren\'Py from functioning normally. This\\nshould always be False in a released game.\\n\\n"],"config.debug_text_overflow":["renpy","var","= False","","var","When true, Ren\'Py will log text overflows to text_overflow.txt. A text\\noverflow occurs when a Text displayable renders to a size\\nlarger than that allocated to it. By setting this to True and setting\\nthe xmaximum and ymaximum style properties of the dialogue\\nwindow to the window size, this can be used to report cases where the\\ndialogue is too large for its window.\\n\\n"],"config.default_attribute_callbacks":["renpy","var","= { }","","var","When a statement or function that contains image attributes executes or is\\npredicted, and the tag is not currently being shown, it\'s looked up in this\\ndictionary. If it is not found, the None key is looked up instead.\\n\\nIf either is found, they\'re expected to be a function. The function is\\ngiven an image name, a tuple consisting of the tag and any attributes. It\\nshould return an iterable which contains any additional attributes to be\\napplied when an image is first shown.\\n\\nThe results of the function are treated as additive-only, and any explicit\\nconflicting or negative attributes will still take precedence.\\n\\nAs this function may be called during prediction, it must not rely on any\\nstate.\\n\\n"],"config.default_language":["renpy","var","= None","","var","If not None, this should be a string giving the default language\\nthat the game is translated into by the translation framework.\\n\\nSee translation for more details.\\n\\n"],"config.default_tag_layer":["renpy","var","= \\"master\\"","","var","The layer an image is shown on if its tag is not found in config.tag_layer.\\n\\n"],"config.default_transform":["renpy","var","= ...","","var","When a displayable is shown using the show or scene statements,\\nthe transform properties are taken from this transform and used to\\ninitialize the values of the displayable\'s transform.\\n\\nThe default transform is center.\\n\\n"],"config.defer_styles":["renpy","var","= False","","var","When true, the execution of style statements is deferred until after\\nall ``translate python`` blocks have executed. This lets a ``translate\\npython`` block update variables that are then used in style (not\\ntranslate style) statements.\\n\\nWhile this defaults to False, it\'s set to True when gui.init\\nis called.\\n\\n"],"config.defer_tl_scripts":["renpy","var","= Fasle","","var","When True, avoids loading scripts in the tl directory until the\\nlanguage is selected. See deferred-translations.\\n\\n"],"config.detached_layers":["renpy","var","= [ ]","","var","These are layers which do not get automatically added to scenes.\\nThey are always treated as sticky and\\nintended for use with the Layer displayable for embedding.\\n\\n"],"config.developer":["renpy","var","= \\"auto\\"","","var","If set to True, developer mode is enabled. Developer mode gives\\naccess to the shift+D developer menu, shift+R reloading, and\\nvarious other features that are not intended for end users.\\n\\nThis can be True, False, or \\"auto\\". If \\"auto\\", Ren\'Py will\\ndetect if the game has been packaged into a distribution, and\\nset config.developer as appropriate.\\n\\n"],"config.disable_input":["renpy","var","= False","","var","When true, renpy.input terminates immediately and returns its\\n`default` argument.\\n\\n"],"config.display_start_callbacks":["renpy","var","= [ ]","","var","This contains a list of functions that are called after Ren\'Py\\ndisplays a window, but before the first frame is rendered. The\\nmain use of this is to allow libraries to gain access to resources\\nthat need an initializd gui, like OpenGL functions.\\n\\n"],"config.displayable_prefix":["renpy","var","= { }","","var","See Displayable prefixes.\\n\\n"],"config.emphasize_audio_channels":["renpy","var","= [ \'voice\' ]","","var","A list of strings giving audio channel names.\\n\\nIf the \\"emphasize audio\\" preference is enabled, when one of the audio\\nchannels listed starts playing a sound, all channels that are not\\nlisted in this variable have their secondary audio volume reduced\\nto config.emphasize_audio_volume over config.emphasize_audio_time\\nseconds.\\n\\nWhen no channels listed in this variable are playing audio, all channels\\nthat are not listed have their secondary audio volume raised to 1.0 over\\nconfig.emphasize_audio_time seconds.\\n\\nFor example, setting this to ``[ \'voice\' ]`` will lower the volume of all\\nnon-voice channels when a voice is played.\\n\\n"],"config.emphasize_audio_time":["renpy","var","= 0.5","","var","See above.\\n\\n"],"config.emphasize_audio_volume":["renpy","var","= 0.5","","var","See above.\\n\\n"],"config.empty_window":["renpy","var",": Callable","","var","This is called with no arguments when _window is True, and no window has been shown\\non the screen. (That is, no call to renpy.shown_window has\\noccurred.) It\'s expected to show an empty window on the screen, and\\nreturn without causing an interaction.\\n\\nThe default implementation of this uses the narrator character to\\ndisplay a blank line without interacting.\\n\\n"],"config.enable_language_autodetect":["renpy","var","= False","","var","If true, Ren\'Py will attempt to determine the name of the language\\nto use based on the locale of the player\'s system. If successful,\\nthis language will be used as the default language.\\n\\n"],"config.end_game_transition":["renpy","var","= None","","var","The transition that is used to display the main menu after the\\ngame ends normally, either by invoking return with no place to\\nreturn to, or by calling renpy.full_restart.\\n\\n"],"config.end_splash_transition":["renpy","var","= None","","var","The transition that is used to display the main menu after the end\\nof the splashscreen.\\n\\n"],"config.enter_replay_transition":["renpy","var","= None","","var","If not None, a transition that is used when entering a replay.\\n\\n"],"config.enter_sound":["renpy","var","= None","","var","If not None, this is a sound file that is played when entering the\\ngame menu.\\n\\n"],"config.enter_transition":["renpy","var","= None","","var","If not None, this variable should give a transition that will be\\nused when entering the game menu.\\n\\n"],"config.enter_yesno_transition":["renpy","var","= None","","var","If not None, a transition that is used when entering the yes/no\\nprompt screen.\\n\\n"],"config.ex_rollback_classes":["renpy","var","= [ ]","","var","A list of class objects that should not generate a warning that\\nthe object supported rollback in the past, but do not now. If you\\nhave intentionally removed rollack support from a class, place\\nthe class object in this list and the warning will be suppressed.\\n\\nChances are, you don\'t want to use this - you want to add ``object``\\nto the list of base types for your class.\\n\\n"],"config.exception_handler":["renpy","var","= None","","var","If not None, this should be a function that takes three arguments:\\n\\n* A string giving the text of a traceback, abbreviated so that it only includes\\ncreator-written files.\\n* The full text of the traceback, including both creator-written and Ren\'Py\\nfiles.\\n* The path to a file containing a traceback method.\\n\\nThis function can present the error to a user in any way fit. If it returns True,\\nthe exception is ignored and control is transferred to the next statement. If it\\nreturns False, the built-in exception handler is use. This function may also call\\nrenpy.jump to transfer control to some other label.\\n\\n"],"config.exit_replay_transition":["renpy","var","= None","","var","If not None, a transition that is used when exiting a replay.\\n\\n"],"config.exit_sound":["renpy","var","= None","","var","If not None, this is a sound file that is played when exiting the\\ngame menu.\\n\\n"],"config.exit_transition":["renpy","var","= None","","var","If not None, this variable should give a transition that will be\\nperformed when exiting the game menu.\\n\\n"],"config.exit_yesno_transition":["renpy","var","= None","","var","If not None, a transition that is used when exiting the yes/no\\nprompt screen.\\n\\n"],"config.fadeout_audio":["renpy","var","= 0.016","","var","The default audio fadeout time that\'s used to fade out audio, when\\naudio is stopped with the ``stop`` statement or renpy.music.stop,\\nor when a new audio track is started with the ``play`` statement or\\nrenpy.music.play. This is not used when queued audio beings.\\n\\nA short fadeout is the default to prevent clicks and pops when\\naudio is stopped or changed.\\n\\n"],"config.fast_skipping":["renpy","var","= False","","var","Set this to True to allow fast skipping outside of developer mode.\\n\\n"],"config.file_open_callback":["renpy","var","= None","","var","If not None, this is a function that is called with the file name\\nwhen a file needs to be opened. It should return a file-like\\nobject, or None to load the file using the usual Ren\'Py\\nmechanisms. Your file-like object must implement at least the\\nread, seek, tell, and close methods.\\n\\nOne may want to also define a config.loadable_callback that\\nmatches this.\\n\\n"],"config.file_slotname_callback":["renpy","var","= None","","var","If not None, this is a function that is used by the file actions\\nto convert a page and name into a slot name that can be passed to\\nthe save functions.\\n\\n`page`\\nThis is a string containing the name of the page that is being\\naccessed. This is a string, usually containing a number, but it\\nalso may contain special values like \\"quick\\" or \\"auto\\".\\n\\n`name`\\nThe is a string that contains the name of the slot on the page.\\nIt may also contain a regular expression pattern\\n(like r\'\\\\d+\'), in which  case the same pattern should be included\\nin the result.\\n\\nThe default behavior is equivalent to\\n\\n```\\ndef file_slotname_callback(page, name):\\n    return page + \\"-\\" + name\\n    \\nconfig.file_slotname_callback = file_slotname_callback\\n\\n```\\n\\nOne use of this is to allow the the game to apply a prefix to\\nsave files.\\n\\nSee also config.autosave_prefix_callback.\\n\\n"],"config.fix_rollback_without_choice":["renpy","var","= False","","var","This option determines how the built-in menus or imagemaps behave\\nduring fixed rollback. The default value is False, which means that\\nonly the previously selected menu option remains clickable. If set\\nto True, the selected option is marked but no options are clickable.\\nThe user can progress forward through the rollback buffer by\\nclicking.\\n\\n"],"config.focus_crossrange_penalty":["renpy","var","= 1024","","var","This is the amount of penalty to apply to moves perpendicular to\\nthe selected direction of motion, when moving focus with the\\nkeyboard.\\n\\n"],"config.font_hinting":["renpy","var","= { None : \\"auto\\" }","","var","This is a dictionary from a string containing the font filename to a string\\ngiving one of the font hinting modes in hinting. When\\nhinting is True, the value is looked up in this dictionary,\\nand the resulting mode is used.\\n\\nIf no key is found, None is looked up, and the resulting mode is used.\\n\\n"],"config.font_name_map":["renpy","var","= { }","","var","This is a map from (font name) to (font filepath/fontgroup). Font names\\nsimplify and shorten ``{font}`` tags, and gives them access to the\\nfontgroup feature.\\n\\n"],"config.font_replacement_map":["renpy","var","= { }","","var","This is a map from (font, bold, italics) to (font, bold, italics),\\nused to replace a font with one that\'s specialized as having bold\\nand/or italics. For example, if you wanted to have everything\\nusing an italic version of Vera.ttf use VeraIt.ttf\\ninstead, you could write\\n\\n```\\ninit python:\\n    config.font_replacement_map[\\"Vera.ttf\\", False, True] = (\\"VeraIt.ttf\\", False, False)\\n    \\n```\\n\\nPlease note that these mappings only apply to specific variants of\\na font. In this case, requests for a bold italic version of vera\\nwill get a bold italic version of vera, rather than a bold version\\nof the italic vera.\\n\\n"],"config.game_main_transition":["renpy","var","= None","","var","If not None, a transition that is used when returning to the main\\nmenu from the game menu, using the MainMenu action.\\n\\n"],"config.game_menu_music":["renpy","var","= None","","var","If not None, a music file to play when at the game menu.\\n\\n"],"config.gamedir":["renpy","var","= ...","","var","The full path leading to the game\'s game/ directory. This is a\\nread-only variable. There is no guarantee that any file will be there,\\ntypically on platforms such as android.\\n\\n"],"config.gc_print_unreachable":["renpy","var","= False","","var","If True, Ren\'Py will print to its console and logs information about the\\nobjects that are triggering collections.\\n\\n"],"config.gc_thresholds":["renpy","var","= (25000, 10, 10)","","var","The GC thresholds that Ren\'Py uses when not idle. These are set to try\\nto ensure that garbage collection doesn\'t happen. The three numbers are:\\n\\n* The net number of objects that need to be allocated before a level-0\\ncollection.\\n* The number of level-0 collections that trigger a level-1 collection.\\n* The number of level-1 collections that trigger a level-2 collection.\\n\\n(Level-0 collections should be fast enough to not cause a frame drop,\\nlevel-1 collections might, level-2 will.)\\n\\n"],"config.gl_clear_color":["renpy","var","= \\"#000\\"","","var","The color that the window is cleared to before images are drawn.\\nThis is mainly seen as the color of the letterbox or pillarbox\\nedges drawn when aspect ratio of the window (or monitor in\\nfullscreen mode) does not match the aspect ratio of the game.\\n\\n"],"config.gl_lod_bias":["renpy","var","= -0.5","","var","The default value of the u_lod_bias uniform,\\nwhich controls the mipmap level Ren\'Py uses.\\n\\n"],"config.gl_resize":["renpy","var","= True","","var","Determines if the user is allowed to resize an OpenGL-drawn window.\\n\\n"],"config.gl_test_image":["renpy","var","= \\"black\\"","","var","The name of the image that is used when running the OpenGL\\nperformance test. This image will be shown for 5 frames or .25\\nseconds, on startup. It will then be automatically hidden.\\n\\n"],"config.hard_rollback_limit":["renpy","var","= 100","","var","This is the number of steps that Ren\'Py will let the user\\ninteractively rollback. Set this to 0 to disable rollback\\nentirely, although we don\'t recommend that, as rollback is useful\\nto let the user see text he skipped by mistake.\\n\\n"],"config.has_autosave":["renpy","var","= True","","var","If true, the game will autosave. If false, no autosaving will\\noccur.\\n\\n"],"config.help":["renpy","var","= None","","var","The default value for the Help action.\\n\\n"],"config.help_screen":["renpy","var","= \\"help\\"","","var","The name of the screen shown by pressing f1 on the keyboard, or by\\nthe Help action under certain circumstances.\\n\\n"],"config.hide":["renpy","var","= renpy.hide","","var","A function that is called when the hide statement\\nis executed. This should take the same arguments as renpy.hide.\\n\\n"],"config.history_callbacks":["renpy","var","= [ ... ]","","var","This contains a list of callbacks that are called before Ren\'Py adds\\na new object to _history_list. The callbacks are called with the\\nnew HistoryEntry object as the first argument, and can add new fields\\nto that object.\\n\\nRen\'Py uses history callbacks internally, so creators should append\\ntheir own callbacks to this  list, rather than replacing it entirely.\\n\\n"],"config.history_current_dialogue":["renpy","var","= True","","var","If true, the current dialogue will appear in the history screen.\\n\\n"],"config.history_length":["renpy","var","= None","","var","The number of entries of dialogue history Ren\'Py keeps. This is\\nset to 250 by the default gui.\\n\\n"],"config.hyperlink_handlers":["renpy","var","= { ... }","","var","A dictionary mapping a hyperlink protocol to the handler for that\\nprotocol. A handler is a function that takes the value (everything after\\nthe :) and performs some action. If a value is returned, the interaction\\nends. Otherwise, the click is ignored and the interaction continues.\\n\\n"],"config.hyperlink_protocol":["renpy","var","= \\"call_in_new_context\\"","","var","The protocol that is used for hyperlinks that do not have a protocol\\nassigned to them. See the a text tag for a description\\nas to what the possible protocols mean.\\n\\n"],"config.idle_gc_count":["renpy","var","= 2500","","var","The net number of objects that triggers a collection when Ren\'Py has\\nreached a steady state. (The fourth frame or later after the screen has been\\nupdated.)\\n\\n"],"config.image_cache_size":["renpy","var","= None","","var","If not None, this is used to set the size of the image cache, as a\\nmultiple of the screen size. This number is multiplied by the size of\\nthe screen, in pixels, to get the size of the image cache in pixels.\\n\\nIf set too large, this can waste memory. If set too small, images\\ncan be repeatedly loaded, hurting performance.\\n\\n"],"config.image_cache_size_mb":["renpy","var","= 300","","var","This is used to set the size of the image cache, in\\nmegabytes. If config.cache_surfaces is False, an image takes\\n4 bytes per pixel, otherwise it takes 8 bytes per pixel.\\n\\nIf set too large, this can waste memory. If set too small, images\\ncan be repeatedly loaded, hurting performance. If not none,\\nconfig.image_cache_size is used instead of this variable.\\n\\n"],"config.imagemap_auto_function":["renpy","var",": Callable","","var","A function that expands the `auto` property of a screen language\\nimagebutton or imagemap\\nstatement into a displayable. It takes the value of the auto property,\\nand the desired image, one of: \\"insensitive\\", \\"idle\\", \\"hover\\",\\n\\"selected_idle\\", \\"selected_hover\\", or \\"ground\\". It should return a\\ndisplayable or None.\\n\\nThe default implementation formats the `auto` property with\\nthe desired image, and then checks if the computed filename exists.\\n\\n"],"config.implicit_with_none":["renpy","var","= True","","var","If True, then by default the equivalent of a with None\\nstatement will be performed after interactions caused by dialogue, menus\\ninput, and imagemaps. This ensures that old screens will not show\\nup in transitions.\\n\\n"],"config.input_caret_blink":["renpy","var","= 1.0","","var","If not False, sets the blinking period of the default caret, in seconds.\\n\\n"],"config.interact_callbacks":["renpy","var","= [ ... ]","","var","A list of functions that are called (without any arguments) when\\nan interaction is started or restarted.\\n\\n"],"config.intra_transition":["renpy","var","= None","","var","The transition that is used between screens of the game and main\\nmenu. (That is, when the screen is changed with ShowMenu.)\\n\\n"],"config.keep_running_transform":["renpy","var","= True","","var","If True, showing an image without supplying a transform or ATL\\nblock will cause the image to continue the previous transform\\nan image with that tag was using, if any. If False, the transform\\nis stopped.\\n\\n"],"config.keep_side_render_order":["renpy","var","= True","","var","If True, the order of substrings in the Side positions will be\\ndetermine the order of children render.\\n\\n"],"config.keymap":["renpy","var","= { ... }","","var","This variable contains a keymap giving the keys and mouse buttons\\nassigned to each possible operation. Please see the section on\\nKeymaps for more information.\\n\\n"],"config.label_callbacks":["renpy","var","= [ ]","","var","This is a list of callbacks that are called whenever a labels is\\nreached. The callbacks are called with two arguments. The first is the name\\nof the label. The second is True if the label was reached through\\njumping, calling, or creating a new context, and False otherwise.\\n\\n"],"config.label_overrides":["renpy","var","= { }","","var","This variable gives a way of causing jumps and calls of labels in\\nRen\'Py script to be redirected to other labels. For example, if you\\nadd a mapping from \\"start\\" to \\"mystart\\", all jumps and calls to\\n\\"start\\" will go to \\"mystart\\" instead.\\n\\n"],"config.layer_clipping":["renpy","var","= { ... }","","var","Controls layer clipping. This is a map from layer names to (x, y,\\nheight, width) tuples, where x and y are the coordinates of the\\nupper-left corner of the layer, with height and width giving the\\nlayer size.\\n\\nIf a layer is not mentioned in config.layer_clipping, then it will\\ntake up the full size of its container. Typically this will be the\\nscreen, unless being shown inside a Layer displayable.\\n\\n"],"config.layer_transforms":["renpy","var","= { }","","var","A dictionary mapping layer names to lists of transforms. These transforms\\nare applied last, after ``show layer``  and ``camera`` transforms have\\nalready been applied.\\n\\nIf the layer name is None, then the transforms are applied to to the\\ncombination of all layers in config.layers, after any\\ntransition has been applied.\\n\\n"],"config.layeredimage_offer_screen":["renpy","var","= True","","var","This variable sets the default value for the ``offer_screen`` property\\nof layeredimages. See the related section\\nfor more information.\\n\\n"],"config.layers":["renpy","var","= [ \'master\', \'transient\', \'screens\', \'overlay\', ... ]","","var","This variable gives a list of all of the layers that Ren\'Py knows\\nabout, in the order that they will be displayed to the\\nscreen. (The lowest layer is the first entry in the list.) Ren\'Py\\nuses the layers \\"master\\", \\"transient\\", \\"screens\\", and \\"overlay\\"\\ninternally (and possibly others in future versions), so they should\\nalways be in this list.\\n\\nThe renpy.add_layer can add layers to this variable without\\nneeding to know the original contents.\\n\\n"],"config.lint_character_statistics":["renpy","var","= True","","var","If true, and config.developer is true, the lint report will include\\nstatistics about the number of dialogue blocks spoken for each character.\\nThe chanracter statistics are disabled when the game is packaged, to\\nprevent spoilers.\\n\\n"],"config.lint_hooks":["renpy","var","= [ ... ]","","var","This is a list of functions that are called, with no arguments,\\nwhen lint is run. The functions are expected to check the script\\ndata for errors, and print any they find to standard output (using\\nthe Python ``print`` statement is fine in this case).\\n\\n"],"config.load_before_transition":["renpy","var","= True","","var","If True, the start of an interaction will be delayed until all\\nimages used by that interaction have loaded. (Yeah, it\'s a lousy\\nname.)\\n\\n"],"config.load_failed_label":["renpy","var","= None","","var","If a string, this is a label that is jumped to when a load fails because\\nthe script has changed so much that Ren\'Py can\'t recover.\\nBefore performing the load, Ren\'Py will revert to the start of the\\nlast statement, then it will clear the call stack.\\n\\nThis may also be a function. If it is, the function is called with\\nno arguments, and is expected to return a string giving the label.\\n\\n"],"config.loadable_callback":["renpy","var","= None","","var","When not None, a function that\'s called with a filename. It should return\\nTrue if the file is loadable, and False if not. This can be used with\\nconfig.file_open_callback or config.missing_image_callback.\\n\\n"],"config.locale_to_language_function":["renpy","var",": Callable","","var","A function that determines the language the game should use,\\nbased on the the user\'s locale.\\nIt takes 2 string arguments that give the ISO code of the locale\\nand the ISO code of the region.\\n\\nIt should return a string giving the name of a translation to use, or\\nNone to use the default translation.\\n\\n"],"config.log":["renpy","var","= None","","var","If not None, this is expected to be a filename. Much of the text\\nshown to the user by say or :doc:`menu\\n<menus>` statements will be logged to this file.\\n\\n"],"config.log_events":["renpy","var","= False","","var","If true, Ren\'Py will log pygame-style events to the log.txt file. This will hurt performance, but might be\\nuseful for debugging certain problems.\\n\\n"],"config.log_width":["renpy","var","= 78","","var","The width of lines logged when config.log is used.\\n\\n"],"config.longpress_duration":["renpy","var","= 0.5","","var","The amount of time the player must press the screen for a longpress\\nto be recognized on a touch device.\\n\\n"],"config.longpress_radius":["renpy","var","= 15","","var","The number of pixels the touch must remain within for a press to be\\nrecognized as a longpress.\\n\\n"],"config.longpress_vibrate":["renpy","var","= .1","","var","The amount of time the device will vibrate for after a longpress.\\n\\n"],"config.main_menu_music":["renpy","var","= None","","var","If not None, a music file to play when at the main menu.\\n\\n"],"config.main_menu_music_fadein":["renpy","var","= 0.0","","var","The number of seconds to take to fade in config.main_menu_music.\\n\\n"],"config.main_menu_stop_channels":["renpy","var","= [ \\"movie\\", \\"sound\\", \\"voice\\", ... ]","","var","A list of channels that are stopped when entering or returning to the\\nmain menu.\\n\\n"],"config.manage_gc":["renpy","var","= True","","var","If True, Ren\'Py will manage the GC itself. This means that it will apply\\nthe settings below.\\n\\n"],"config.max_texture_size":["renpy","var","= (4096, 4096)","","var","The maximum size of an image that Ren\'Py will load as a single texture.\\nThis is important for 3d models, while 2d images will be split into\\nmultiple textures if necessary.\\n\\nLive2d will adjust this to fit the largest live2d texture.\\n\\n"],"config.menu_arguments_callback":["renpy","var","= None","","var","If not None, this should be a function that takes positional and/or\\nkeyword arguments. It\'s called whenever a menu statement runs,\\nwith the arguments to that menu statement.\\n\\nThis should return a pair, containing a tuple of positional arguments\\n(almost always empty), and a dictionary of keyword arguments.\\n\\n"],"config.menu_clear_layers":["renpy","var","= [ ... ]","","var","A list of layer names (as strings) that are cleared when entering\\nthe game menu.\\n\\n"],"config.menu_include_disabled":["renpy","var","= False","","var","When this variable is set, choices disables with the if statement are\\nincluded as disabled buttons.\\n\\n"],"config.menu_window_subtitle":["renpy","var","= \\"\\"","","var","The _window_subtitle variable is set to this value when entering\\nthe main or game menus.\\n\\n"],"config.minimum_presplash_time":["renpy","var","= 0.0","","var","The minimum amount of time, in seconds, a presplash, Android presplash,\\nor iOS LaunchImage is displayed for. If Ren\'Py initializes before this\\namount of time has been reached, it will sleep to ensure the image is\\nshown for at least this amount of time. The image may be shown longer\\nif Ren\'Py takes longer to start up.\\n\\n"],"config.mipmap_dissolves":["renpy","var","= False","","var","The default value of the mipmap argument to Dissolve,\\nImageDissolve, AlphaDissolve, and AlphaMask.\\n\\n"],"config.mipmap_movies":["renpy","var","= False","","var","The default value of the mipmap argument to Movie.\\n\\n"],"config.mipmap_text":["renpy","var","= False","","var","The default value of the mipmap argument to Text, including\\ntext used in screen statements.\\n\\n"],"config.missing_image_callback":["renpy","var","= None","","var","If not None, this function is called when an attempt to load an\\nimage fails. The callback is passed the filename of the missing image.\\nIt may return None, or it may return an image manipulator.\\nIf an image manipulator is returned, that image\\nmanipulator is loaded in the place of the missing image.\\n\\nOne may want to also define a config.loadable_callback,\\nespecially if this is used with a DynamicImage.\\n\\n"],"config.missing_label_callback":["renpy","var","= None","","var","If not None, this function is called when Ren\'Py attempts to access\\na label that does not exist in the game. The callback should take a\\nsingle parameter, the name of the missing label. It should return the\\nname of a label to use as a replacement for the missing label, or None\\nto cause Ren\'Py to raise an exception.\\n\\n"],"config.mouse":["renpy","var","= None","","var","This variable controls the use of user-defined mouse cursors. If\\nNone, the system mouse is used, which is usually a black-and-white\\nmouse cursor.\\n\\nOtherwise, this should be a dictionary giving the\\nmouse animations for various mouse types. Keys used by the default\\nlibrary include ``default``, ``say``, ``with``, ``menu``, ``prompt``,\\n``imagemap``, ``button``, ``pause``, ``mainmenu``, and\\n``gamemenu``. The ``default`` key should always be present, as it is\\nused when a more specific key is absent. Keys can have an optional\\nprefix ``pressed_`` to indicate that the cursor will be used when the\\nmouse is pressed.\\n\\nEach value in the dictionary should be a list of (`image`,\\n`xoffset`, `yoffset`) tuples, representing frames.\\n\\n`image`\\nThe mouse cursor image. The maximum size for this image\\nvaries based on the player\'s hardware. 32x32 is guaranteed\\nto work everywhere, while 64x64 works on most hardware. Larger\\nimages may not work.\\n\\n`xoffset`\\nThe offset of the hotspot pixel from the left side of the\\ncursor.\\n\\n`yoffset`\\nThe offset of the hotspot pixel from the top of the cursor.\\n\\nThe frames are played back at 20Hz, and the animation loops after\\nall frames have been shown.\\n\\nSee mouse for more information and examples.\\n\\n"],"config.mouse_displayable":["renpy","var","= None","","var","If not None, this should either be a displayable, or a callable that\\nreturns a displayable. The callable may return None, in which case\\nRen\'Py proceeds if the displayable is None.\\n\\nIf a displayable is given, the mouse cursor is hidden, and the\\ndisplayable is shown above anything else. This displayable is\\nresponsible for positioning and drawing a sythetic mouse\\ncursor, and so should probably be a MouseDisplayable\\nor something very similar.\\n\\nSee mouse for more information.\\n\\n"],"config.mouse_focus_clickthrough":["renpy","var","= False","","var","If true, clicks that cause a window to be focused will be processed\\nnormally. If false, such clicks will be ignored.\\n\\n"],"config.mouse_hide_time":["renpy","var","= 30","","var","The mouse is hidden after this number of seconds has elapsed\\nwithout any mouse input. This should be set to longer than the\\nexpected time it will take to read a single screen, so mouse users\\nwill not experience the mouse appearing then disappearing between\\nclicks.\\n\\nIf None, the mouse will never be hidden.\\n\\n"],"config.movie_mixer":["renpy","var","= \\"music\\"","","var","The mixer that is used when a Movie automatically defines\\na channel for video playback.\\n\\n"],"config.name":["renpy","var","= \\"\\"","","var","This should be a string giving the name of the game. This is included\\nas part of tracebacks and other log files, helping to identify the\\nversion of the game being used.\\n\\n"],"config.narrator_menu":["renpy","var","= True","","var","If true, narration inside a menu is displayed using the narrator\\ncharacter. Otherwise, narration is displayed as captions\\nwithin the menu itself.\\n\\n"],"config.nearest_neighbor":["renpy","var","= False","","var","Uses nearest-neighbor filtering by default, to support pixel art or\\nmelting players\' eyes.\\n\\n"],"config.new_substitutions":["renpy","var","= True","","var","If True, Ren\'Py will apply new-style (square-bracket)\\nsubstitutions to all text displayed.\\n\\n"],"config.new_translate_order":["renpy","var","= True","","var","Enables the new order of style and translate statements introduced in\\nRen\'Py 6.99.11.\\n\\n"],"config.notify":["renpy","var",": Callable","","var","This is called by renpy.notify or Notify with a\\nsingle `message` argument, to display the notification. The default\\nimplementation is renpy.display_notify. This is intended\\nto allow creators to intercept notifications.\\n\\n"],"config.nvl_adv_transition":["renpy","var","= None","","var","A transition that is used to hide the NVL-mode window when\\nshowing ADV-mode text directly after NVL-mode text.\\n\\n"],"config.old_substitutions":["renpy","var","= True","","var","If True, Ren\'Py will apply old-style (percent) substitutions to\\ntext displayed by the say and :doc:`menu\\n<menus>` statements.\\n\\n"],"config.open_file_encoding":["renpy","var","= False","","var","If not False, this is the encoding that renpy.open_file uses\\nwhen its `encoding` parameter is none. This is mostly used when porting\\nPython 2 games that used renpy.file extensively to Python 3,\\nto have those files open as text by default.\\n\\nThis gets its default value from the RENPY_OPEN_FILE_ENCODING\\nenvironment variable.\\n\\n"],"config.optimize_texture_bounds":["renpy","var","= True","","var","When True, Ren\'Py will scan images to find the bounding box of the\\nnon-transparent pixels, and only load those pixels into a texture.\\n\\n"],"config.overlay_during_with":["renpy","var","= True","","var","True if we want overlays to be shown during :ref:`with statements\\n<with-statement>`, or False if we\'d prefer that they be hidden during\\nthe with statements.\\n\\n"],"config.overlay_layers":["renpy","var","= [ \'overlay\', ... ]","","var","This is a list of all of the overlay layers. Overlay layers are\\ncleared before the overlay functions are called. \\"overlay\\" should\\nalways be in this list.\\n\\n"],"config.overlay_screens":["renpy","var","= [ ... ]","","var","A list of screens that are displayed when the overlay is enabled,\\nand hidden when the overlay is suppressed. (The screens are shown\\non the screens layer, not the overlay layer.)\\n\\n"],"config.pad_bindings":["renpy","var","= { ... }","","var","An equivalent of config.keymap for gamepads.\\nPlease see keymap\'s section about pad bindings for more information.\\n\\n"],"config.pass_controller_events":["renpy","var","= False","","var","If true, pygame-like CONTROLLER events are passed to Displayables event\\nhandlers. If not, those are consumed by Ren\'Py.\\n\\n"],"config.pass_joystick_events":["renpy","var","= False","","var","If true, pygame-like JOYSTICK events are passed to Displayables event\\nhandlers. If not, those are consumed by Ren\'Py.\\n\\n"],"config.pause_after_rollback":["renpy","var","= False","","var","If False, the default, rolling back will skip any pauses (timed or\\nnot) and stop only at other interactions such as dialogues, menus...\\nIf True, renpy will include timeless pauses to the valid places a\\nrollback can take the user.\\n\\n"],"config.pause_with_transition":["renpy","var","= False","","var","If false, renpy.pause is always used by the ``pause`` statement.\\nIf true, when given a delay, ``pause 5`` is equivalent to ``with Pause(5)``.\\n\\n"],"config.per_frame_screens":["renpy","var","= [ ... ]","","var","This is a list of strings giving the name of screens that are updated\\nonce per frame, rather than once per interaction. Ren\'Py uses this internally,\\nso if you add a screen, append the name rather than replacing the list in\\nits entirety.\\n\\n"],"config.periodic_callbacks":["renpy","var","= [ ... ]","","var","This is a list of functions that are called, with no arguments, at around 20Hz.\\n\\n"],"config.physical_height":["renpy","var","= None","","var","If set, this is the default height of the window containing the Ren\'Py\\ngame, in pixels. If not set, the height of the window defaults to\\nconfig.screen_height.\\n\\n"],"config.physical_width":["renpy","var","= None","","var","If set, this is the default height of the window containing the Ren\'Py\\ngame, in pixels. If not set, the height of the window defaults to\\nconfig.screen_width.\\n\\n"],"config.play_channel":["renpy","var","= \\"audio\\"","","var","The name of the audio channel used by renpy.play,\\nhover_sound, and activate_sound.\\n\\n"],"config.pre_screenshot_actions":["renpy","var","= [ Hide(\\"notify\\", immediately=True), ... ]","","var","A list of actions that are run before a screenshot is taken. This\\nis intended to hide transient elements that should not be shown in the\\nscreenshot.\\n\\n"],"config.predict_statements":["renpy","var","= 32","","var","This is the number of statements, including the current one, to\\nconsider when doing predictive image loading. A breadth-first\\nsearch from the current statement is performed until this number\\nof statements is considered, and any image referenced in those\\nstatements is potentially predictively loaded. Setting this to 0\\nwill disable predictive loading of images.\\n\\n"],"config.preload_fonts":["renpy","var","= [ ... ]","","var","A list of the names of TrueType and OpenType fonts that Ren\'Py should\\nload when starting up. Including the name of a font here can prevent\\nRen\'Py from pausing when introducing a new typeface.\\n\\n"],"config.preserve_volume_when_muted":["renpy","var","= False","","var","If False, the default, the volume of channels are shown as 0 and\\nchanging it disables mute when the channel is mute.\\nOtherwise, It is shown and adjustable while keeping mute.\\n\\n"],"config.profile":["renpy","var","= False","","var","If set to True, some profiling information will be output to\\nstdout.\\n\\n"],"config.profile_init":["renpy","var","= 0.25","","var","``init`` and ``init python`` blocks taking longer than this amount of time\\nto run are reported to log file.\\n\\n"],"config.python_callbacks":["renpy","var","= [ ... ]","","var","A list of functions. The functions in this list are called, without\\nany arguments, whenever a Python block is run outside of the init\\nphase.\\n\\nOne possible use of this would be to have a function limit a variable\\nto within a range each time it is adjusted.\\n\\nThe functions may be called while Ren\'Py is starting up, before the start\\nof the game proper, and  potentially before the variables the\\nfunction depends on are initialized. The functions are required to deal\\nwith this, perhaps by using ``hasattr(store, \'varname\')`` to check if\\na variable is defined.\\n\\n"],"config.python_exit_callbacks":["renpy","var","= [ ]","","var","A list of functions that are called when Ren\'Py is about to exit to\\nthe operating system. This is intended to be used to deinitalize\\npython modules.\\n\\nMuch of Ren\'Py is deinitalized before these functions are called,\\nso it\'s not safe to use Ren\'Py functions in these callbacks.\\n\\n"],"config.quicksave_slots":["renpy","var","= 10","","var","The number of slots used by quicksaves.\\n\\n"],"config.quit_action":["renpy","var",": Action","","var","The action that is called when the user clicks the quit button on\\na window. The default action prompts the user to see if they want\\nto quit the game.\\n\\n"],"config.quit_callbacks":["renpy","var","= [ ... ]","","var","A list of functions that are called without any arguments when\\nRen\'Py is either terminating or reloading the script. This is\\nintended to free resources, such as opened files or started threads,\\nthat arte created inside init code, if such things aren\'t freed\\nautomatically.\\n\\n"],"config.quit_on_mobile_background":["renpy","var","= False","","var","If True, the mobile app will quit when it loses focus, rather than\\nsaving and restoring its state. (See also config.save_on_mobile_background,\\nwhich controls this behavior.)\\n\\n"],"config.raise_image_exceptions":["renpy","var","= None","","var","If True, Ren\'Py will raise an exception when an image name is\\nnot found. If False, Ren\'Py will display a textual error message in place of the image.\\n\\nIf None, this takes on the value of config.developer.\\n\\nThis is set to False when Ren\'Py ignores an exception.\\n\\n"],"config.raise_image_load_exceptions":["renpy","var","= None","","var","If True, Ren\'Py will raise an exception when an exception happens\\nduring image loading. If False, Ren\'Py will display a textual error\\nmessage in place of the image.\\n\\nIf None, this takes on the value of config.developer.\\n\\nThis is set to False when Ren\'Py ignore an exception.\\n\\n"],"config.reload_modules":["renpy","var","= [ ... ]","","var","A list of strings giving the names of python modules that should be\\nreloaded along with the game. Any submodules of these modules\\nwill also be reloaded.\\n\\n"],"config.replace_text":["renpy","var","= None","","var","If not None, a function that is called with a single argument, a text to\\nbe displayed to the user. The function can return the same text it was\\npassed, or a replacement text that will be displayed instead.\\n\\nThe function is called after substitutions have been performed and after\\nthe text has been split on tags, so its argument contains nothing but\\nactual text. All displayed text passes through the function: not only\\ndialogue text, but also user interface text.\\n\\nThis can be used to replace specific ASCII sequences with corresponding\\nUnicode characters, as demonstrated by the following\\n\\n```\\ndef replace_text(s):\\n    s = s.replace(\\"\'\\", u\'\\\\u2019\') # apostrophe\\n    s = s.replace(\'--\', u\'\\\\u2014\') # em dash\\n    s = s.replace(\'...\', u\'\\\\u2026\') # ellipsis\\n    return s\\nconfig.replace_text = replace_text\\n\\n```\\n\\nSee also: config.say_menu_text_filter\\n\\n"],"config.replay_scope":["renpy","var","= { \\"_game_menu_screen\\" : \\"preferences\\", ... }","","var","A dictionary mapping variables in the default store to the values\\nthe variables will be given when entering a replay.\\n\\n"],"config.return_not_found_label":["renpy","var","= None","","var","If not None, a label that is jumped to when a return site is not found.\\nThe call stack is cleared before this jump occurs.\\n\\n"],"config.rollback_enabled":["renpy","var","= True","","var","Should the user be allowed to rollback the game? If set to False,\\nthe user cannot interactively rollback.\\n\\n"],"config.rollback_length":["renpy","var","= 128","","var","When there are more than this many statements in the rollback log,\\nRen\'Py will consider trimming the log. This also covers how many\\nsteps Ren\'Py will rollback when trying to load a save when the script\\nhas changed.\\n\\nDecreasing this below the default value may cause Ren\'Py to become\\nunstable.\\n\\n"],"config.rollback_side_size":["renpy","var","= .2","","var","If the rollback side is enabled, the fraction of the screen on the\\nrollback side that, when clicked or touched, causes a rollback to\\noccur.\\n\\n"],"config.save":["renpy","var","= True","","var","If True, Ren\'Py will allow the user to save the game. If False,\\nRen\'Py will not allow the user to save the game, and will not show\\nexisting saves.\\n\\n"],"config.save_directory":["renpy","var","= \\"...\\"","","var","This is used to generate the directory in which games and\\npersistent information are saved. The name generated depends on\\nthe platform:\\n\\nWindows\\n%APPDATA%/RenPy/`save_directory`\\n\\nMac OS X\\n~/Library/RenPy/`save_directory`\\n\\nLinux/Other\\n~/.renpy/`save_directory`\\n\\nSetting this to None creates a \\"saves\\" directory underneath the\\ngame directory. This is not recommended, as it prevents the game\\nfrom being shared between multiple users on a system. It can also\\nlead to problems when a game is installed as Administrator, but run\\nas a user.\\n\\nThis must be set with either the define statement, or in a ``python\\nearly`` block. In either case, this will be run before any other\\nstatement, and so it should be set to a string, not an expression.\\n\\nTo locate the save directory, read config.savedir instead of\\nthis variable.\\n\\n"],"config.save_dump":["renpy","var","= False","","var","If set to True, Ren\'Py will create the file save_dump.txt whenever it\\nsaves a game. This file contains information about the objects contained\\nin the save file. Each line consists of a relative size estimate, the path\\nto the object, information about if the object is an alias, and a\\nrepresentation of the object.\\n\\n"],"config.save_json_callbacks":["renpy","var","= [ ... ]","","var","A list of callback functions that are used to create the json object\\nthat is stored with each save and marked accessible through FileJson\\nand renpy.slot_json.\\n\\nEach callback is called with a Python dictionary that will eventually be\\nsaved. Callbacks should modify that dictionary by adding JSON-compatible\\nPython types, such as numbers, strings, lists, and dicts. The dictionary\\nat the end of the last callback is then saved as part of the save slot.\\n\\nThe dictionary passed to the callbacks may have already have keys\\nbeginning with an underscore ``_``. These keys are used by Ren\'Py,\\nand should not be changed.\\n\\nFor example\\n\\n```\\ninit python:\\n    def jsoncallback(d):\\n        d[\\"playername\\"] = player_name\\n        \\n    config.save_json_callbacks.append(jsoncallback)\\n    \\n```\\n\\n``FileJson(slot)`` and ``renpy.slot_json(slot)`` will recover the state\\nof the ``d`` dict-like object as it was at the moment the game was saved.\\nThe value of the ``player_name`` variable at the moment the game was saved\\nis also accessible by ``FileJson(slot, \\"playername\\")``.\\n\\n"],"config.save_on_mobile_background":["renpy","var","= True","","var","If True, the mobile app will save its state when it loses focus. The state\\nis saved in a way that allows it to be automatically loaded (and the game\\nto resume its place) when the app starts again.\\n\\n"],"config.save_persistent":["renpy","var","= True","","var","If True, Ren\'Py will save persistent data. If False,\\npersistent data will not be saved, and changes to persistent will be\\nlost when the game ends.\\n\\n"],"config.save_physical_size":["renpy","var","= True","","var","If True, the physical size of the window will be saved in the\\npreferences, and restored when the game resumes.\\n\\n"],"config.save_token_keys":["renpy","var","= [ ]","","var","A list of keys that the game will trust when loading a save file. This can\\nbe used to allow the game\'s creator to distribute save files that will\\nbe loaded without displaying a warning.\\n\\nTo allow the save token for the current computer to be trusted in this\\nway, open the console and run\\n\\n```\\nprint(renpy.get_save_token_keys())\\n\\n```\\n\\nThis will print the keys out in log.txt. The value can then be used to\\ndefine this config.save_token_keys. This variable must be set with a define\\nstatement, or in a python early block.\\n\\n"],"config.savedir":["renpy","var","= ...","","var","The complete path to the directory in which the game is\\nsaved. This should only be set in a ``python early`` block. See also\\nconfig.save_directory, which generates the default value for this\\nif it is not set during a ``python early`` block.\\n\\n"],"config.say_allow_dismiss":["renpy","var","= None","","var","If not None, this should be a function. The function is called\\nwith no arguments when the user attempts to dismiss a :ref:`say\\nstatement <say-statement>`. If this function returns True, the\\ndismissal is allowed, otherwise it is ignored.\\n\\n"],"config.say_arguments_callback":["renpy","var","= None","","var","If not None, this should be a function that takes the speaking character,\\nfollowed by positional and keyword arguments. It\'s called whenever a\\nsay statement occurs, even when the statement doesn\'t explicitly pass\\narguments. The arguments passed to the callback always include an `interact`\\nargument, and include the others provided in the say statement (if any).\\n\\nThis should return a pair, containing a tuple of positional arguments\\n(almost always empty), and a dictionary of keyword arguments (almost\\nalways with at least `interact` in it). Those will replace the arguments\\npassed to the callback.\\n\\nFor example\\n\\n```\\ndef say_arguments_callback(who, interact=True, color=\\"#fff\\"):\\n    return (), { \\"interact\\" : interact, \\"what_color\\" : color }\\n    \\nconfig.say_arguments_callback = say_arguments_callback\\n\\n```\\n\\n"],"config.say_attribute_transition":["renpy","var","= None","","var","If not None, a transition to use when the image is changed by a\\nsay statement with image attributes.\\n\\n"],"config.say_attribute_transition_callback":["renpy","var",": Callable","","var","This is a function that return a transition to apply and a layer to\\napply it on\\n\\nThis should be a function that takes four arguments, the image tag\\nbeing shown, a `mode` parameter, a `set` containing pre-transition tags\\nand a `set` containing post-transition tags. Where the value of the\\n`mode` parameter is one of:\\n\\n* \\"permanent\\", for permanent attribute change (one that lasts longer\\nthan the current say statement).\\n* \\"temporary\\", for a temporary attribute change (one that is restored\\nat the end of the current say statement).\\n* \\"both\\", for a simultaneous permanent and temporary attribute change\\n(one that in part lasts longer than the current say statement, and in\\npart is restored at the end of the current say statement).\\n* \\"restore\\", for when a temporary (or both) change is being restored.\\n\\nThis should return a 2-component tuple, consisting of:\\n\\n* The transition to use, or None if no transition should occur.\\n* The layer the transition should be on, either a string or None. This is\\nalmost always None.\\n\\nThe default implementation of this returns (config.say_attribute_transition,\\nconfig.say_attribute_transition_layer).\\n\\n"],"config.say_attribute_transition_layer":["renpy","var","= None","","var","If not None, this must be a string giving the name of a layer. (Almost always\\n\\"master\\".) The say attribute is applied to the named layer, and Ren\'Py\\nwill not pause to wait for the transition to occur. This will have the\\neffect of transitioning in the attribute as dialogue is shown.\\n\\n"],"config.say_layer":["renpy","var","= \\"screens\\"","","var","The layer the say screen is shown on. This layer should be in\\nconfig.context_clear_layers.\\n\\n"],"config.say_menu_text_filter":["renpy","var","= None","","var","If not None, then this is a function that is given the text found\\nin strings in the say and :doc:`menu\\n<menus>` statements. It is expected to return new\\n(or the same) strings to replace them.\\n\\nThis runs very early in the say and menu statement processing, before\\ntranslation and substitutions are applied. For a filter that runs later,\\nsee config.replace_text.\\n\\n"],"config.say_sustain_callbacks":["renpy","var","= [ ... ]","","var","A list of functions that are called, without arguments, before the\\nsecond and later interactions caused by a line of dialogue with\\npauses in it. Used to sustain voice through pauses.\\n\\n"],"config.scene":["renpy","var","= renpy.scene","","var","A function that\'s used in place of renpy.scene by the :ref:`scene\\nstatement <scene-statement>`. Note that this is used to clear the screen,\\nand config.show is used to show a new image. This should have the same\\nsignature as renpy.scene.\\n\\n"],"config.scene_callbacks":["renpy","var","= [ ... ]","","var","A list of functions that are called when the scene statement runs,\\nor renpy.scene is called. The functions are called with a\\nsingle argument, the layer that the scene statement is called on.\\nThese functions are called after the layer is cleared, but before the\\noptional image is added, if present.\\n\\nRen\'Py may call renpy.scene for its own purposes, so it\'s recommended\\nto check the layer name before acting on these callbacks.\\n\\n"],"config.screen_height":["renpy","var","= 600","","var","The virtual height of the the game, in pixels. If config.physical_height\\nis not set, this is also the default size of the window containing the\\ngame. Usually set by gui.init to a much larger size.\\n\\n"],"config.screen_width":["renpy","var","= 800","","var","The virtual width of the the game, in pixels. If config.physical_width\\nis not set, this is also the default size of the window containing the\\ngame. Usually set by gui.init to a much larger size.\\n\\n"],"config.screenshot_callback":["renpy","var",": Callable","","var","A function that is called when a screenshot is taken. The function\\nis called with a single parameter, the full filename the screenshot\\nwas saved as.\\n\\n"],"config.screenshot_crop":["renpy","var","= None","","var","If not None, this should be a (`x`, `y`, `height`, `width`)\\ntuple. Screenshots are cropped to this rectangle before being\\nsaved.\\n\\n"],"config.screenshot_pattern":["renpy","var","= \\"screenshot%04d.png\\"","","var","The pattern used to create screenshot files. This pattern is applied (using\\nPython\'s %-formatting rules) to the natural numbers to generate a sequence\\nof filenames. The filenames may be absolute, or relative to\\nconfig.renpy_base. The first filename that does not exist is used as the\\nname of the screenshot.\\n\\nDirectories are created if they do not exist.\\n\\nSee also _screenshot_pattern, which is used in preference to this\\nvariable if not None.\\n\\n"],"config.script_version":["renpy","var","= None","","var","If not None, this is interpreted as a script version. The library\\nwill use this script version to enable some compatibility\\nfeatures, if necessary. If None, we assume this is a\\nlatest-version script.\\n\\nThis is normally set in a file added by the Ren\'Py launcher when\\ndistributions are built.\\n\\n"],"config.search_prefixes":["renpy","var","= [ \\"\\", \\"images/\\", ... ]","","var","A list of prefixes that are prepended to filenames that are searched\\nfor.\\n\\n"],"config.searchpath":["renpy","var","= [ \'common\', \'game\', ... ]","","var","A list of directories that are searched for images, music,\\narchives, and other media, but not scripts. This is initialized to\\na list containing \\"common\\" and the name of the game directory.\\n\\n"],"config.shader_part_filter":["renpy","var","= None","","var","If not None, this is a function that is called with a tuple of\\nshader part names. It should return a new tuple of shader parts\\nthat will be used.\\n\\n"],"config.show":["renpy","var","= renpy.show","","var","A function that is used in place of renpy.show by the :ref:`show\\n<show-statement>` and scene statements. This\\nshould have the same signature as renpy.show, and pass unknown\\nkeyword arguments unchanged.\\n\\n"],"config.single_movie_channel":["renpy","var","= None","","var","If not None, and the `play` argument is give to Movie,\\nthis is the name used for the channel the movie is played on.\\nThis should not be \\"movie\\", as that name is reserved for\\nRen\'Py\'s internal use.\\n\\n"],"config.skip_delay":["renpy","var","= 75","","var","The amount of time that dialogue will be shown for, when skipping\\nstatements using ctrl, in milliseconds. (Although it\'s nowhere\\nnear that precise in practice.)\\n\\n"],"config.skip_indicator":["renpy","var","= True","","var","If True, the library will display a skip indicator when skipping\\nthrough the script.\\n\\n"],"config.skip_sounds":["renpy","var","= False","","var","If False, non-looping audio will not be played when Ren\'Py is\\nskipping.\\n\\n"],"config.sound":["renpy","var","= True","","var","If True, sound works. If False, the sound/mixer subsystem is\\ncompletely disabled.\\n\\n"],"config.sound_sample_rate":["renpy","var","= 48000","","var","The sample rate that the sound card will be run at. If all of your\\nwav files are of a lower rate, changing this to that rate may make\\nthings more efficient.\\n\\n"],"config.speaking_attribute":["renpy","var","= None","","var","If not None, this should be a string giving an image attribute,\\nwhich is added to the character\'s image tag when the character\\nis speaking, and removed when the character stops.\\n\\nThis is applied to the image on the default layer for the tag,\\nwhich can be set using config.tag_layer.\\n\\nThis is very similar to temporary attributes shown using @ in dialogue\\nlines. The attribute is not removed when the text apparition animation\\nends, but when the dialogue window gets dismissed.\\n\\n"],"config.start_callbacks":["renpy","var","= [ ... ]","","var","A list of callbacks functions that are called with no arguments\\nafter the init phase, but before the game (including the\\nsplashscreen) starts. This is intended to be used by frameworks\\nto initialize variables that will be saved.\\n\\nThe default value of this variable includes callbacks that Ren\'Py\\nuses internally to implement features such as nvl-mode. New\\ncallbacks can be appended to this list, but the existing callbacks\\nshould not be removed.\\n\\n"],"config.start_interact_callbacks":["renpy","var","= [ ... ]","","var","A list of functions that are called (without any arguments) when\\nan interaction is started. These callbacks are not called when an\\ninteraction is restarted.\\n\\n"],"config.statement_callbacks":["renpy","var","= [ ... ]","","var","A list of functions that are called when a statement is executed.\\nThese functions are generally called with the name of the statement\\nin question. However, there are some special statement names.\\n\\n\\"say\\"\\nNormal say statements.\\n\\n\\"say-bubble\\"\\nSay statements in bubble mode.\\n\\n\\"say-nvl\\"\\nSay statements in NVL mode.\\n\\n\\"say-bubble\\"\\nSay statements in bubble mode.\\n\\n\\"say-centered\\"\\nSay statments using the centered character.\\n\\n\\"menu\\":\\nNormal menu statements.\\n\\n\\"menu-nvl\\"\\nMenu statements in NVL mode.\\n\\n\\"menu-with-caption\\"\\nMenu statements with a caption.\\n\\n\\"menu-nvl-with-caption\\"\\nMenu statements with a caption in NVL mode.\\n\\nThere is a default callback in this list that is used to implement\\n``window auto``.\\n\\n"],"config.sticky_layers":["renpy","var","= [ \\"master\\", ... ]","","var","A list of layer names that will, when a tag is shown on them, take\\nprecedence over that tag\'s entry in config.tag_layer for the\\nduration of it being shown.\\n\\n"],"config.tag_layer":["renpy","var","= { }","","var","A dictionary mapping image tag strings to layer name strings. When\\nan image is shown without a specific layer name, the image\'s tag is\\nlooked up in this dictionary to get the layer to show it on. If the\\ntag is not found here, config.default_tag_layer is used.\\n\\n"],"config.tag_transform":["renpy","var","= { ... }","","var","A dictionary mapping image tag strings to transforms or lists of\\ntransforms. When an image is newly-shown without an at clause,\\nthe image\'s tag is looked up in this dictionary to find a transform\\nor list of transforms to use.\\n\\n"],"config.tag_zorder":["renpy","var","= { }","","var","A dictionary mapping image tag strings to zorders. When an image is\\nnewly-shown without a zorder clause, the image\'s tag is looked up\\nin this dictionary to find a zorder to use. If no zorder is found,\\n0 is used.\\n\\n"],"config.textshader_callbacks":["renpy","var","= { }","","var","This is dictionary that maps strings to callables. When textshaders\\nwith the string are used, the function is called to return a string\\ngiving another textshader. This can be used to make a textshader that\\nchanges based on a persistent variable, for example.\\n\\n"],"config.thumbnail_height":["renpy","var","= 75","","var","The height of the thumbnails that are taken when the game is\\nsaved. These thumbnails are shown when the game is loaded. Please\\nnote that the thumbnail is shown at the size it was taken at,\\nrather than the value of this setting when the thumbnail is shown\\nto the user.\\n\\nThis is changed by the default GUI.\\n\\n"],"config.thumbnail_width":["renpy","var","= 100","","var","The width of the thumbnails that are taken when the game is\\nsaved. These thumbnails are shown when the game is loaded. Please\\nnote that the thumbnail is shown at the size it was taken at,\\nrather than the value of this setting when the thumbnail is shown\\nto the user.\\n\\nThis is changed by the default GUI.\\n\\n"],"config.top_layers":["renpy","var","= [ \\"top\\", ... ]","","var","This is a list of names of layers that are displayed above all\\nother layers, and do not participate in a transition that is\\napplied to all layers. If a layer name is listed here, it should\\nnot be listed in config.layers` or config.bottom_layers.\\n\\n"],"config.transform_uses_child_position":["renpy","var","= True","","var","If True, transforms will inherit :ref:`position properties\\n<position-style-properties>` from their child. If not, they won\'t.\\n\\n"],"config.transient_layers":["renpy","var","= [ \'transient\', ... ]","","var","This variable gives a list of all of the transient\\nlayers. Transient layers are layers that are cleared after each\\ninteraction. \\"transient\\" should always be in this list.\\n\\n"],"config.transition_screens":["renpy","var","= True","","var","If True, screens will participate in transitions, dissolving from the\\nold state of the screen to the new state of the screen. If False, only\\nthe latest state of the screen will be shown.\\n\\n"],"config.translate_clean_stores":["renpy","var","= [ \\"gui\\", ... ]","","var","A list of named stores that are cleaned to their state at the end of\\nthe init phase when the translation language changes.\\n\\n"],"config.translate_ignore_who":["renpy","var","= [ ]","","var","A list of strings giving characters that will not have tanslations generated. This is useful\\nfor characters that are used for debugging or note purposes. This compares against string value\\nof the expression in the statement. (So \\"e\\" will match ``e`` but not ``l``, even if e and l are\\nthe same object.)\\n\\n"],"config.tts_substitutions":["renpy","var","= [ ]","","var","This is a list of (pattern, replacement) pairs that are used to perform\\nsubstitutions on text before it is passed to the text-to-speech engine,\\nso that the text-to-speech engine can pronounce it correctly.\\n\\nPatterns may be either strings or regular expressions, and replacements\\nmust be strings.\\n\\nIf the pattern is a string, it is escaped, then prefixed\\nand suffixed with r\'\\\\\\\\b\' (to indicate it must begin and end at a word\\nboundary), and then compiled into a regular expression. When the pattern\\nis a string, the replacement is also escaped.\\n\\nIf the pattern is a regular expression, it is used as-is, and the\\nreplacement is not escaped.\\n\\nThe substitutions are performed in the order they are given. If a substitution\\nmatches the string, the match is checked to see if it is in title case,\\nupper case, or lower case ; and if so the corresponding casing is performed\\non the replacement. Once this is done, the replacement is applied.\\n\\nFor example\\n\\n```\\ndefine config.tts_substitutions = [\\n    (\\"Ren\'Py\\", \\"Ren Pie\\"),\\n]\\n\\n```\\n\\nWill cause the string \\"Ren\'Py is pronounced ren\'py.\\" to be voiced as if\\nit were \\"Ren Pie is pronounced ren pie.\\"\\n\\n"],"config.tts_voice":["renpy","var","= None","","var","If not None, a string giving a non-default voice that is used to\\nplay back text-to-speech for self voicing. The possible choices are\\nplatform specific, and so this should be set in a platform-specific\\nmanner. (It may make sense to change this in translations, as well.)\\n\\n"],"config.variants":["renpy","var","= [ ... ]","","var","A list of screen variants that are searched when choosing a screen to\\ndisplay to the user. This should always end with None, to ensure\\nthat the default screens are chosen. See screen-variants.\\n\\n"],"config.version":["renpy","var","= \\"\\"","","var","This should be a string giving the version of the game. This is included\\nas part of tracebacks and other log files, helping to identify the\\nversion of the game being used.\\n\\n"],"config.voice_filename_format":["renpy","var","= \\"{filename}\\"","","var","A string that is formatted with the string argument to the voice\\nstatement to produce the filename that is played to the user. For\\nexample, if this is \\"{filename}.ogg\\", the ``voice \\"test\\"`` statement\\nwill play test.ogg.\\n\\n"],"config.web_input":["renpy","var","= True","","var","If True, the web platform will use the browser\'s input system to\\nhandle renpy.input.  If False, Ren\'Py\'s own input system will\\nbe used. The browser\'s input system supports more languages, virtual\\nkeyboards, and other conveniences, but is not as customizable.\\n\\nThis may be changed at init time, and also in translate python blocks.\\n\\nTo only use the browser\'s input system on touchscreen devices, use\\n\\n```\\ndefine config.web_input = renpy.variant(\\"touch\\")\\n\\n```\\n\\n"],"config.web_video_base":["renpy","var","= \\"./game\\"","","var","When playing a movie in the web browser, this is a URL that\\nis appended to to the movie filename to get the full URL\\nto play the movie from. It can include directories in it, so\\n\\"https://share.renpy.org/movies-for-mygame\\" would also be fine.\\n\\nThis allows large movie files to be hosted on a different server\\nthan the rest of the game.\\n\\n"],"config.web_video_prompt":["renpy","var","= _(\\"Touch to play the video.\\")","","var","On Mobile Safari on iOS, by default, the player will need to click to play\\na movie with sound. This variable gives the message that\'s used to prompt\\nplayers to click.\\n\\n"],"config.webaudio_required_types":["renpy","var","= [ \\"audio/ogg\\", \\"audio/mpeg\\", ... ]","","var","When running on the web platform, Ren\'Py will check the browser to\\nsee if it can play audio files of these mime types. If the browser\\ncan, it is used to play the files. If not, a slower and potentially skip\\nprone wasm decoder is used.\\n\\nBy default, the browser\'s web audio system is used on Chrome and Firefox,\\nand wasm is used on safari. If your game only uses mp3 audio, this can\\nbe changed using \\n\\n```\\ndefine config.webaudio_required_types = [ \\"audio/mpeg\\" ]\\n\\n```\\n\\nTo used the faster web audio system on Safari as well.\\n\\n"],"config.window":["renpy","var","= None","","var","This controls the default method of dialogue window management. If\\nnot None, this should be one of \\"show\\", \\"hide\\", or \\"auto\\".\\n\\nWhen set to \\"show\\", the dialogue window is shown at all times.\\nWhen set to \\"hide\\", the dialogue window is hidden when not in a\\nsay statement or other statement that displays dialogue. When set\\nto \\"auto\\", the dialogue window is hidden before scene statements,\\nand shown again when dialogue is shown.\\n\\nThis sets the default. Once set, the default can be changed using the\\n``window show``, ``window hide`` and ``window auto`` statements. See\\ndialogue-window-management for more information.\\n\\n\\n"],"config.window_auto_hide":["renpy","var","= [ \\"scene\\", \\"call screen\\", \\"menu\\", \\"say-centered\\", \\"say-bubble\\", ... ]","","var","A list of statements that cause ``window auto`` to hide the empty\\ndialogue window.\\n\\n"],"config.window_auto_show":["renpy","var","= [ \\"say\\", \\"say-nvl\\", \\"menu-with-caption\\", \\"nvl-menu\\", \\"nvl-menu-with-caption\\", ... ]","","var","A list of statements that cause ``window auto`` to show the empty\\ndialogue window.\\n\\n"],"config.window_hide_transition":["renpy","var","= None","","var","The transition used by the window hide statement when no\\ntransition has been explicitly specified.\\n\\n"],"config.window_icon":["renpy","var","= None","","var","If not None, this is expected to be the filename of an image\\ngiving an icon that is used for the game\'s main window. This does\\nnot set the icon used by windows executables and mac apps, as\\nthose are controlled by special-files.\\n\\n"],"config.window_show_transition":["renpy","var","= None","","var","The transition used by the window show statement when no\\ntransition has been explicitly specified.\\n\\n"],"config.window_title":["renpy","var","= None","","var","The static portion of the title of the window containing the\\nRen\'Py game. _window_subtitle is appended to this to get\\nthe full title of the window.\\n\\nIf None, the default, this defaults to the value of config.name.\\n\\n\\n\\n"],"config.with_callback":["renpy","var","= None","","var","If not None, this should be a function that is called when a :ref:`with\\nstatement <with-statement>` occurs. This function can be responsible for\\nputting up transient things on the screen during the transition. The\\nfunction is called with two arguments: the transition that is occurring,\\nand the transition it is paired with. The latter is None except in the case\\nof the implicit None transition produced by an inline with statement, in\\nwhich case it is the inline transition that produced the with None. It is\\nexpected to return a transition, which may or may not be the transition\\nsupplied as its argument.\\n\\n\\n"]},"renpy":{"Action":["renpy","class","","","class","To define a new action, inherit from this class. Override the\\nmethods in this class to change the behavior of the action.\\n\\n.. method:: __call__(self)\\n\\nThis is the method that is called when the action is\\nactivated. In many cases, returning a non-None value from the\\naction will cause the current interaction to end.\\n\\nThis method must be overridden, as the default method will\\nraise a NotImplementedError (and hence cause Ren\'Py to\\nreport an error).\\n\\n.. method:: get_sensitive(self)\\n\\nThis is called to determine if the button with this action\\nshould be sensitive. It should return true if the button is\\nsensitive.\\n\\nNote that __call__ can be called, even if this returns False.\\n\\nThe default implementation returns True.\\n\\n.. method:: get_selected(self)\\n\\nThis should return true if the button should be rendered as a\\nselected button, and false otherwise.\\n\\nThe default implemention returns False.\\n\\n.. method:: get_tooltip(self)\\n\\nThis gets a default tooltip for this button, if a specific\\ntooltip is not assigned. It should return the tooltip value,\\nor None if a tooltip is not known.\\n\\nThis defaults to returning None.\\n\\n.. method:: periodic(self, st)\\n\\nThis method is called once at the start of each interaction,\\nand then is called periodically thereafter. If it returns a\\nnumber, it will be called before that many seconds elapse, but\\nit might be called sooner.\\n\\nThe main use of this is to call\\nrenpy.restart_interaction if the value of\\nget_selected or get_sensitive should change.\\n\\nIt takes one argument:\\n\\n`st`\\nThe number of seconds since the screen or displayable this\\naction is associated with was first shown.\\n\\n.. method:: unhovered(self)\\n\\nWhen the action is used as the `hovered` parameter to a button (or\\nsimilar object), this method is called when the object loses focus.\\n\\nattribute alt\\n\\nThe text-to-speech text used for buttons that use this Action, if\\nthe button does not have the alt property set. This can\\nset to a string in the class, or in the constructor, or it can be\\na Python property that returns a string.\\n\\n"],"AddToSet":["renpy","function","(set, value)","","function","Adds `value` to `set`.\\n\\n`set`\\nThe set to add to. This may be a Python set or list, in which\\ncase the value is appended to the list.\\n`value`\\nThe value to add or append.\\n\\n"],"AlphaBlend":["renpy","function","(control, old, new, alpha=False)","","function","This transition uses a `control` displayable (almost always some sort of\\nanimated transform) to transition from one displayable to another. The\\ntransform is evaluated. The `new` displayable is used where the transform\\nis opaque, and the `old` displayable is used when it is transparent.\\n\\n`alpha`\\nIf true, the image is composited with what\'s behind it. If false,\\nthe default, the image is opaque and overwrites what\'s behind it.\\n\\n"],"AlphaDissolve":["renpy","function","(control, delay=0.0, *, reverse=False, mipmap=None)","","function","Returns a transition that uses a control displayable (almost always some\\nsort of animated transform) to transition from one screen to another. The\\ntransform is evaluated. The new screen is used where the transform is\\nopaque, and the old image is used when it is transparent.\\n\\n`control`\\nThe control transform.\\n\\n`delay`\\nThe time the transition takes, before ending.\\n\\n`reverse`\\nIf true, the alpha channel is reversed. Opaque areas are taken\\nfrom the old image, while transparent areas are taken from the\\nnew image.\\n\\n`mipmap`\\nWhen the dissolve will be scaled to less than half its natural size,\\nthis can be set to True. This will cause mipmaps to be generated,\\nwhich will make the dissolve consume more GPU resources, but will\\nreduce artifacts. See mipmap for more information.\\n\\n"],"AlphaMask":["renpy","class","(child, mask, invert=False, **properties)","","class","This displayable takes its colors from `child`, and its alpha channel\\nfrom the multiplication of the alpha channels of `child` and `mask`.\\nThe result is a displayable that has the same colors as `child`, is\\ntransparent where either `child` or `mask` is transparent, and is\\nopaque where `child` and `mask` are both opaque.\\n\\nThe `child` and `mask` parameters may be arbitrary displayables. The\\nsize of the AlphaMask is the size of `child`. The `invert` parameter\\ncan be used to invert the mask\'s alpha channel.\\n\\nNote that this takes different arguments from im.AlphaMask,\\nwhich uses the mask\'s red channel.\\n\\n"],"AnimatedValue":["renpy","function","(value=0.0, range=1.0, delay=1.0, old_value=None)","","function","This animates a value, taking `delay` seconds to vary the value from\\n`old_value` to `value`.\\n\\n`value`\\nThe value itself, a number.\\n\\n`range`\\nThe range of the value, a number.\\n\\n`delay`\\nThe time it takes to animate the value, in seconds. Defaults\\nto 1.0.\\n\\n`old_value`\\nThe old value. If this is None, then the value is taken from the\\nAnimatedValue we replaced, if any. Otherwise, it is initialized\\nto `value`.\\n\\n"],"At":["renpy","function","(d, *args)","","function","Given a displayable `d`, applies each of the transforms in `args`\\nto it. The transforms are applied in left-to-right order, so that\\nthe outermost transform is the rightmost argument. \\n\\n```\\ntransform birds_transform:\\n    xpos -200\\n    linear 10 xpos 800\\n    pause 20\\n    repeat\\n    \\nimage birds = At(\\"birds.png\\", birds_transform)\\n\\n```\\n\\n"],"Attribute":["renpy","class","(group, attribute, image=None, default=False, group_args={}, **kwargs)","","class","This is used to represent a layer of an LayeredImage that is\\ncontrolled by an attribute. A single attribute can control\\nmultiple layers, in which case all layers corresponding to\\nthat attribute will be displayed.\\n\\n`group`\\nA string giving the group the attribute is part of. This\\nmay be None, in which case a group with the same name as\\nthe attribute is created.\\n\\n`attribute`\\nA string giving the name of the attribute.\\n\\n`image`\\nIf not None, this should be a displayable that is displayed when\\nthis attribute is shown.\\n\\n`default`\\nIf True, and no other attribute for the group is selected,\\nthis attribute is.\\n\\nThe following keyword arguments are also known:\\n\\n`at`\\nA transform or list of transforms that are applied to the\\nimage.\\n\\n`if_all`\\nAn attribute or list of attributes. The displayable is only shown\\nif all of these are showing.\\n\\n`if_any`\\nAn attribute or list of attributes. if not empty, the displayable is only shown\\nif any of these are showing.\\n\\n`if_not`\\nAn attribute or list of attributes. The displayable is only shown\\nif none of these are showing.\\n\\nOther keyword arguments are interpreted as transform properties. If\\nany are present, a transform is created that wraps the image. (For\\nexample, pos=(100, 200) can be used to offset the image by 100 pixels\\nhorizontally and 200 vertically.)\\n\\nIf the `image` parameter is omitted or None, and the LayeredImage\\nhas been given the `image_format` parameter, the image_format is used\\nto generate an image filename.\\n\\n"],"AudioData":["renpy","class","(data, filename)","","class","This class wraps a bytes object containing audio data, so it can be\\npassed to the audio playback system. The audio data should be contained\\nin some format Ren\'Py supports. (For examples RIFF WAV format headers,\\nnot unadorned samples.)\\n\\n`data`\\nA bytes object containing the audio file data.\\n\\n`filename`\\nA synthetic filename associated with this data. It can be used to\\nsuggest the format `data` is in, and is reported as part of\\nerror messages.\\n\\nOnce created, this can be used wherever an audio filename is allowed. For\\nexample\\n\\n```\\ndefine audio.easteregg = AudioData(b\'...\', \'sample.wav\')\\nplay sound easteregg\\n\\n```\\n\\n"],"AudioPositionValue":["renpy","function","(channel=\'music\', update_interval=0.1)","","function","A value that shows the playback position of the audio file playing\\nin `channel`.\\n\\n`update_interval`\\nHow often the value updates, in seconds.\\n\\n"],"BarValue":["renpy","class","","","class","To define a new BarValue, inherit from this class and override\\nsome of the methods.\\n\\n.. method:: get_adjustment(self)\\n\\nThis method is called to get an adjustment object for the\\nbar. It should create the adjustment with\\nui.adjustment, and then return the object created this\\nway.\\n\\nThis method must be overridden, as the default method will\\nraise NotImplementedError (and hence cause Ren\'Py to report an\\nerror).\\n\\n.. method:: get_style(self)\\n\\nThis is used to determine the style of bars that use this\\nvalue. It should return a tuple of two style names or style\\nobjects. The first is used for a bar, and the\\nsecond for vbar.\\n\\nThis defaults to (\\"bar\\", \\"vbar\\").\\n\\n.. method:: get_tooltip(self)\\n\\nThis gets a default tooltip for this button, if a specific\\ntooltip is not assigned. It should return the tooltip value,\\nor None if a tooltip is not known.\\n\\nThis defaults to returning None.\\n\\n.. method:: replaces(self, other)\\n\\nThis is called when a BarValue replaces another BarValue, such\\nas when a screen is updated. It can be used to update this\\nBarValue from the other. It is called before get_adjustment.\\n\\nNote that `other` is not necessarily the same type as `self`.\\n\\n.. method:: periodic(self, st)\\n\\nThis method is called once at the start of each interaction. If\\nit returns a number of seconds, it will be called before that\\nmany seconds elapse, but it might be called sooner. It is\\ncalled after get_adjustment.\\n\\nIt can be used to update the value of the bar over time, like\\nAnimatedValue does. To do this, get_adjustment should\\nstore the adjustment, and periodic should call the\\nadjustment\'s changed method.\\n\\nattribute alt\\n\\nThe text-to-speech text used for bars that use this BarValue, if\\nthe bar does not have the alt property set. This can\\nset to a string in the class, or in the constructor, or it can be\\na Python property that returns a string.\\n\\n\\n"],"Borders":["renpy","class","(left, top, right, bottom, pad_left=0, pad_top=0, pad_right=0, pad_bottom=0)","","class","This object provides border size and tiling information to a Frame.\\nIt can also provide padding information that can be supplied to the\\npadding style property of a window or frame.\\n\\n`left`, `top`, `right`, `bottom`\\nThese provide the size of the insets used by a frame, and are added\\nto the padding on each side. They should be zero or a positive integer.\\n\\n`pad_left`, `pad_top`, `pad_right`, `pad_bottom`\\nThese are added to the padding on each side, and may be positive or\\nnegative. (For example, if `left` is 5 and `pad_left` is -3, the final\\npadding is 2.)\\n\\nThe padding information is supplied via a field:\\n\\nattribute padding\\n\\nThis is a four-element tuple containing the padding on each of the\\nfour sides.\\n\\n"],"BrightnessMatrix":["renpy","class","(value=1.0)","","class","A ColorMatrix that can be used with matrixcolor to change\\nthe brightness of an image, while leaving the Alpha channel\\nalone.\\n\\n`value`\\nThe amount of change in image brightness. This should be\\na number between -1 and 1, with -1 the darkest possible\\nimage and 1 the brightest.\\n\\n"],"Call":["renpy","function","(label, *args, **kwargs)","","function","Ends the current statement, and calls `label`, given as a string.\\nArguments and keyword arguments are passed to renpy.call.\\n\\n"],"Camera":["renpy","class","(layer=\'master\')","","class","Instances of this class can be used with point_to to point\\nat the location of the camera for a particular layer.\\n\\n`layer`\\nThe name of the layer.\\n\\n\\n"],"CaptureFocus":["renpy","function","(name=\'default\')","","function","If a displayable is focused when this action is run, the rectangle\\ncontaining that displayable is stored with the name `name`. This\\nrectangle can then be retrieved with the GetFocusRect action,\\nor the `focus` property of the sl-nearrect displayable.\\n\\nIf no displayable is focused, the previous capture with that name\\nis removed.\\n\\n`name`\\nThe name of the focus rectangle to store. This should be a string.\\nThe name \\"tooltip\\" is special, as it is automatically captured\\nwhen the tooltip is changed.\\n\\n"],"Character":["renpy","function","(name=..., kind=adv, **args)","","function","Creates and returns a Character object, which controls the look\\nand feel of dialogue and narration.\\n\\n`name`\\nIf a string, the name of the character for dialogue. When\\n`name` is None, display of the name is omitted, as for\\nnarration. If no name is given, the name is taken from\\n`kind`, and otherwise defaults to None.\\n\\n`kind`\\nThe Character to base this Character off of. When used, the\\ndefault value of any argument not supplied to this Character\\nis the value of that argument supplied to ``kind``. This can\\nbe used to define a template character, and then copy that\\ncharacter with changes.\\n\\nThis can also be a namespace, in which case the \'character\'\\nvariable in the namespace is used as the kind.\\n\\n**Linked Image.**\\nAn image tag may be associated with a Character. This allows a\\nsay statement involving this character to display an image with\\nthe tag, and also allows Ren\'Py to automatically select a side\\nimage to show when this character speaks.\\n\\n`image`\\nA string giving the image tag that is linked with this\\ncharacter.\\n\\n**Voice Tag.**\\nIf a voice tag is assign to a Character, the voice files that are\\nassociated with it, can be muted or played in the preference\\nscreen.\\n\\n`voice_tag`\\nA String that enables the voice file associated with the\\nCharacter to be muted or played in the \'voice\' channel.\\n\\n**Prefixes and Suffixes.**\\nThese allow a prefix and suffix to be applied to the name of the\\ncharacter, and to the text being shown. This can be used, for\\nexample, to add quotes before and after each line of dialogue.\\n\\n`what_prefix`\\nA string that is prepended to the dialogue being spoken before\\nit is shown.\\n\\n`what_suffix`\\nA string that is appended to the dialogue being spoken before\\nit is shown.\\n\\n`who_prefix`\\nA string that is prepended to the name of the character before\\nit is shown.\\n\\n`who_suffix`\\nA string that is appended to the name of the character before\\nit is shown.\\n\\n**Changing Name Display.**\\nThese options help to control the display of the name.\\n\\n`dynamic`\\nIf true, then `name` should either be a string containing a Python\\nexpression, a function, or a callable object. If it\'s a string,\\nThat string will be evaluated before each line of dialogue, and\\nthe result used as the name of the character. Otherwise, the\\nfunction or callable object will be called with no arguments\\nbefore each line of dialogue, and the return value of the call will\\nbe used as the name of the character.\\n\\n**Controlling Interactions.**\\nThese options control if the dialogue is displayed, if an\\ninteraction occurs, and the mode that is entered upon display.\\n\\n`condition`\\nIf given, this should be a string containing a Python\\nexpression. If the expression is false, the dialogue\\ndoes not occur, as if the say statement did not happen.\\n\\n`interact`\\nIf true, the default, an interaction occurs whenever the\\ndialogue is shown. If false, an interaction will not occur,\\nand additional elements can be added to the screen.\\n\\n`advance`\\nIf true, the default, the player can click to advance through\\nthe statement, and other means of advancing (such as skip and\\nauto-forward mode) will also work. If false, the player will be\\nunable to move past the say statement unless an alternate means\\n(such as a jump hyperlink or screen) is provided.\\n\\n`callback`\\nA function that is called when events occur while the\\ncharacter is speaking. See the section on\\ncharacter-callbacks for more information.\\n\\n**Click-to-continue.**\\nA click-to-continue indicator is displayed once all the text has\\nfinished displaying, to prompt the user to advance.\\n\\n`ctc`\\nA displayable to use as the click-to-continue indicator, unless\\na more specific indicator is used.\\n\\n`ctc_pause`\\nA displayable to use a the click-to-continue indicator when the\\ndisplay of text is paused by the {p} or {w} text tags.\\n\\n`ctc_timedpause`\\nA displayable to use a the click-to-continue indicator when the\\ndisplay of text is paused by the {p=} or {w=} text tags. When\\nNone, this takes its default from `ctc_pause`, use ``Null()``\\nwhen you want a `ctc_pause` but no `ctc_timedpause`.\\n\\n`ctc_position`\\nControls the location of the click-to-continue indicator. If\\n``\\"nestled\\"``, the indicator is displayed as part of the text\\nbeing shown, immediately after the last character. ``\\"nestled-close\\"`` is\\nsimilar, except a break is not allowed between the text and the CTC\\nindicator. If ``\\"fixed\\"``, a new screen containing the CTC indicator is shown,\\nand the position style properties of the CTC displayable are used\\nto position the CTC indicator.\\n\\n**Screens.**\\nThe display of dialogue uses a screen. These arguments\\nallow you to select that screen, and to provide arguments to it.\\n\\n`screen`\\nThe name of the screen that is used to display the dialogue.\\n\\n`retain`\\nIf not true, an unused tag is generated for each line of dialogue,\\nand the screens are shown non-transiently. Call renpy.clear_retain\\nto remove all retaint screens. This is almost always used with\\nbubble.\\n\\nKeyword arguments beginning with ``show_`` have the prefix\\nstripped off, and are passed to the screen as arguments. For\\nexample, the value of ``show_myflag`` will become the value of\\nthe ``myflag`` variable in the screen. (The ``myflag`` variable isn\'t\\nused by default, but can be used by a custom say screen.)\\n\\nOne show variable is, for historical reasons, handled by Ren\'Py itself:\\n\\n`show_layer`\\nIf given, this should be a string giving the name of the layer\\nto show the say screen on.\\n\\n**Styling Text and Windows.**\\nKeyword arguments beginning with ``who_``, ``what_``, and\\n``window_`` have their prefix stripped, and are used to :doc:`style\\n<style>` the character name, the spoken text, and the window\\ncontaining both, respectively.\\n\\nFor example, if a character is given the keyword argument\\n``who_color=\\"#c8ffc8\\"``, the color of the character\'s name is\\nchanged, in this case to green. ``window_background=\\"frame.png\\"``\\nsets the background of the window containing this character\'s\\ndialogue.\\n\\nThe style applied to the character name, spoken text, and window\\ncan also be set this way, using the ``who_style``, ``what_style``, and\\n``window_style`` arguments, respectively.\\n\\nSetting config.character_id_prefixes makes it possible to style\\nother displayables as well. For example, when the default GUI is used,\\nstyles prefixed with ``namebox_`` are used to style the name of the\\nspeaking character.\\n\\n"],"ClearFocus":["renpy","function","(name=\'default\')","","function","Clears a stored focus rectangle captured with CaptureFocus.\\nIf `name` is None, all focus rectangles are cleared.\\n\\n"],"Color":["renpy","class","(color=None, hls=None, hsv=None, rgb=None, alpha=1.0)","","class","The Color class is used to represent and manipulate colors and convert\\nbetween various color spaces. It also represents opacity in the form\\nof an alpha.\\n\\nWhen creating a Color, at most one of the `color`, `hls`, `hsv`, or\\n`rgb` arguments should be supplied. (If all are None, None is returned.)\\n\\n`color`\\nThe color, in one of the standard formats Ren\'Py understands. These\\nare:\\n\\n* A Color object.\\n* An (r, g, b) or (r, g, b, a) tuple, in which all the numbers are\\nbetween 0 and 255.\\n* A string giving a hexadecimal color, in the form \\"#rgb\\", \\"#rgba\\",\\n\\"#rrggbb\\", or \\"#rrggbbaa\\".\\n\\n`hls`\\nA color in the hue-lightness-saturation color space. This should\\nbe supplied a three-component tuple, where each component is between\\n0.0 and 1.0.\\n\\n`hsv`\\nA color in the hue-saturation-value color space. This should\\nbe supplied a three-component tuple, where each component is between\\n0.0 and 1.0.\\n\\n`rgb`\\nA color in the red-green-blue color space. This should\\nbe supplied a three-component tuple, where each component is between\\n0.0 and 1.0.\\n\\nIf the supplied color does not contain an alpha value, `alpha` is used.\\n`alpha` must be between 0.0 and 1.0.\\n\\nColor objects can be used as 4-component tuples, where the components\\nare (red, green, blue, and alpha). When used as a tuple, the value\\nof each component is between 0 and 255.\\n\\nColor objects support the +, -, and * operators, representing\\ncomponent-wise addition, subtraction, and multiplication. Some uses\\nof these operators can cause the creation of colors with components\\nthat are not in the supported range. Such colors should not be passed\\nto other parts of Ren\'Py. (The normalize method can be called to return\\na new color with the components limited to the proper range.)\\n\\nA Color object has the following properties:\\n\\nattribute hls\\n\\nReturns the color as a tuple of three floating point numbers giving\\nhue, lightness, and saturation. Each component ranges between 0.0 and 1.0.\\n\\nattribute hsv\\n\\nReturns the color as a tuple of three floating point numbers giving\\nhue, saturation, and value. Each component ranges between 0.0 and 1.0.\\n\\nattribute rgb\\n\\nReturns the color as a tuple of three floating point numbers giving\\nthe red, green, and blue components. Each component ranges between 0.0\\nand 1.0.\\n\\nattribute rgba\\n\\nReturns the color as a tuple of four floating point numbers giving\\nthe red, green, blue and alpha components as 0.0 to 1.0 values.\\n\\nattribute premultiplied\\n\\nReturns the color as a tuple of four floating point numbers giving\\nthe red, green, blue and alpha components as 0.0 to 1.0 values, with\\nthe red, green, and blue components premultiplied by the alpha.\\n\\nattribute alpha\\n\\nReturns the alpha (opacity) of this Color as a number between 0.0 and\\n1.0, where 0.0 is transparent and 1.0 is opaque.\\n\\nattribute hexcode\\n\\nReturns a string containing a hex color code of the form #rrggbbaa\\nor #rrggbb.\\n\\nColor objects have the following methods. Since Colors are immutable,\\nthese methods always return a new Color object.\\n\\n.. method:: interpolate(other, fraction)\\n\\nInterpolates between this Color and `other` in the RGB color\\nspace, returning a new Color as the result. If `fraction` is 0.0, the\\nresult is the same as this color, if 1.0, it is the same as `other`.\\n\\n.. method:: interpolate_hls(other, fraction)\\n\\nInterpolates between this Color and `other` in the HLS color\\nspace, returning a new Color as the result. If `fraction` is 0.0, the\\nresult is the same as this color, if 1.0, it is the same as `other`.\\n\\n`other` may be a string, Color or an HLS tuple.\\n\\n.. method:: interpolate_hsv(other, fraction)\\n\\nInterpolates between this Color and `other` in the HSV color\\nspace, returning a new Color as the result. If `fraction` is 0.0, the\\nresult is the same as this color, if 1.0, it is the same as `other`.\\n\\n`other` may be a string, Color or an HSV tuple.\\n\\n.. method:: multiply_hls_saturation(saturation)\\n\\nMultiplies this color\'s saturation by `saturation`, and returns\\nthe result as a new Color. This is performed in the HLS color space.\\n\\n.. method:: multiply_hsv_saturation(saturation)\\n\\nMultiplies this color\'s saturation by `saturation`, and returns\\nthe result as a new Color. This is performed in the HSV color space.\\n\\n.. method:: multiply_value(value)\\n\\nMultiples this color\'s value by `value` and returns the result as a\\nnew Color. This is performed in the HSV color space.\\n\\n.. method:: normalize()\\n\\nReturns a normalized version of this Color where all components fall\\nbetween 0 and 255.\\n\\n.. method:: opacity(opacity)\\n\\nMultiplies the alpha channel of this color by `opacity`, and returns\\nthe new color.\\n\\n.. method:: replace_hls_saturation(saturation)\\n\\nReplaces this color\'s saturation with `saturation`, and returns\\nthe result as a new Color. This is performed in the HLS color space.\\n\\n.. method:: replace_hsv_saturation(saturation)\\n\\nReplace this color\'s saturation with `saturation`, and returns\\nthe result as a new Color. This is performed in the HSV color space.\\n\\n.. method:: replace_hue(hue)\\n\\nReplaces this color\'s hue with `hue`, which should be between 0.0 and\\n1.0. Returns the new Color.\\n\\n.. method:: replace_lightness(lightness)\\n\\nReplaces this color\'s lightness with `lightness`, and returns\\nthe result as a new Color. This is performed in the HLS color space.\\n\\n.. method:: replace_opacity(opacity)\\n\\nReplaces this color\'s alpha channel with `opacity`, and\\nreturns the result as a new Color.\\n\\n.. method:: replace_value(value)\\n\\nReplaces this color\'s value with `value` and returns the result as a\\nnew Color. This is performed in the HSV color space.\\n\\n.. method:: rotate_hue(rotation)\\n\\nRotates this color\'s hue by `rotation`, and returns the new Color. `rotation`\\nis a fraction of a full rotation (between 0.0 and 1.0). Divide by 360.0 to\\nconvert to degrees.\\n\\n.. method:: shade(fraction)\\n\\nCreates a shade of this color by mixing it with black. `fraction` is\\nthe fraction of this color that is in the new color. If `fraction` is\\n1.0, the color is unchanged, if 0.0, black is returned.\\n\\nThe alpha channel is unchanged.\\n\\n.. method:: tint(fraction)\\n\\nCreates a tint of this color by mixing it with white. `fraction` is\\nthe fraction of this color that is in the new color. If `fraction` is\\n1.0, the color is unchanged, if 0.0, white is returned.\\n\\nThe alpha channel is unchanged.\\n\\n"],"ColorizeMatrix":["renpy","class","(black_color, white_color)","","class","A ColorMatrix that can be used with matrixcolor to colorize\\nblack and white displayables. It uses the color of each pixel\\nin the black and white to interpolate between the black color\\nand the white color.\\n\\nThe alpha channel is not touched.\\n\\nThis is inteded for use with a black and white image (or one that\\nhas been desaturated with SaturationMatrix), and will yield\\nstrange results when used with images that are not black and white.\\n\\n`black_color`, `white_color`\\nThe colors used in the interpolation.\\n\\n"],"ComposeTransition":["renpy","function","(trans, before, after)","","function","Returns a transition that composes up to three transitions. If not None,\\nthe `before` and `after` transitions are applied to the old and new\\nscenes, respectively. These updated old and new scenes are then supplied\\nto the `trans` transition.\\n\\n\\n\\n```\\n# Move the images in and out while dissolving. (This is a fairly expensive transition.)\\ndefine moveinoutdissolve = ComposeTransition(dissolve, before=moveoutleft, after=moveinright)\\n\\n```\\n\\n"],"Composite":["renpy","function","(size, *args, **properties)","","function","This creates a new displayable of `size`, by compositing other\\ndisplayables. `size` is a (width, height) tuple.\\n\\nThe remaining positional arguments are used to place images inside\\nthe Composite. The remaining positional arguments should come\\nin groups of two, with the first member of each group an (x, y)\\ntuple, and the second member of a group is a displayable that\\nis composited at that position.\\n\\nDisplayables are composited from back to front.\\n\\n\\n\\n```\\nimage eileen composite = Composite(\\n    (300, 600),\\n    (0, 0), \\"body.png\\",\\n    (0, 0), \\"clothes.png\\",\\n    (50, 50), \\"expression.png\\")\\n    \\n```\\n\\n"],"Condition":["renpy","class","(condition, image, **kwargs)","","class","When the condition is true, the layer is displayed. Otherwise, nothing\\nis displayed.\\n\\nThis is used to implement a single ``if``, ``elif`` **or** ``else``\\nlayeredimage statement (for ``else``, `condition` should be \\"True\\").\\nSeveral Conditions can then be passed to a ConditionGroup to\\nemulate a full if/elif/else statement.\\n\\n`condition`\\nThis should be a string giving a Python condition that determines\\nif the layer is displayed.\\n\\n`image`\\nIf not None, this should be a displayable that is displayed when\\nthe condition is true.\\n\\n`if_all`\\nAn attribute or list of attributes. The condition is only evaluated\\nif all of these are showing.\\n\\n`if_any`\\nAn attribute or list of attributes. If not empty, the condition is\\nonly evaluated if any of these are showing.\\n\\n`if_not`\\nAn attribute or list of attributes. The condition is only evaluated\\nif none of these are showing.\\n\\n`at`\\nA transform or list of transforms that are applied to the image.\\n\\nOther keyword arguments are interpreted as transform properties. If any\\nis present, a transform is created that wraps the image. (For example,\\npos=(100, 200) can be used to offset the image by 100 pixels\\nhorizontally and 200 vertically.)\\n\\n"],"ConditionGroup":["renpy","class","(conditions)","","class","Takes a list of Condition to combine them into a single\\nConditionSwitch.\\n\\nImplements the if/elif/else statement.\\n\\n"],"ConditionSwitch":["renpy","function","(*args, predict_all=None, **properties)","","function","This is a displayable that changes what it is showing based on\\nPython conditions. The positional arguments should be given in\\ngroups of two, where each group consists of:\\n\\n* A string containing a Python condition.\\n* A displayable to use if the condition is true.\\n\\nThe first true condition has its displayable shown, at least\\none condition should always be true.\\n\\nThe conditions uses here should not have externally-visible side-effects.\\n\\n`predict_all`\\nIf True, all of the possible displayables will be predicted when\\nthe displayable is shown. If False, only the current condition is\\npredicted. If None, config.conditionswitch_predict_all is\\nused.\\n\\n\\n\\n```\\nimage jill = ConditionSwitch(\\n    \\"jill_beers > 4\\", \\"jill_drunk.png\\",\\n    \\"True\\", \\"jill_sober.png\\")\\n    \\n```\\n\\n"],"Confirm":["renpy","function","(prompt, yes, no=None, confirm_selected=False)","","function","Prompts the user for confirmation of an action. If the user\\nclicks yes, the yes action is performed. Otherwise, the `no`\\naction is performed.\\n\\n`prompt`\\nThe prompt to display to the user.\\n\\n`confirm_selected`\\nIf true, the prompt will be displayed even if the `yes` action\\nis already selected. If false (the default), the prompt\\nwill not be displayed if the `yes` action is selected.\\n\\nThe sensitivity and selectedness of this action match those\\nof the `yes` action.\\n\\nSee renpy.confirm for a function version of this action.\\n\\n"],"Continue":["renpy","function","(regexp=\'[^_]\', confirm=True)","","function","Causes the last save to be loaded.\\nThe purpose of this is to load the player\'s last save\\nfrom the main menu.\\n\\n`regexp`\\nIf present, will be used in `renpy.newest_slot`. The default\\npattern will continue from any save, including quick saves and\\nauto saves. If you want to continue from only saves created by\\nthe player, set this to ``r\\"\\\\d\\"``.\\n\\n`confirm`\\nIf true, causes Ren\'Py to ask the user if they want to continue\\nwhere they left off, if they are not at the main menu.\\n\\n"],"ContrastMatrix":["renpy","class","(value=1.0)","","class","A ColorMatrix that can be used with matrixcolor to change\\nthe brightness of an image, while leaving the Alpha channel\\nalone.\\n\\n`value`\\nThe contrast value. Values between 0.0 and 1.0 decrease\\nthe contrast, while values above 1.0 increase the contrast.\\n\\n"],"CopyToClipboard":["renpy","function","(s)","","function","Copies the string `s` to the system clipboard, if possible. This\\nshould work on desktop and mobile platforms, but will not work\\non the web.\\n\\n"],"Crop":["renpy","function","(rect, child, **properties)","","function","This creates a displayable by cropping `child` to `rect`, where\\n`rect` is an (x, y, width, height) tuple. \\n\\n```\\nimage eileen cropped = Crop((0, 0, 300, 300), \\"eileen happy\\")\\n\\n```\\n\\n"],"CropMove":["renpy","function","(time, mode=\\"slideright\\", startcrop=(0.0, 0.0, 0.0, 1.0), startpos=(0.0, 0.0), endcrop=(0.0, 0.0, 1.0, 1.0), endpos=(0.0, 0.0), topnew=True)","","function","Returns a transition that works by cropping a scene and positioning it on the\\nscreen. This can be used to implement a variety of effects, all of which\\ninvolve changing rectangular slices of scenes.\\n\\n`time`\\nThe time the transition takes.\\n\\n`mode`\\nThe name of the mode of the transition. There are three groups\\nof modes: wipes, slides, and other. This can also be \\"custom\\",\\nto allow a custom mode to be defined.\\n\\nIn a wipe, the image stays fixed, and more of it is revealed as\\nthe transition progresses. For example, in \\"wiperight\\", a wipe from left to right, first the left edge of the image is\\nrevealed at the left edge of the screen, then the center of the image,\\nand finally the right side of the image at the right of the screen.\\nOther supported wipes are \\"wipeleft\\", \\"wipedown\\", and \\"wipeup\\".\\n\\nIn a slide, the image moves. So in a \\"slideright\\", the right edge of the\\nimage starts at the left edge of the screen, and moves to the right\\nas the transition progresses. Other slides are \\"slideleft\\", \\"slidedown\\",\\nand \\"slideup\\".\\n\\nThere are also slideaways, in which the old image moves on top of\\nthe new image. Slideaways include \\"slideawayright\\", \\"slideawayleft\\",\\n\\"slideawayup\\", and \\"slideawaydown\\".\\n\\nWe also support a rectangular iris in with \\"irisin\\" and a\\nrectangular iris out with \\"irisout\\".\\n\\nThe following parameters are only respected if the mode is \\"custom\\". Positions\\nare relative to the size of the screen, while the crops are relative to the\\nsize of the image. So a crop of (0.25, 0.0, 0.5, 1.0) takes the middle\\nhalf of an image.\\n\\n`startcrop`\\nThe starting rectangle that is cropped out of the\\ntop image. A 4-element tuple containing x, y, width, and height.\\n\\n`startpos`\\nThe starting place that the top image is drawn\\nto the screen at, a 2-element tuple containing x and y.\\n\\n`endcrop`\\nThe ending rectangle that is cropped out of the\\ntop image. A 4-element tuple containing x, y, width, and height.\\n\\n`endpos`\\nThe ending place that the top image is drawn\\nto the screen at, a 2-element tuple containing x and y.\\n\\n`topnew`\\nIf true, the scene that is cropped and moved (and is on top of\\nthe other scene) is the new scene. If false, it is the old scene.\\n\\n\\n\\n```\\ndefine wiperight = CropMove(1.0, \\"wiperight\\")\\ndefine wipeleft = CropMove(1.0, \\"wipeleft\\")\\ndefine wipeup = CropMove(1.0, \\"wipeup\\")\\ndefine wipedown = CropMove(1.0, \\"wipedown\\")\\n\\ndefine slideright = CropMove(1.0, \\"slideright\\")\\ndefine slideleft = CropMove(1.0, \\"slideleft\\")\\ndefine slideup = CropMove(1.0, \\"slideup\\")\\ndefine slidedown = CropMove(1.0, \\"slidedown\\")\\n\\ndefine slideawayright = CropMove(1.0, \\"slideawayright\\")\\ndefine slideawayleft = CropMove(1.0, \\"slideawayleft\\")\\ndefine slideawayup = CropMove(1.0, \\"slideawayup\\")\\ndefine slideawaydown = CropMove(1.0, \\"slideawaydown\\")\\n\\ndefine irisout = CropMove(1.0, \\"irisout\\")\\ndefine irisin = CropMove(1.0, \\"irisin\\")\\n\\n```\\n\\n"],"CurrentScreenName":["renpy","function","()","","function","Returns the name of the current screen, or None if there is no\\ncurrent screen. In the case of a screen including by the use\\nscreen, this returns the name of the screen that is doing the\\nincluding, not the name of the screen being included.\\n\\n"],"CycleDict":["renpy","function","(dict, key, values, *, reverse=False, loop=True)","","function","See data-actions.\\n\\n"],"CycleField":["renpy","function","(object, field, values, *, reverse=False, loop=True)","","function","See data-actions.\\n\\n"],"CycleLocalVariable":["renpy","function","(name, values, *, reverse=False, loop=True)","","function","See data-actions.\\n\\n"],"CycleScreenVariable":["renpy","function","(name, values, *, reverse=False, loop=True)","","function","See data-actions.\\n\\n"],"CycleVariable":["renpy","function","(name, values, *, reverse=False, loop=True)","","function","See data-actions.\\n\\n"],"DictInputValue":["renpy","function","(dict, key, default=True, returnable=False)","","function","An input value that updates ``dict[key]``.\\n\\n`dict`\\nMay be a dict object or a list.\\n`default`\\nIf true, this input can be editable by default.\\n`returnable`\\nIf true, the value of this input will be returned when the\\nuser presses enter.\\n\\n"],"DictValue":["renpy","function","(dict, key, range=None, max_is_zero=False, style=\'bar\', offset=0, step=None, action=None, force_step=False, min=None, max=None)","","function","A bar value that allows the user to adjust the value of a key in\\na dict, or of an element at a particular index in a list.\\n\\n`dict`\\nThe dict, or the list.\\n`key`\\nThe key, or the index when using a list.\\n`range`\\nThe range to adjust over. This must be specified if `max` and `min`\\nare not given.\\n`max_is_zero`\\nIf True, then when the key or index\'s value is zero, the value of the\\nbar will be `range`, and all other values will be shifted down\\nby 1. This works both ways - when the bar is set to the maximum,\\nthe value of the key or index is set to 0.\\n\\nThis is used internally, for some preferences.\\n`style`\\nThe styles of the created bar.\\n`offset`\\nAn offset to add to the value.\\n`step`\\nThe amount to change the bar by. If None, defaults to 1/10th of\\nthe bar.\\n`action`\\nIf not None, an action to call when the key or index\'s value is changed.\\n`min`\\nThe minimum value of the bar. If both `min` and `max` are given,\\n`range` and `offset` are calculated from them.\\n`max`\\nThe maximum value of the bar. If both `min` and `max` are given,\\n`range` and `offset` are calculated from them.\\n\\n"],"DisableAllInputValues":["renpy","function","()","","function","Disables all active InputValue. This will re-focus the default\\nInputValue, if there is one. Otherwise, no InputValue will be\\nfocused.\\n\\n"],"Dissolve":["renpy","function","(time, *, time_warp=None, mipmap=None)","","function","Returns a transition that dissolves from the old scene to the new scene.\\n\\n`time`\\nThe time the dissolve will take.\\n\\n`time_warp`\\nA function that adjusts the timeline. If not None, this\\nshould be a function that takes a fractional time between 0.0 and 1.0,\\nand returns a number in the same range.\\n\\n`mipmap`\\nWhen the dissolve will be scaled to less than half its natural size,\\nthis can be set to True. This will cause mipmaps to be generated,\\nwhich will make the dissolve consume more GPU resources, but will\\nreduce artifacts. See mipmap for more information.\\n\\n"],"DownloadSync":["renpy","function","()","","function","This action begins the process of downloading a Sync from the\\nRen\'Py Sync server.\\n\\n"],"Drag":["renpy","class","(d=None, drag_name=None, draggable=True, droppable=True, drag_raise=True, dragging=None, dragged=None, dropped=None, drag_handle=(0.0, 0.0, 1.0, 1.0), drag_joined=..., clicked=None, hovered=None, unhovered=None, mouse_drop=False, **properties)","","class","A displayable that represents an object that can be dragged around\\nits enclosing area. A Drag can also represent an area that\\nother Drags can be dropped on.\\n\\nA Drag can be moved around inside is parent. Generally, its parent\\nshould be either a Fixed or DragGroup.\\n\\nA Drag has one child. The child\'s state reflects the status\\nof the drag and drop operation:\\n\\n* ``selected_hover`` - when it is being dragged.\\n* ``selected_idle`` - when it can be dropped on.\\n* ``hover`` - when the draggable will be dragged when the mouse is\\nclicked.\\n* ``idle`` - otherwise.\\n\\nThe drag handle is a rectangle inside the child. The mouse must be over\\na pixel inside the drag handle for dragging or clicking to occur. If the\\nfocus_mask property is True, that pixel must not be transparent.\\n\\nA newly-created draggable is added to the default DragGroup. A draggable\\ncan only be in a single DragGroup - if it\'s added to a second group,\\nit\'s removed from the first.\\n\\nWhen a Drag is first rendered, if it\'s position cannot be determined\\nfrom the DragGroup it is in, the position of its upper-left corner\\nis computed using the standard layout algorithm. Once that position\\nhas been computed, the layout properties are ignored in favor of the\\nposition stored inside the Drag.\\n\\n`d`\\nIf present, the child of this Drag. Drags use the child style\\nin preference to this, if it\'s not None.\\n\\n`drag_name`\\nIf not None, the name of this draggable. This is available\\nas the `name` property of draggable objects. If a Drag\\nwith the same name is or was in the DragGroup, the starting\\nposition of this Drag is taken from that Draggable.\\n\\n`draggable`\\nIf true, the Drag can be dragged around the screen with\\nthe mouse.\\n\\n`droppable`\\nIf true, other Drags can be dropped on this Drag.\\n\\n`drag_raise`\\nIf true, this Drag is raised to the top when it is dragged. If\\nit is joined to other Drags, all joined drags are raised.\\n\\n`activated`\\nA callback (or list of callbacks) that is called when the mouse\\nis pressed down on the drag. It is called with one argument, a\\na list of Drags that are being dragged. The return value of this\\ncallback is ignored.\\n\\n`dragging`\\nA callback (or list of callbacks) that is called when the Drag is being\\ndragged. It is called with one argument, a list of Drags that are\\nbeing dragged. If the callback returns a value other than None, that\\nvalue is returned as the result of the interaction.\\n\\n`dragged`\\nA callback (or list of callbacks) that is called when the Drag\\nhas been dragged. It is called with two arguments. The first is\\na list of Drags that are being dragged. The second is either\\na Drag that is being dropped onto, or None of a drop did not\\noccur. If the callback returns a value other than None, that\\nvalue is returned as the result of the interaction.\\n\\n`dropped`\\nA callback (or list of callbacks) that is called when this Drag\\nis dropped onto. It is called with two arguments. The first\\nis the Drag being dropped onto. The second is a list of Drags that\\nare being dragged.  If the callback returns a value other than None,\\nthat value is returned as the result of the interaction.\\n\\nWhen a dragged and dropped callback are triggered for the same\\nevent, the dropped callback is only called if dragged returns\\nNone.\\n\\n`clicked`\\nA callback that is called when the Drag is clicked without being moved.\\nIt is called with one argument, the Drag being clicked on. A droppable\\ncan also be focused and clicked. If the callback returns a value other\\nthan None, that value is returned as the result of the interaction.\\n\\n`alternate`\\nAn action that is run when the Drag is right-clicked (on the\\ndesktop) or long-pressed without moving (on mobile). It may\\nbe necessary to increase config.longpress_duration if\\nthis triggers to early on mobile platforms.\\n\\n`hovered`\\nAn action to run when the drag gains focus.\\n\\n`unhovered`\\nAn action to run when the drag loses focus.\\n\\n`tooltip`\\nA tooltip to display when the drag is hovered over.\\n\\n`drag_handle`\\nA (x, y, width, height) tuple, giving the position of the drag\\nhandle within the child. This tuple takes positions.\\n\\n`drag_joined`\\nThis is called with the current Drag as an argument. It\'s\\nexpected to return a list of [ (drag, x, y) ] tuples, giving\\nthe draggables to drag as a unit. `x` and `y` are the offsets\\nof the drags relative to each other, they are not relative\\nto the corner of this drag. `drag` is either the Drag object\\nto be joined or the drag_name of such a Drag.\\n\\n`drag_offscreen`\\nDetermines the conditions under which the drag is allowed\\nto be dragged offscreen. Allowing offscreen dragging can be\\ndangerous to use with drag_joined or drags that can change\\nsize, as the drags can leave the screen entirely, with no\\nway to get them back on the screen.\\n\\nThis should be one of:\\n\\nFalse\\nTo disallow dragging the drag offscreen. (The default)\\n\\nTrue\\nTo allow dragging offscreen, in any direction.\\n\\n\\"horizontal\\"\\nTo allow dragging offscreen in the horizontal direction only.\\n\\n\\"vertical\\"\\nTo allow dragging offscreen in the vertical direction only.\\n\\n(width, height)\\nBoth width and height must be integers. The drag can be\\ndragged offscreen as long as a (width, height)-sized part\\nof it remains on-screen. So, (100, 100) will ensure that\\nat least a 100x100 pixel area of the displayable will\\nremain on-screen even while the rest of the displayable\\ncan be dragged offscreen. Setting this to the width and\\nheight of the displayable being dragged is equivalent to\\nnot allowing the drag to go offscreen at all.\\n\\n(min_x, max_x, min_y, max_y)\\nWhere each of min_x, max_x, min_y, and max_y are integers.\\nmin_x is the number of pixels away from the left border,\\nand max_x is the number of pixels away from the right\\nborder. The same goes for min_y and max_y on the top and\\nbottom borders respectively. The drag can be moved until\\none of its edges hit the specified border. (0, 0, 0, 0)\\nis equivalent to not allowing dragging offscreen at all.\\n\\nFor example, (-100, 200, 0, 0) would allow the drag to be\\ndragged 100 pixels off the left edge of the screen and 200\\npixels off the right edge of the screen, but does not\\nallow it to be dragged offscreen at the top nor bottom.\\n\\nThis can also be used to constrain the drag within the\\nscreen bounds. (200, -200, 200, -200) would only allow\\nthe drag within 200 pixels of the edges of the screen.\\n\\nYou can envision this as an additional \\"border\\" around\\nthe drag, which may go outside the bounds of the screen,\\nthat constrains the drag to remain within it.\\n\\ncallable\\nA callable can be provided to drag_offscreen. It must\\ntake two arguments: an x and a y position which\\nrepresents the dragged position of the top left corner of\\nthe drag, and it must return an (x, y) tuple which is the\\nnew (x, y) position the drag should be in. This callable\\nis called frequently, whenever the drag is moved. For\\nexample, the following function snaps the drag into place\\nevery 300 pixels\\n\\n```\\ndef drag_snap(x, y):\\n\\n    if y < 300:\\n        y = 0\\n    elif y < 600:\\n        y = 300\\n    else:\\n        y = 600\\n        \\n    return 200, y\\n    \\n```\\n\\n`mouse_drop`\\nIf true, the drag is dropped on the first droppable under the cursor.\\nIf false, the default, the drag is dropped onto the droppable with\\nthe largest degree of overlap.\\n\\n`drop_allowable`\\nA callback that is called to determine whether this drop will allow\\nthe current drags to be dropped onto it. It is called with two arguments.\\nThe first is the Drag which determines its sensitivity.\\nThe second is a list of Drags that are being dragged.\\n\\n`snapped`\\nA callback (or list of callbacks) that is called when the Drag completes\\na snap animation. It is called with four arguments. The first is the\\nDrag which was undergoing the snap animation. The second and third are\\nthe x and y coordinates where the Drag was set to snap to. The fourth\\nis a boolean which is True if the snap animation was successfully\\ncompleted, and False if it was interrupted (e.g. from being grabbed in\\nthe middle of snapping). For example, the following function sets\\nthe drag\'s start_x and start_y position to its intended end position\\nif the snap animation was interrupted\\n\\n```\\ndef snapped_callback(drag, x, y, completed):\\n    if not completed:\\n        drag.start_x = x\\n        drag.start_y = y\\n        \\n        \\n```\\n\\nExcept for `d`, all of the parameters are available as fields (with\\nthe same name) on the Drag object. In addition, after the drag has\\nbeen rendered, the following fields become available:\\n\\n`x`, `y`\\nThe position of the Drag relative to its parent, in pixels.\\n\\n`start_x`, `start_y`\\nThe drag start position of the Drag relative to its parent, in pixels.\\n\\n`grab_x`, `grab_y`\\nThe x and y positions, relative to its parent, where the drag was\\npicked up, in pixels.\\n\\n`last_drop`\\nThe last Drag that the current Drag can be dropped on if released,\\nor None if no valid Drag currently exists.\\n\\n`snapping`\\nTrue if this Drag is in the middle of a snapping animation.\\n\\n`w`, `h`\\nThe width and height of the Drag\'s child, in pixels.\\n\\n.. method:: bottom()\\n\\nLowers this displayable to the bottom of its drag_group.\\n\\n.. method:: set_child(d)\\n\\nChanges the child of this drag to `d`.\\n\\n.. method:: snap(x, y, delay=0, warper=None)\\n\\nChanges the position of the drag. If the drag is not showing,\\nthen the position change is instantaneous. Otherwise, the\\nposition change takes `delay` seconds and an optional warper. If no\\nwarper is provided, the transition is linear.\\n\\n.. method:: top()\\n\\nRaises this displayable to the top of its drag_group.\\n\\n"],"DragGroup":["renpy","class","(*children, **properties)","","class","Represents a group of Drags. A Drag is limited to the boundary of\\nits DragGroup. Dropping only works between Drags that are in the\\nsame DragGroup. Drags may only be raised when they are inside a\\nDragGroup.\\n\\nA DragGroup is laid out like a Fixed.\\n\\nAll positional parameters to the DragGroup constructor should be\\nDrags, that are added to the DragGroup.\\n\\n\\n`min_overlap`\\nAn integer which means the minimum number of pixels at the\\noverlap for the drop to be allowed.\\n\\n.. method:: add(child)\\n\\nAdds `child`, which must be a Drag, to this DragGroup. This child\\nwill be added above all other children of this DragGroup.\\n\\n.. method:: get_child_by_name(name)\\n\\nReturns the first child of this DragGroup that has a drag_name\\nof `name`.\\n\\n.. method:: remove(child)\\n\\nRemoves `child` from this DragGroup.\\n\\n"],"DynamicDisplayable":["renpy","class","(function, *args, **kwargs)","","class","A displayable that can change its child based on a Python\\nfunction, over the course of an interaction. It does not\\ntake any properties, as its layout is controlled by the\\nproperties of the child displayable it returns.\\n\\n`function`\\nA function that is called with the arguments:\\n\\n* The amount of time the displayable has been shown for.\\n* The amount of time any displayable with the same tag has been shown for.\\n* Any positional or keyword arguments supplied to DynamicDisplayable.\\n\\nand should return a (d, redraw) tuple, where:\\n\\n* `d` is a displayable to show.\\n* `redraw` is the maximum amount of time to wait before calling the\\nfunction again, or None to not require the function be called again\\nbefore the start of the next interaction.\\n\\n`function` is called at the start of every interaction.\\n\\nAs a special case, `function` may also be a python string that evaluates\\nto a displayable. In that case, function is run once per interaction.\\n\\n\\n\\n```\\n# Shows a countdown from 5 to 0, updating it every tenth of\\n# a second until the time expires.\\ninit python:\\n\\n    def show_countdown(st, at):\\n        if st > 5.0:\\n            return Text(\\"0.0\\"), None\\n        else:\\n            d = Text(\\"{:.1f}\\".format(5.0 - st))\\n            return d, 0.1\\n            \\nimage countdown = DynamicDisplayable(show_countdown)\\n\\n```\\n\\n"],"DynamicImage":["renpy","class","(name)","","class","A DynamicImage is a displayable that has text interpolation performed\\non it to yield a string giving a new displayable. Such interpolation is\\nperformed at the start of each interaction.\\n\\n"],"EditFile":["renpy","function","(filename=None, line=1)","","function","Requests Ren\'Py to open the given file in a text editor, if possible.\\nThis will work on some platforms but not others.\\n\\n`filename`\\nIf given, the filename to open. If None, the current filename\\nand line number are used, with `line` being ignored.\\n\\n`line`\\nThe line number to open the file at.\\n\\n"],"Editor":["renpy","class","","","class",".. method:: begin(self, new_window=False, **kwargs)\\n\\nStarts an editor transaction.\\n\\nIf `new_window` is true, the editor should attempt to open a new window.\\nOtherwise, it should attempt to perform the transaction in an existing editor\\nwindow.\\n\\n.. method:: end(self, **kwargs)\\n\\nEnds a transaction.\\n\\n.. method:: open(self,  filename, line=None, **kwargs)\\n\\nOpens a `filename` in the editor.\\n\\nIf `line` is not None, attempts to position the editing cursor at `line`.\\n"],"EndReplay":["renpy","function","(confirm=True)","","function","Ends the current replay.\\n\\n`confirm`\\nIf true, prompts the user for confirmation before ending the\\nreplay.\\n\\n"],"ExecJS":["renpy","function","(code)","","function","Executes the given JavaScript source code. This is only supported on\\nthe web, and will raise an exception on other platforms. The script\\nis executed asynchronously in the window context, and the return value\\nis not available.\\n\\n`code`\\nThe JavaScript code to execute.\\n\\n"],"Fade":["renpy","function","(out_time, hold_time, in_time, *, color=\\"#000\\")","","function","Returns a transition that takes `out_time` seconds to fade to\\na screen filled with `color`, holds at that screen for `hold_time`\\nseconds, and then takes `in_time` to fade to then new screen.\\n\\n\\n\\n```\\n# Fade to black and back.\\ndefine fade = Fade(0.5, 0.0, 0.5)\\n\\n# Hold at black for a bit.\\ndefine fadehold = Fade(0.5, 1.0, 0.5)\\n\\n# Camera flash - quickly fades to white, then back to the scene.\\ndefine flash = Fade(0.1, 0.0, 0.5, color=\\"#fff\\")\\n\\n```\\n\\n"],"FieldInputValue":["renpy","function","(object, field, default=True, returnable=False)","","function","An input value that updates `field` on `object`.\\n\\n`field`\\nA string giving the name of the field.\\n`default`\\nIf true, this input can be editable by default.\\n`returnable`\\nIf true, the value of this input will be returned when the\\nuser presses enter.\\n\\n"],"FieldValue":["renpy","function","(object, field, range=None, max_is_zero=False, style=\'bar\', offset=0, step=None, action=None, force_step=False, min=None, max=None)","","function","A bar value that allows the user to adjust the value of a field\\non an object.\\n\\n`object`\\nThe object.\\n`field`\\nThe field name, a string.\\n`range`\\nThe range to adjust over. This must be specified if `max` and `min`\\nare not given.\\n`max_is_zero`\\nIf True, then when the field\'s value is zero, the value of the\\nbar will be `range`, and all other values will be shifted down\\nby 1. This works both ways - when the bar is set to the maximum,\\nthe value of the field is set to 0.\\n\\nThis is used internally, for some preferences.\\n`style`\\nThe styles of the created bar.\\n`offset`\\nAn offset to add to the value.\\n`step`\\nThe amount to change the bar by. If None, defaults to 1/10th of\\nthe bar.\\n`action`\\nIf not None, an action to call when the field\'s value is changed.\\n`min`\\nThe minimum value of the bar. If both `min` and `max` are given,\\n`range` and `offset` are calculated from them.\\n`max`\\nThe maximum value of the bar. If both `min` and `max` are given,\\n`range` and `offset` are calculated from them.\\n\\n"],"FileAction":["renpy","function","(name, page=None, **kwargs)","","function","\\"Does the right thing\\" with the file. This means loading it if the\\nload screen is showing (current screen is named \\"load\\"), and saving\\notherwise.\\n\\n`name`\\nThe name of the slot to save to or load from. If None, an unused slot\\n(a large number based on the current time) will be used.\\n\\n`page`\\nThe page that the file will be saved to or loaded from. If None, the\\ncurrent page is used.\\n\\nOther keyword arguments are passed to FileLoad or FileSave.\\n\\n"],"FileCurrentPage":["renpy","function","()","","function","Returns the current file page as a string.\\n\\n"],"FileCurrentScreenshot":["renpy","class","(empty=None, **properties)","","class","A displayable that shows the screenshot that will be saved with the current\\nfile, if a screenshot has been taken when entering a menu or with\\nFileTakeScreenshot.\\n\\nIf there is no current screenshot, `empty` is shown in its place. (If `empty` is\\nNone, it defaults to Null.)\\n\\n"],"FileDelete":["renpy","function","(name, confirm=True, page=None, slot=False)","","function","Deletes the file.\\n\\n`name`\\nThe name of the slot to delete.\\n\\n`confirm`\\nIf true and not at the main menu, prompt for confirmation before loading the file.\\n\\n`page`\\nThe page that the file will be loaded from. If None, the\\ncurrent page is used.\\n\\n`slot`\\nIf True, `name` is taken to be a slot name, and `page` is ignored.\\n\\n"],"FileJson":["renpy","function","(name, key=None, empty=None, missing=None, page=None, slot=False)","","function","Accesses the Json information associated with `name`.\\n\\nThis always returns `empty` if the slot is empty.\\n\\nIf not, and if `key` is None, returns the entire dictionary containing the Json data.\\n\\nOtherwise, this returns json[key] if `key` is defined on the json object of the save,\\nand `missing` if there is a save with the given name, but it does not contain `key`.\\n\\nSuch Json data is added to a save slot by callbacks registered using\\nconfig.save_json_callbacks.\\n\\nBy default, the following keys are defined:\\n\\n`_save_name`\\nThe value of save_name when the game was saved.\\n\\n`_renpy_version`\\nThe version of Ren\'Py the save was created with.\\n\\n`_version`\\nThe value of config.version when the save was created.\\n\\n`_game_runtime`\\nThe result of calling renpy.get_game_runtime.\\n\\n`_ctime`\\nThe time the save was created, in seconds since January 1, 1970, UTC.\\n\\n"],"FileLoad":["renpy","function","(name, confirm=True, page=None, newest=True, cycle=False, slot=False)","","function","Loads the file.\\n\\n`name`\\nThe name of the slot to load from. If None, an unused slot will be\\nused, and hence the file will not be loadable.\\n\\n`confirm`\\nIf true and not at the main menu, prompt for confirmation before loading the file.\\n\\n`page`\\nThe page that the file will be loaded from. If None, the\\ncurrent page is used.\\n\\n`newest`\\nIf true, the button is selected if this is the newest file.\\n\\n`cycle`\\nIgnored.\\n\\n`slot`\\nIf True, `name` is taken to be a slot name, and `page` is ignored.\\n\\n"],"FileLoadable":["renpy","function","(name, page=None, slot=False)","","function","This is a function that returns true\\nif the file is loadable, and false otherwise.\\n\\n"],"FileNewest":["renpy","function","(name, page=None, slot=False)","","function","Returns True if this is the newest file slot, or False otherwise.\\n\\n"],"FilePage":["renpy","function","(page)","","function","Sets the file page to `page`, which should be one of \\"auto\\", \\"quick\\",\\nor an integer.\\n\\n"],"FilePageName":["renpy","function","(auto=\'a\', quick=\'q\')","","function","Returns the name of the current file page, as a string. If a normal\\npage, this returns the page number. Otherwise, it returns\\n`auto` or `quick`.\\n\\n"],"FilePageNameInputValue":["renpy","function","(pattern=\'Page {}\', auto=\'Automatic saves\', quick=\'Quick saves\', page=None, default=False)","","function","An input value that updates the name of a file page.\\n\\n`pattern`\\nThis is used for the default name of a page. Python-style substition\\nis performed, such that {} is replaced with the number of the page.\\n\\n`auto`\\nThe name of the autosave page.\\n\\n`quick`\\nThe name of the quicksave page.\\n\\n`page`\\nIf given, the number of the page to display. This should usually\\nbe left as None, to give the current page.\\n\\n`default`\\nIf true, this input can be editable by default.\\n\\n"],"FilePageNext":["renpy","function","(max=None, wrap=False, auto=True, quick=True)","","function","Goes to the next file page.\\n\\n`max`\\nIf set, this should be an integer that gives the number of\\nthe maximum file page we can go to.\\n\\n`wrap`\\nIf true, we can go to the first page when on the\\nlast file page if `max` is set.\\n\\n`auto`\\nIf true and wrap is set, this can bring the player to\\nthe page of automatic saves.\\n\\n`quick`\\nIf true and wrap is set, this can bring the player to\\nthe page of automatic saves.\\n\\n"],"FilePagePrevious":["renpy","function","(max=None, wrap=False, auto=True, quick=True)","","function","Goes to the previous file page, if possible.\\n\\n`max`\\nIf set, this should be an integer that gives the number of\\nthe maximum file page we can go to. This is required to enable\\nwrap.\\n\\n`wrap`\\nIf true, we can go to the last page when on the first file page if max is set.\\n\\n`auto`\\nIf true, this can bring the player to\\nthe page of automatic saves.\\n\\n`quick`\\nIf true, this can bring the player to\\nthe page of automatic saves.\\n\\n"],"FileSave":["renpy","function","(name, confirm=True, newest=True, page=None, cycle=False, slot=False, action=None)","","function","Saves the file.\\n\\nThe button with this slot is selected if it\'s marked as the\\nnewest save file.\\n\\n`name`\\nThe name of the slot to save to. If None, an unused slot\\n(a large number based on the current time) will be used.\\n\\n`confirm`\\nIf true, then we will prompt before overwriting a file.\\n\\n`newest`\\nIgnored.\\n\\n`page`\\nThe name of the page that the slot is on. If None, the current\\npage is used.\\n\\n`cycle`\\nIf true, then saves on the supplied page will be cycled before\\nbeing shown to the user. config.quicksave_slots slots are\\nused in the cycle.\\n\\n`slot`\\nIf True, `name` is taken to be a slot name, and `page` is ignored.\\n\\n`action`\\nAn action that is run after the save is complete. This is only run\\nif the save is successful.\\n\\n"],"FileSaveName":["renpy","function","(name, empty=\'\', page=None, slot=False)","","function","Return the save_name that was in effect when the file was saved,\\nor `empty` if the file does not exist.\\n\\n"],"FileScreenshot":["renpy","function","(name, empty=None, page=None, slot=False)","","function","Returns the screenshot associated with the given file. If the\\nfile is not loadable, then `empty` is returned, unless it\'s None,\\nin which case, a Null displayable is created.\\n\\nThe return value is a displayable.\\n\\n"],"FileSlotName":["renpy","function","(slot, slots_per_page, auto=\'a\', quick=\'q\', format=\'%s%d\')","","function","Returns the name of the numbered slot. This assumes that slots on\\nnormal pages are numbered in a linear order starting with 1, and\\nthat page numbers start with 1. When slot is 2, and slots_per_page\\nis 10, and the other variables are the defaults:\\n\\n* When the first page is showing, this returns \\"2\\".\\n* When the second page is showing, this returns \\"12\\".\\n* When the auto page is showing, this returns \\"a2\\".\\n* When the quicksave page is showing, this returns \\"q2\\".\\n\\n`slot`\\nThe number of the slot to access.\\n\\n`slots_per_page`\\nThe number of slots per page.\\n\\n`auto`\\nA prefix to use for the auto page.\\n\\n`quick`\\nA prefix to use for the quick page.\\n\\n`format`\\nThe formatting code to use. This is given two arguments: A string\\ngiving the page prefix, and an integer giving the slot number.\\n\\n"],"FileTakeScreenshot":["renpy","function","()","","function","Take a screenshot to be used when the game is saved. This can\\nbe used to ensure that the screenshot is accurate, by taking\\na picture of the screen before a file save screen is shown.\\n\\n"],"FileTime":["renpy","function","(name, format=\'%b %d, %H:%M\', empty=\'\', page=None, slot=False)","","function","Returns the time the file was saved, formatted according\\nto the supplied `format`. If the file is not found, `empty` is\\nreturned.\\n\\nThe return value is a string.\\n\\n"],"FileUsedSlots":["renpy","function","(page=None, highest_first=True)","","function","Returns a list of used numeric file slots on the page.\\n\\n`page`\\nThe name of the page that will be scanned. If None, the current page\\nis used.\\n\\n`highest_first`\\nIf true, the highest-numbered file slot is listed first.\\nOtherwise, the lowest-numbered slot is listed first.\\n\\n"],"Fixed":["renpy","function","(*args, **properties)","","function","A box that fills the screen. Its members are laid out\\nfrom back to front, with their position properties\\ncontrolling their position.\\n\\n"],"Flatten":["renpy","class","(child, drawable_resolution=True, **properties)","","class","This flattens `child`, which may be made up of multiple textures, into\\na single texture.\\n\\nCertain operations, like the alpha transform property, apply to every\\ntexture making up a displayable, which can yield incorrect results\\nwhen the textures overlap on screen. Flatten creates a single texture\\nfrom multiple textures, which can prevent this problem.\\n\\nFlatten is a relatively expensive operation, and so should only be used\\nwhen absolutely required.\\n\\n`drawable_resolution`\\nDefaults to true, which is usually the right choice, but may cause\\nthe resulting texture, when scaled, to have different artifacts than\\nthe textures that make it up. Setting this to False will change the\\nartifacts, which may be more pleasing in some cases.\\n\\n"],"FontGroup":["renpy","class","()","","class","A group of fonts that can be used as a single font.\\n\\n.. method:: add(font, start, end, target=None, target_increment=False)\\n\\nAssociates a range of characters with a `font`.\\n\\n`start`\\nThe start of the range. This may be a single-character string, or\\nan integer giving a unicode code point. If start is None, then the\\nfont is used as the default.\\n\\n`end`\\nThe end of the range. This may be a single-character string, or an\\ninteger giving a unicode code point. This is ignored if start is\\nNone.\\n\\n`target`\\nIf given, associates the given range of characters with specific\\ncharacters from the given font, depending on target_increment.\\nThis may be a single-character string, or an integer giving a\\nunicode code point. This is ignored if the character had already\\nbeen added.\\n\\n`target_increment`\\nIf True, the [start, end] range is mapped to the\\n[target, target+end-start] range. If False, every character from the\\nrange is associated with the target character.\\n\\nWhen multiple .add() calls include the same character, the first call\\ntakes precedence.\\n\\nThis returns the FontGroup, so that multiple calls to .add() can be\\nchained together.\\n\\n.. method:: remap(cha, target)\\n\\nRemaps one or a set of characters to a single target character.\\n\\n`cha`\\nThe character or characters to remap. This may be a single-character\\nstring, or an integer giving a unicode code point, or an iterable of\\neither.\\n\\n`target`\\nThe character to remap to. This may be a single-character string, or\\nan integer giving a unicode code point.\\n\\nAny given character having already been remapped (either with add or with\\nremap) will be ignored. However, if the FontGroup has no default font, any\\ngiven character must have been previously added.\\n\\nThis method also returns the FontGroup, for the same reasons.\\n\\n\\n"],"Frame":["renpy","class","(image, left=0, top=0, right=None, bottom=None, *, tile=False, **properties)","","class","A displayable that resizes an image to fill the available area,\\nwhile preserving the width and height of its borders. It is often\\nused as the background of a window or button.\\n\\n.. figure:: frame_example.png\\n\\nUsing a frame to resize an image to double its size.\\n\\n`image`\\nAn image manipulator that will be resized by this frame.\\n\\n`left`\\nThe size of the border on the left side. This can also be a\\nBorders object, in which case that object is used in place\\nof the other parameters.\\n\\n`top`\\nThe size of the border on the top.\\n\\n`right`\\nThe size of the border on the right side. If None, defaults\\nto `left`.\\n\\n`bottom`\\nThe side of the border on the bottom. If None, defaults to `top`.\\n\\n`tile`\\nIf set to True, tiling is used to resize sections of the image,\\nrather than scaling. If set to the string \\"integer\\", the nearest\\ninteger number of tiles will be used in each direction. That set of\\nfull tiles will then be scaled up or down to fit the required area.\\n\\n\\n\\n```\\n# Resize the background of the text window if it\'s too small.\\ninit python:\\n    style.window.background = Frame(\\"frame.png\\", 10, 10)\\n    \\n    \\n```\\n\\n"],"Function":["renpy","function","(callable, *args, _update_screens=True, **kwargs)","","function","This Action calls ``callable(*args, **kwargs)``.\\n\\n`callable`\\nCallable object. This assumes that if two callables compare\\nequal, calling either one will be equivalent.\\n\\n`args`\\npositional arguments to be passed to `callable`.\\n\\n`kwargs`\\nkeyword arguments to be passed to `callable`.\\n\\n`_update_screens`\\nWhen true, the interaction restarts and the screens are updated\\nafter the function returns.\\n\\nIf the function returns a non-None value, the interaction stops and\\nreturns that value. (When called using the call screen statement, the\\nresult is placed in the `_return` variable.)\\n\\nInstead of using a Function action, you can define your own subclass\\nof the Action class. This lets you name the action, and\\ndetermine when it should be selected and sensitive.\\n\\n"],"Gallery":["renpy","class","()","","class","This class supports the creation of an image gallery by handling the\\nlocking of images, providing an action that can show one or more images,\\nand a providing method that creates buttons that use that action.\\n\\nattribute transition\\n\\nThe transition that is used when changing images.\\n\\nattribute locked_button\\n\\nThe default displayable used by make_button for a locked button.\\n\\nattribute hover_border\\n\\nThe default hover border used by make_button.\\n\\nattribute idle_border\\n\\nThe default idle border used by make_button.\\n\\nattribute unlocked_advance\\n\\nIf true, the gallery will only advance through unlocked images.\\n\\nattribute navigation\\n\\nIf true, the gallery will display navigation and slideshow\\nbuttons on top of the images.\\n\\nTo customize the look of the navigation, you may override the\\ngallery_navigation screen. The default screen is defined in\\nrenpy/common/00gallery.rpy\\n\\nattribute span_buttons\\n\\nIf true, the gallery will advance between buttons.\\n\\nattribute slideshow_delay\\n\\nThe time it will take for the gallery to advance between images\\nin slideshow mode.\\n\\nattribute image_screen = \\"_gallery\\"\\n\\nThe screen that is used to show individual images in this gallery.\\nThis screen is supplied the following keyword arguments:\\n\\n`locked`\\nTrue if the image is locked.\\n`displayables`\\nA list of transformed displayables that should be shown to the user.\\n`index`\\nA 1-based index of the image being shown.\\n`count`\\nThe number of images attached to the current button.\\n`gallery`\\nThe image gallery object.\\n\\nAdditional arguments may be supplied by prefixing them with\\n`show_` in calls to Gallery.image and Gallery.unlock image.\\n\\nThe default screen is defined at the bottom of renpy/common/00gallery.rpy.\\n\\n.. method:: Action(name)\\n\\nAn action that displays the images associated with the given button\\nname.\\n\\n.. method:: Next(unlocked=False)\\n\\nAdvances to the next image in the gallery.\\n\\n`unlocked`\\nIf true, only considers unlocked images.\\n\\n.. method:: Previous(unlocked=False)\\n\\nGoes to the previous image in the gallery.\\n\\n`unlocked`\\nIf true, only considers unlocked images.\\n\\n.. method:: Return()\\n\\nStops displaying gallery images.\\n\\n.. method:: ToggleSlideshow()\\n\\nToggles slideshow mode.\\n\\n.. method:: allprior()\\n\\nA condition that is true if all prior images associated with the\\ncurrent button have been unlocked.\\n\\n.. method:: button(name)\\n\\nCreates a new button, named `name`.\\n\\n`name`\\nThe name of the button being created.\\n\\n.. method:: condition(expression)\\n\\nA condition that is satisfied when an expression evaluates to true.\\n\\n`expression`\\nA string giving a Python expression.\\n\\n.. method:: get_fraction(name, format=\'{seen}/{total}\')\\n\\nReturns a text string giving the number of unlocked images and total number of images in the button\\nnamed `name`.\\n\\n`format`\\nA Python format string that\'s used to format the numbers. This has three values that\\ncan be substituted in:\\n\\n{seen}\\nThe number of images that have been seen.\\n{total}\\nThe total number of images in the button.\\n{locked}\\nThe number of images that are still locked.\\n\\n.. method:: image(*displayables, **properties)\\n\\nAdds a new image to the current button, where an image consists\\nof one or more displayables.\\n\\nProperties beginning with `show_` have that prefix stripped off,\\nand are passed to the gallery.image_screen screen as additional\\nkeyword arguments.\\n\\n.. method:: make_button(name, unlocked, locked=None, hover_border=None, idle_border=None, style=None, **properties)\\n\\nThis creates a button that displays the images associated with the given\\nbutton name.\\n\\n`name`\\nThe name of the button that will be created.\\n\\n`unlocked`\\nA displayable that is displayed for this button when it is\\nunlocked.\\n\\n`locked`\\nA displayable that is displayed for this button when it is\\nlocked. If None, the locked_button field of the gallery\\nobject is used instead.\\n\\n`hover_border`\\nA displayable that is used to overlay this button when\\nit is unlocked and has focus. If None, the hover_border\\nfield of the gallery object is used.\\n\\n`idle_border`\\nA displayable that is used to overlay this button when\\nit is unlocked but unfocused. If None, the idle_border\\nfield of the gallery object is used.\\n\\n`style`\\nThe style the button inherits from. When None, defaults\\nto the \\"empty\\" style, so as not to inherit borders and\\nso on.\\n\\nAdditional keyword arguments become style properties of the\\ncreated button object.\\n\\n.. method:: transform(*transforms)\\n\\nApplies transforms to the last image registered. This should be\\ncalled with the same number of transforms as the image has\\ndisplayables. The transforms are applied to the corresponding\\ndisplayables.\\n\\nIf a transform is None, the default transform is used.\\n\\n.. method:: unlock(*images)\\n\\nA condition that takes one or more image names as argument, and\\nis satisfied when all the named images have been seen by the\\nplayer. The image names should be given as strings.\\n\\n.. method:: unlock_image(*images, **properties)\\n\\nA convenience method that is equivalent to calling image and unlock\\nwith the same parameters. (Keyword arguments beginning with ``show_`` are\\nonly passed to image.) This will cause an image to be displayed\\nif it has been seen before.\\n\\nThe images should be specified as strings giving image names.\\n\\n"],"GamepadCalibrate":["renpy","function","()","","function","An action that invokes the gamepad calibration routine.\\n\\n"],"GamepadExists":["renpy","function","(developer=True)","","function","A function that returns true if a gamepad is present, and false otherwise.\\n\\n`developer`\\nForces this function to always return true while config.developer\\nis true.\\n\\n"],"GetCharacterVolume":["renpy","function","(voice_tag)","","function","This returns the volume associated with voice tag, a number\\nbetween 0.0 and 1.0, which is interpreted as a fraction of the\\nmixer volume for the `voice` channel.\\n\\n"],"GetFocusRect":["renpy","function","(name=\'default\')","","function","If a focus rectangle with the given name has been stored (either with\\nCaptureFocus, or automatically by a tooltip, returns the\\na (x, y, h, w) rectangle. Otherwise, returns None.\\n\\n`name`\\nThe name of the focus rectangle to retrieve. The name \\"tooltip\\"\\nis special, as it is automatically captured when the tooltip is\\nchanged.\\n\\n"],"GetMixer":["renpy","function","(mixer, db=False)","","function","Returns the volume of `mixer`.\\n\\n`db`\\nIf true, returns the volume in decibels. If false, the default,\\nreturns the volume as a number between 0.0 and 1.0.\\n\\n"],"GetTooltip":["renpy","function","(screen=None, last=False)","","function","Returns the tooltip of the currently focused displayable, or None\\nif no displayable is focused.\\n\\n`screen`\\nIf not None, this should be the name or tag of a screen. If\\ngiven, this function only returns the tooltip if the focused\\ndisplayable is part of the screen.\\n\\n`last`\\nIf true, returns the last non-None value this function would\\nhave returned.\\n\\n\\n"],"Grid":["renpy","function","(cols, rows, *args, **properties)","","function","Lays out displayables in a grid. The first two positional arguments\\nare the number of columns and rows in the grid. This must be followed\\nby `columns * rows` positional arguments giving the displayables that\\nfill the grid.\\n\\n"],"HBox":["renpy","function","(*args, **properties)","","function","A box that lays out its members from left to right.\\n\\n"],"Help":["renpy","function","(help=None)","","function","Displays help.\\n\\n`help`\\nA string that is used to find help. This is used in the\\nfollowing way:\\n\\n* If a label with this name exists, the label is called in\\na new context.\\n* Otherwise, this is interpreted as giving the name of a file\\nthat should be opened in a web browser.\\n\\nIf `help` is None, config.help is used as the default\\nvalue. If it is also None, the config.help_screen screen\\nis shown in a new context, if it exists. Otherwise, does nothing.\\n\\n"],"Hide":["renpy","function","(screen=None, transition=None, _layer=None, immediately=False)","","function","This causes a screen to be hidden if it is shown.\\n\\n`screen`\\nEither a string giving the name of the screen to be hidden, or\\nNone to hide the current screen.\\n\\n`transition`\\nIf not None, a transition that occurs when hiding the screen.\\n\\n`_layer`\\nThis is passed as the layer argument to renpy.hide_screen.\\nIgnored if `screen` is None.\\n\\n`immediately`\\nIf True, the screen is hidden immediately, without the \'on hide\' event.\\n\\n"],"HideInterface":["renpy","function","()","","function","Causes the interface to be hidden until the user clicks.\\nThis is typically what happens when hitting the H key in a Ren\'Py game.\\n\\n"],"HistoryEntry":["renpy","class","","","class","attribute kind\\n\\nThe kind of character that created this history. Ren\'Py sets this\\nto \\"current\\" while a line of dialogue is displaying, and then\\nto either \\"adv\\" or \\"nvl\\".\\n\\nattribute who\\n\\nA string giving the name of the character that is speaking, or None\\nif no such string exists.\\n\\nattribute what\\n\\nA string giving the dialogue text.\\n\\nattribute who_args\\n\\nA dictionary giving the properties that were supplied to the who\\ntext widget when the dialogue was originally shown.\\n\\nattribute what_args\\n\\nA dictionary giving the properties that were supplied to the what\\ntext widget when the dialogue was originally shown.\\n\\nattribute window_args\\n\\nA dictionary giving the properties that were supplied to the\\ndialogue window when the dialogue was originally shown.\\n\\nattribute show_args\\n\\nA dictionary giving the properties that were supplied to the say\\nscreen when the dialogue was originally shown.\\n\\nattribute image_tag\\n\\nThe image tag given to the Character, or None if no such\\ntag was given.\\n\\nattribute voice\\n\\nThis is the object returned from _get_voice_info, storing\\ninformation about the voice that is being played.\\n\\nattribute rollback_identifier\\n\\nThis is an identifier that can be passed to the RollbackToIdentifier\\naction, to cause a rollback to the line of script that generated\\nthis history entry. The rollback only occurs if the location is still in\\nthe script log, otherwise the action is insensitive.\\n\\n\\n"],"HueMatrix":["renpy","class","(value=1.0)","","class","A ColorMatrix that can be used with matrixcolor to rotate the hue by\\n`value` degrees. While `value` can be any number, positive or negative,\\n360 degrees makes a complete rotation. The alpha channel is left alone.\\n\\n"],"IdentityMatrix":["renpy","class","()","","class","A ColorMatrix that can be used with matrixcolor that does not\\nchange the color or alpha of what is supplied to it.\\n\\n"],"If":["renpy","function","(expression, true=None, false=None)","","function","This returns `true` if `expression` is true, and `false`\\notherwise. Use this to select an action based on an expression.\\nNote that the default, None, can be used as an action that causes\\na button to be disabled.\\n\\n"],"Image":["renpy","function","(filename, *, optimize_bounds=True, oversample=1, dpi=96, **properties)","","function","Loads an image from a file. `filename` is a\\nstring giving the name of the file.\\n\\n`filename`\\nThis should be an image filename, including the extension.\\n\\n`optimize_bounds`\\nIf true, only the portion of the image that\\ninside the bounding box of non-transparent pixels is loaded into\\nGPU memory. (The only reason to set this to False is when using an\\nimage as input to a shader.)\\n\\n`oversample`\\nIf this is greater than 1, the image is considered to be oversampled,\\nwith more pixels than its logical size would imply. For example, if\\nan image file is 2048x2048 and oversample is 2, then the image will\\nbe treated as a 1024x1024 image for the purpose of layout.\\n\\n`dpi`\\nThe DPI of an SVG image. This defaults to 96, but that can be\\nincreased to render the SVG larger, and decreased to render\\nit smaller.\\n\\n"],"ImageDissolve":["renpy","function","(image, time, ramplen=8, *, reverse=False, time_warp=None, mipmap=None)","","function","Returns a transition that dissolves the old scene into the new scene, using\\nan image to control the dissolve process. This means that white pixels will\\ndissolve in first, and black pixels will dissolve in last.\\n\\n`image`\\nThe control image. This can be any displayable. It\\nshould be the size of the scenes being dissolved, and if `reverse=True`,\\nit should be fully opaque.\\n\\n`time`\\nThe time the dissolve will take.\\n\\n`ramplen`\\nThe length of the ramp to use. This must be an integer power\\nof 2. When this is the default value of 8, when a white pixel\\nis fully dissolved, a pixel 8 shades of gray darker will have\\ncompleted one step of dissolving in.\\n\\n`reverse`\\nIf True, black pixels will dissolve in before white pixels.\\n\\n`time_warp`\\nA function that adjusts the timeline. If not None, this\\nshould be a function that takes a fractional time between 0.0 and 1.0,\\nand returns a number in the same range.\\n\\n`mipmap`\\nWhen the dissolve will be scaled to less than half its natural size,\\nthis can be set to True. This will cause mipmaps to be generated,\\nwhich will make the dissolve consume more GPU resources, but will\\nreduce artifacts. See mipmap for more information.\\n\\n\\n\\n```\\ndefine circirisout = ImageDissolve(\\"circiris.png\\", 1.0, time_warp=_warper.easeout)\\ndefine circirisin = ImageDissolve(\\"circiris.png\\", 1.0, reverse=True, time_warp=_warper.easein)\\ndefine circiristbigramp = ImageDissolve(\\"circiris.png\\", 1.0, ramplen=256)\\n\\n```\\n\\n"],"IncrementDict":["renpy","function","(dict, key, amount=1)","","function","See data-actions.\\n\\n"],"IncrementField":["renpy","function","(object, field, amount=1)","","function","See data-actions.\\n\\n"],"IncrementLocalVariable":["renpy","function","(name, amount=1)","","function","See data-actions.\\n\\n"],"IncrementScreenVariable":["renpy","function","(name, amount=1)","","function","See data-actions.\\n\\n"],"IncrementVariable":["renpy","function","(name, amount=1)","","function","See data-actions.\\n\\n"],"InputValue":["renpy","class","","","class","To define a new InputValue, inherit from this class, override\\nsome or all of the methods, and set the value of the default\\nfield.\\n\\nattribute editable\\n\\nIf not true, disables the input field from being editable at all.\\n\\nattribute default\\n\\nIf true, the input is eligible to be editable by default. (That\\nis, it may be given the caret when the screen is shown.)\\n\\n.. method:: get_text(self)\\n\\nReturns the default text of the input. This must be implemented.\\n\\n.. method:: set_text(self, s)\\n\\nCalled when the text of the input is changed, with the new text.\\nThis must be implemented.\\n\\n.. method:: enter(self)\\n\\nCalled when the user presses enter. If this returns a non-None\\nvalue, that value is returned from the interacton. This may also\\nraise renpy.IgnoreEvent to ignore the press. Otherwise, the\\nenter-press is propagated to other displayables.\\n\\nThe following actions are available as methods on InputValue:\\n\\n.. method:: Enable()\\n\\nReturns an action that enables text editing on the input.\\n\\n.. method:: Disable()\\n\\nReturns an action that disables text editing on the input.\\n\\n.. method:: Toggle()\\n\\nReturns an action that toggles text editing on the input.\\n\\n\\n"],"InvertMatrix":["renpy","class","(value=1.0)","","class","A ColorMatrix that can be used with matrixcolor to invert\\neach of the color channels. The alpha channel is left alone.\\n\\n`value`\\nThe amount to inverty by. 0.0 is not inverted, 1.0 is fully\\ninverted. Used to animate inversion.\\n\\n"],"InvertSelected":["renpy","function","(action)","","function","This inverts the selection state of the provided action, while\\nproxying over all of the other methods.\\n\\n"],"JSONDB":["renpy","class","(filename, default=None)","","class","A JSONDB is a two-level database that uses JSON to store its data\\nIt\'s intended to be used by game developers to store data in a\\ndatabase that can be version-controlled as part of the game script.\\nFor example, this can store information associated with each\\nsay statement, that can change how a say statement is displayed.\\n\\nJSONDBs are not intended for data that is changed through or because\\nof the player\'s actions. persistent or normal save files are\\nbetter choices for that data.\\n\\nThe database should only contain data that Python can serialize to\\nJSON. This includes lists, dictionaries (with strings as keys),\\nstrings, numbers, True, False, and None. See\\n`the Python documentation <https://docs.python.org/3/library/json.html#encoders-and-decoders>`__\\nabout interoperability, how data converts between the two formats,\\nand the various associated pitfalls.\\n\\nThe two levels of the database are dictionaries both keyed by strings.\\nThe first level is read only - when a key on the first level dictionary\\nis accessed, a second level dictionary is created, optionally with\\ndefault contents. The second level dictionary is read-write, and\\nwhen one of the keys in a second level dictionary is changed,\\nthat change is saved to the database whe the game exits.\\n\\nLike other persistent data, JSONDBs do not participate in rollback.\\n\\nA JSONDB should be created during init (in an init python block or\\ndefine statement), and will automatically be saved to the disk provided\\nat least one key in the dictionary is set. For example\\n\\n```\\ndefine balloonData = JSONDB(\\"balloon.json\\", default={ \\"enabled\\" : False })\\n\\n```\\n\\nThis creates a JSONDB that is stored in the file balloon.json, and has a\\ndefault values. The second leval values can be used as normal dictionaries\\n\\n```\\nscreen say(who, what):\\n\\n    default bd = balloonData[renpy.get_translation_identifier()]\\n    \\n    if bd[\\"enabled\\"]:\\n        use balloon_say(who, what)\\n    else:\\n        use adv_say(who, what)\\n        \\n    if config.developer:\\n        textbutton \\"Dialogue Balloon Mode\\":\\n            action ToggleDict(bd, \\"enabled\\")\\n            \\n```\\n\\nThe JSONDB constructor takes the following arguments:\\n\\n`filename`\\nThe filename the database is stored in. This is relative to the\\ngame directory. It\'s recommended that the filename end in \\".json\\".\\n\\n`default`\\nIf this is not None, it should be a dictionary. When a new second\\nlevel dictionary is created, this object is shallow copied and\\nused to initialized the new dictionary. The new dictionary will\\nonly be saved as part of the database if at least one key in\\nit is saved.\\n\\n"],"Jump":["renpy","function","(label)","","function","Causes control to transfer to `label`, given as a string.\\n\\n"],"Language":["renpy","function","(language)","","function","Changes the language of the game to `language`.\\n\\n`language`\\nA string giving the language to translate to, or None to use\\nthe default language of the game script.\\n\\n"],"Layer":["renpy","class","(layer, *, clipping=True, **properties)","","class","This allows a layer to be shown as a displayable on another layer.\\nIntended for use with detached layers.\\n\\nTrying to display a layer on itself is not supported.\\n\\n`layer`\\nThe layer to display.\\n\\n`clipping`\\nIf False, the layer\'s contents may exceed its bounds, otherwise\\nanything exceeding the bounds will be trimmed.\\n\\nAn entry in config.layer_clipping will cause this option to be\\nignored, and clipping to occur as specified by that config.\\n\\n"],"LayeredImage":["renpy","class","(attributes, at=[], name=None, image_format=None, format_function=None, attribute_function=None, offer_screen=None, **kwargs)","","class","This is an image-like object that, when shown with the proper set of\\nattributes, shows a displayable created by compositing together the\\ndisplayables associated with those attribute.\\n\\n`attributes`\\nThis must be a list of Attribute, Condition, ConditionGroup or\\ndisplayable objects. Each one\\nreflects a displayable that may or may not be displayed as part\\nof the image. The items in this list are in back-to-front order,\\nwith the first item further from the viewer and the last\\nclosest.\\nPassing a displayable directly is the equivalent of the `always`\\nlayeredimage statement.\\n\\n`at`\\nA transform or list of transforms that are applied to the displayable\\nafter it is parameterized.\\n\\n`name`\\nThe name of the layeredimage. This is used as part of the names\\nof image components.\\n\\n`image_format`\\nWhen a given image is a string, and this is supplied, the image name\\nis interpolated into `image_format` to make an image file. For example,\\n\\"sprites/eileen/{image}.png\\" will look for the image in a subdirectory\\nof sprites. (This is not used by auto groups, which look for images and\\nnot image files.)\\n\\n`format_function`\\nA function that is used instead of `layeredimage.format_function` to format\\nthe image information into a displayable.\\n\\n`attribute_function`\\nIf not None, a function that\'s called with a set of attributes supplied to\\nthe image, and returns the set of attributes used to select layers. This is\\ncalled when determining the layers to display, after the attribute themselves\\nhave been chosen. It can be used to express complex dependencies between attributes\\nor select attributes at random.\\n\\n`offer_screen`\\nSets whether or not the available area is taken into account as for how children\\nare placed and how they are sized (when they have variable size). If False, the\\navailable area is considered, and if True it is not. If None, defaults to\\nconfig.layeredimage_offer_screen.\\n\\nAdditional keyword arguments may contain transform properties. If\\nany are present, a transform is created that wraps the result image.\\nRemaining keyword arguments are passed to a Fixed that is created to hold\\nthe layer. Unless explicitly overridden, xfit and yfit are set to true on\\nthe Fixed, which means it will shrink to the smallest size that fits all\\nof the layer images it is showing.\\n\\nA LayeredImage is not a displayable, and can\'t be used in all the\\nplaces a displayable can be used. This is because it requires an image\\nname (generally including image attributes) to be provided. As such,\\nit should either be displayed through a scene or show statement, or by\\nan image name string used as a displayable.\\n\\n.. method:: add(a)\\n\\n`a`\\nAn Attribute, Condition, ConditionGroup or displayable\\nobject.\\n\\nThis method adds the provided layer to the list of layers of the layeredimage,\\nas if it had been passed in the `attributes` argument to the constructor.\\n\\n"],"LayeredImageProxy":["renpy","class","(name, transform=None)","","class","This is an image-like object that proxies attributes passed to it to\\nanother layered image.\\n\\n`name`\\nA string giving the name of the layeredimage to proxy to.\\n\\n`transform`\\nIf given, a transform or list of transforms that are applied to the\\nimage after it has been proxied.\\n\\n\\n"],"Lexer":["renpy","class","","","class",".. method:: error(msg)\\n\\n:param str msg: Message to add to the list of detected parsing errors.\\n\\nAdd `msg` (with the current position) to the list of detected\\nparsing errors. This interrupts the parsing of the current statement,\\nbut does not prevent further parsing.\\n\\n.. method:: require(thing, name=None)\\n\\nTry to parse `thing` and report an error if it cannot be done.\\n\\nIf `thing` is a string, try to parse it using match.\\n\\nOtherwise, thing must be another method on this lexer object which is\\ncalled without arguments.\\n\\nIf `name` is not specified, the name of the method will be used in the\\nmessage (or `thing` if it\'s a string), otherwise `name` will be used.\\n\\n.. method:: eol()\\n\\n:return: True if the lexer is at the end of the line, else False.\\n:rtype: bool\\n\\n.. method:: expect_eol()\\n\\nIf not at the end of the line, raise an error.\\n\\n.. method:: expect_noblock(stmt)\\n\\nCalled to indicate this statement does not expect a block.\\nIf a block is found, raise an error. `stmt` should be a string,\\nit will be added to the message with an error.\\n\\n.. method:: expect_block(stmt)\\n\\nCalled to indicate that the statement requires that a non-empty\\nblock is present. `stmt` should be a string, it will be added\\nto the message with an error.\\n\\n.. method:: has_block()\\n\\n:return: True if the current line has a non-empty block, else False.\\n:rtype: bool\\n\\n.. method:: match(re)\\n\\nMatch an arbitrary regexp string.\\n\\nAll of the statements in the lexer that match things are implemented\\nin terms of this function. They first skip whitespace, then attempt\\nto match against the line. If the match succeeds, the matched text\\nis returned. Otherwise, None is returned, and the state of the lexer\\nis unchanged.\\n\\n.. method:: keyword(s)\\n\\nMatch `s` as a keyword.\\n\\n.. method:: name()\\n\\nMatch a name. This does not match built-in keywords.\\n\\n.. method:: word()\\n\\n:return: The text of the matched word.\\n:rtype: str\\n\\nMatch any word, including keywords.\\n\\n.. method:: image_name_component()\\n\\nMatch an image name component. Unlike a word, an image name\\ncomponent can begin with a number.\\n\\n.. method:: string()\\n\\nMatch a Ren\'Py string.\\n\\n.. method:: integer()\\n\\n:return: String containing the found integer.\\n:rtype: str\\n\\nMatch an integer.\\n\\n.. method:: float()\\n\\n:return: String containing the found floating point number.\\n:rtype: str\\n\\nMatch a floating point number.\\n\\n.. method:: label_name(declare=False)\\n\\nMatch a label name, either absolute or relative. If `declare`\\nis true, then the global label name is set. (Note that this does not\\nactually declare the label - the statement is required to do that\\nby returning it from the `label` function.)\\n\\n.. method:: simple_expression()\\n\\nMatch a simple Python expression, returns it as a string.\\nThis is often used when you expect a variable name.\\nIt is not recommended to change the result. The correct action is\\nto evaluate the result in the future.\\n\\n.. method:: delimited_python(delim)\\n\\nMatch a Python expression that ends in a `delim`, for example \':\'.\\nThis is often used when you expect a condition until the delimiter.\\nIt is not recommended to change the result. The correct action is\\nto evaluate the result in the future. This raises an error if\\nend of line is reached before the delimiter.\\n\\n.. method:: arguments()\\n\\nThis must be called before the parentheses with the arguments list,\\nif they are not specified returns None, otherwise\\nreturns an object representing the arguments to a function\\ncall. This object has an ``evaluate`` method on it that\\ntakes an optional `scope` dictionary, and returns a tuple\\nin which the first component is a tuple of positional arguments,\\nand the second component is a dictionary of keyword arguments.\\n\\n.. method:: rest()\\n\\nSkip whitespace, then return the rest of the line.\\n\\n.. method:: checkpoint()\\n\\nReturn an opaque object representing the current state of the lexer.\\n\\n.. method:: revert(o)\\n\\nWhen `o` is the object returned from checkpoint(), reverts the state\\nof the lexer to what it was when checkpoint() was called. (This is\\nused for backtracking.)\\n\\n.. method:: subblock_lexer()\\n\\n:return: A Lexer for the block associated with the current line.\\n\\n.. method:: advance()\\n\\nIn a subblock lexer, advance to the next line. This must be called\\nbefore the first line, so the first line can be parsed. Return True\\nif we\'ve successfully advanced to a line in the block, or False\\nif we have advanced beyond all lines in the block.\\n\\n.. method:: renpy_statement()\\n\\nWhen called, this parses the current line as a Ren\'Py script statement,\\ngenerating an error if this is not possible. This method returns\\nan opaque object that can be returned from the `next` function passed to\\nrenpy.register_statement, or passed\\nto renpy.jump or renpy.call. This object should\\nnot be stored except as part of the parse result of the statement.\\n\\nWhen the statement returned from this completes, control is\\ntransferred to the statement after the creator-defined statement.\\n(Which might be the statement created using post_execute).\\n\\n.. method:: renpy_block(empty=False)\\n\\nParse all of the remaining lines in the current block\\nas Ren\'Py script, and return a SubParse corresponding to the\\nfirst statement in the block. The block is chained together such\\nthat all statements in the block are run, and then control is\\ntransferred to the statement after this creator-defined statement.\\n\\nNote that this parses the current block. In the more likely\\ncase that you\'d like to parse the subblock of the current\\nstatement, the correct way to do that is\\n\\n```\\ndef mystatement_parse(l):\\n\\n    l.require(\':\')\\n    l.expect_eol()\\n    l.expect_block(\\"mystatement\\")\\n    \\n    child = l.subblock_lexer().renpy_block()\\n    \\n    return { \\"child\\" : child }\\n    \\n```\\n\\n`empty`\\nIf True, allows an empty block to be parsed. (An empty block\\nis equivalent to a block with a single ``pass`` statement.)\\n\\nIf False, an empty block triggers an error.\\n\\n.. method:: catch_error()\\n\\nThis is a context decorator, used in conjunction with the with\\nstatement, that catches and reports lexer errors inside its\\ncontext block, then continues after the block.\\n\\nHere\'s an example of how it can be used to report multiple errors\\nin a single subblock. \\n\\n```\\ndef mystatement_parse(l):\\n\\n    l.require(\':\')\\n    l.expect_eol()\\n    l.expect_block(\\"mystatement\\")\\n    \\n    strings = [ ]\\n    ll = l.subblock_lexer()\\n    \\n    while ll.advance():\\n        with ll.catch_error():\\n            strings.append(ll.require(ll.string))\\n            ll.expect_noblock(\\"string inside mystatement\\")\\n            ll.expect_eol()\\n            \\n    return { \\"strings\\" : strings }\\n    \\n    \\n```\\n\\n"],"Live2D":["renpy","function","(filename, zoom=None, top=0.0, base=1.0, height=1.0, alias={}, loop=False, fade=None, seamless=None, attribute_function=None, attribute_filter=None, update_function=None, **properties)","","function","This displayable displays a Live2D animation.\\n\\n`filename`\\nThis may either be a model3.json file defining a Live2D animation, or a\\ndirectory containing that animation. In the latter case, the last\\ncomponent of the directory is taken, and has .model3.json appended\\nto find the file.\\n\\nFor example, \\"Resources/Hiyori\\" and \\"Resources/Hiyori/Hiyori.model3.json\\"\\nare equivalent.\\n\\n`zoom`\\nIf not None, a zoom factor that is applied. This takes precedence\\nover `top` and `base`.\\n\\n`top`\\nThe top of the image, for sizing purposes. This is a fraction of the\\nimage, with 0.0 being the top and 1.0 the bottom.\\n\\n`base`\\nThe bottom of the image, for sizing purposes. This is a fraction of\\nthe image, with 0.0 being the top and 1.0 being the bottom. This\\nalso becomes the default value of yanchor.\\n\\n`height`\\nThe height that the image is scaled to. This is a fraction of the\\nvirtual height of the screen.\\n\\n`loop`\\nTrue if the final motion should be looped, False otherwise.\\n\\n`alias`\\nA dictionary mapping aliases to the motions or expressions they\\nalias.\\n\\n`fade`\\nTrue if motion fading should be enabled, False if motion fading\\nshould not be enabled, and None to use the value of _live2d_fade.\\n\\n`nonexclusive`\\nIf not None, this should be a list of names of nonexclusive expressions.\\nExpressions default to being exlcusive, with only one beign shown at\\na time. If listed here, any number of nonexclusive expressions can be\\nshown, in addition to one exclusive expression.\\n\\n`seamless`\\nThis determines if seamless looping should be used. Seamless looping\\navoids fading between loops of a single motion. This may be True to\\nenable seamless looping all the time, False to dispable it all the\\ntime, or a set of motions to be looped.\\n\\n`default_fade`\\nThe default amount of time that is spending fading into our out of\\na motion or expression. This defaults to 1.0, per Live2D, which\\nmight mean that fades happen unexpectedly. Set this to 0.0 to ensure\\nthat fading is only done when it is explicitly requested.\\n\\n`attribute_function`\\nIf not None, this is a function that takes a tuple of attributes,\\nand returns a second tuple of attributes. This can be used to replace\\nattributes for the purpose of display only - the attributes it returns\\nare not used when showing an image.  It should ensure\\nthat at most one attribute corresponding to an expression is given.\\n\\n`attribute_filter`\\nIf not None, this is a function that takes a tuple of attributes,\\nand returns a second tuple of attributes. This is usually used to\\nfilter out nonexclusice attributes that conflict with each other. The attributes\\nare ordered such that more recently requested attributes come first,\\nmeaning that in the case of a conflict, the first attribute should\\nwin.\\n\\n`update_function`\\nIf not None, this is a function that is called when the animation\\nis rendered after updating parameters by the current motion and expressions.\\nThe function is called with two arguments:\\n\\n* The Live2D object.\\n* The shown timebase, in seconds.\\n\\nThis function is used to dynamically change parameters using the `blend_parameter`\\nmethod of the passed Live2D object.\\nThe function should return a delay, in seconds, after which it will\\nbe called again, or None to be called again at the start of the next\\ninteraction. The function is also called whenever the displayable is\\nre-rendered.\\n\\nThe difference between `attribute_function` and `attribute_filter` is\\nthat the former is generally used to compute replacement - the presence\\nof two attributes means one should be replaced by a third. The latter\\nis used to resolve conflicts between attributes, like having a group of\\nattributes where only one is valid.\\n\\nOnly `filename` should be given positionally, and all other arguments should\\nbe given as keyword arguments.\\n\\nThe values of `alias`, `fade`, `nonexclusive`, `seamless`, `default_fade`, `attribute_function`,\\n`attribute_filter` and `update_function` are shared between all Live2D objects that share `filename`,\\nsuch that these only need to be supplied once as part of the first Live2D object to\\nuse `filename`.\\n\\n.. method:: blend_parameter(name, blend, value, weight=1.0)\\n\\nThis method blends the current value of the parameter with `value`\\nThis has no effect outside of `update_function`.\\n\\n`name`\\nA string giving the name of the parameter to change.\\n\\n`blend`\\nOne of \\"Add\\", \\"Multiply\\" or \\"Overwrite\\". The blend kind that will be used.\\n\\n`value`\\nA float giving the value that will be blended in.\\n\\n`weight`\\nA float between 0.0 and 1.0, the weight by which the new value will change the current value.\\n\\n.. method:: blend_opacity(name, blend, value, weight=1.0)\\n\\nThis method blends the current value of the part opacity with `value`\\nThis has no effect outside of `update_function`.\\n\\n`name`\\nName of parameter to change defined for this model.\\n\\n`blend`\\nOne of \\"Add\\", \\"Multiply\\" or \\"Overwrite\\". The blend kind that will be used.\\n\\n`value`\\nA float giving the opacity value that will be blended in.\\n\\n`weight`\\nA float between 0.0 and 1.0, the weight by which the new value will change the current value.\\n\\n\\n"],"LocalVariableInputValue":["renpy","function","(variable, default=True, returnable=False)","","function","An input value that updates a local variable in a ``use``\\\\ d screen.\\n\\nTo target a variable in a top-level screen, prefer using\\nScreenVariableInputValue.\\n\\nFor more information, see sl-use.\\n\\nThis must be created in the context that the variable is set in - it\\ncan\'t be passed in from somewhere else.\\n\\n`variable`\\nA string giving the name of the variable to update.\\n`default`\\nIf true, this input can be editable by default.\\n`returnable`\\nIf true, the value of this input will be returned when the\\nuser presses enter.\\n\\n"],"LocalVariableValue":["renpy","function","(variable, range=None, max_is_zero=False, style=\'bar\', offset=0, step=None, action=None, force_step=False, min=None, max=None)","","function","A bar value that adjusts the value of a variable in a ``use``\\\\ d\\nscreen.\\n\\nTo target a variable in a top-level screen, prefer using\\nScreenVariableValue.\\n\\nFor more information, see sl-use.\\n\\nThis must be created in the context that the variable is set in\\n- it can\'t be passed in from somewhere else.\\n\\n`variable`\\nA string giving the name of the variable to adjust.\\n`range`\\nThe range to adjust over. This must be specified if `max` and `min`\\nare not given.\\n`max_is_zero`\\nIf True, then when the local variable\'s value is zero, the value of the\\nbar will be `range`, and all other values will be shifted down\\nby 1. This works both ways - when the bar is set to the maximum,\\nthe value of the local variable is set to 0.\\n\\nThis is used internally, for some preferences.\\n`style`\\nThe styles of the created bar.\\n`offset`\\nAn offset to add to the value.\\n`step`\\nThe amount to change the bar by. If None, defaults to 1/10th of\\nthe bar.\\n`action`\\nIf not None, an action to call when the local variable\'s value is changed.\\n`min`\\nThe minimum value of the bar. If both `min` and `max` are given,\\n`range` and `offset` are calculated from them.\\n`max`\\nThe maximum value of the bar. If both `min` and `max` are given,\\n`range` and `offset` are calculated from them.\\n\\n"],"MainMenu":["renpy","function","(confirm=True, save=True)","","function","Causes Ren\'Py to return to the main menu.\\n\\n`confirm`\\nIf true, causes Ren\'Py to ask the user if he wishes to\\nreturn to the main menu, rather than returning\\ndirectly.\\n\\n`save`\\nIf true, the game is saved in _quit_slot before Ren\'Py\\nrestarts and returns the user to the main menu. The game is not\\nsaved if _quit_slot is None.\\n\\n"],"Matrix":["renpy","class","(l)","","class","This represents a 4x4 matrix, that is used in various places in Ren\'Py.\\n\\nWhen used to transform coordinates, the 16 elements of this matrix are\\n\\n```\\nxdx, xdy, xdz, xdw,\\nydx, ydy, ydz, ydw,\\nzdx, zdy, zdz, zdw,\\nwdx, wdy, wdz, wdw\\n\\n```\\n\\nwhere x\' = xdx * x + xdy * y + xdz * z + xdw * w, where x is the original\\nvalue of x and x\' is the transformed value, and similarly for x, y, z, and\\nw.  This is usually applied to a position where w is 1, allowing any combination\\nof translation, rotation, and scaling to be expressed in a single matrix.\\n\\nWhen used to transform colors, the 16 elements of this matrix are\\n\\n```\\nrdr, rdg, rdb, rda,\\ngdr, gdg, gdg, gda,\\nbdr, bdg, bdb, bda,\\nadr, adg, adb, ada,\\n\\n```\\n\\nFor the red, green, blue, and alpha channels.\\n\\nMatrix objects can be multiplied using the Python multiplication operator,\\nto generate a matrix that performs both operations. The order in which\\nthe matrixes appear can matter. Assuming `v` is a position or color being\\ntransformed\\n\\n```\\n(step2 * step1) * v\\n\\n```\\n\\nis equivalent to\\n\\n```\\nstep2 * (step1 * v)\\n\\n```\\n\\n`l`\\nThis can be a list of 4, 9, or 16 numbers that is used to introduce\\nthis matrix. If not the full 16, the top-left corner of the matrix\\nis initialized, with zdz and wdw set to 1.0 if not given. For example\\n\\n```\\nMatrix([ 1, 2, 3, 4 ])\\n\\n```\\n\\nwould result in the Matrix\\n\\n```\\n1.0, 2.0, 0.0, 0.0,\\n3.0, 4.0, 0.0, 0.0,\\n0.0, 0.0, 1.0, 0.0,\\n0.0, 0.0, 0.0, 1.0,\\n\\n```\\n\\n"],"Matrix.identity":["renpy","function","()","","function","Returns an identity matrix.\\n\\n"],"Matrix.offset":["renpy","function","(x, y, z)","","function","Returns a matrix that offsets the vertex by a fixed amount.\\n\\n"],"Matrix.perspective":["renpy","function","(w, h, n, p, f)","","function","Returns a matrix suitable for the perspective projection of an image\\nin the Ren\'Py coordinate system. This is a view into the a coordinate\\nsystem where, where when z=0, (0, 0) corresponds to the top-left corner\\nof the screen, and (w, h) corresponds to the bottom-right corner of\\nthe screen.\\n\\n`w`, `h`\\nThe width and height of the input plane, in pixels.\\n\\n`n`\\nThe distance of the near plane from the camera.\\n\\n`p`\\nHow far the z=0 plane is from the camera. This is also where one\\nvirtual pixel is one coordinate unit in x and y.\\n\\n`f`\\nThe distance of the far plane from the camera.\\n\\n"],"Matrix.rotate":["renpy","function","(x, y, z)","","function","Returns a matrix that rotates the displayable around the\\norigin.\\n\\n`x`, `y`, `z`\\nThe amount to rotate around the origin, in degrees.\\n\\n\\nThe rotations are applied in order:\\n\\n* A clockwise rotation by `x` degrees in the Y/Z plane.\\n* A clockwise rotation by `y` degrees in the Z/X plane.\\n* A clockwise rotation by `z` degrees in the X/Y plane.\\n\\n"],"Matrix.scale":["renpy","function","(x, y, z)","","function","Returns a matrix that scales the displayable.\\n\\n`x`, `y`, `z`\\nThe factor to scale each axis by.\\n\\n"],"MixerValue":["renpy","function","(mixer)","","function","The value of an audio mixer.\\n\\n`mixer`\\nThe name of the mixer to adjust. This is usually one of\\n\\"main\\", \\"music\\", \\"sfx\\", or \\"voice\\". See volume\\nfor more information.\\n\\n"],"Model":["renpy","class","(size=None, **properties)","","class","This is a displayable that causes Ren\'Py to create a 2D or 3D model\\nfor use with the model-based renderer, that will be drawn in a single\\noperation with the shaders given here, or selected by an enclosing\\nTransform or Displayable.\\n\\n`size`\\nIf not None, this should be a width, height tuple, that\'s used to\\ngive the size of the Model. If not given, the model is the size\\nof the area provided to it. The fit parameter to a texture takes\\nprecedence.\\n\\nIf no mesh method is called, a mesh that sets a_position and a_tex_coord\\nto match the way Ren\'Py loads textures is created if at least one texture\\nis supplied. Otherwise, a mesh that only sets a_position is used.\\n\\nAll methods on this calls return the displayable the method is called\\non, making it possible to chain calls.\\n\\n.. method:: child(displayable, fit=False)\\n\\nThis is the same as the texture method, except that the `focus`\\nand `main` parameters are set to true.\\n\\n.. method:: grid_mesh(width, height)\\n\\nCreates a mesh that consists of a width x height grid of evenly\\nspaced points, connecting each point to the closest points\\nvertically and horizontally, and dividing each rectangle in\\nthe grid so created into triangles.\\n\\n`width`, `height`\\nThe number of points in the horizontal vertical directions,\\na integer that is at least 2.\\n\\n.. method:: property(name, value)\\n\\nSets the value of a gl property.\\n\\n`name`\\nA string giving the name of the GL property, including the \\"gl\\\\_\\"\\nprefix.\\n\\n`value`\\nThe value of the gl property.\\n\\n.. method:: shader(shader)\\n\\nAdds a shader to this model.\\n\\n`shader`\\nA string given the name of a shader to use with this model.\\n\\n.. method:: texture(displayable, focus=False, main=False, fit=False, texure_wrap=None)\\n\\nAdd a texture to this model, by rendering the given displayable.\\nThe first texture added will be ``tex0``, the second ``tex1``, a\\nand so on.\\n\\n`focus`\\nIf true, focus events are passed to the displayable. It\'s\\nassumed that coordinate relative to the model map 1:1 with\\ncoordinates relative to the displayable.\\n\\n`main`\\nIf true, this is marked as a main child of this displayable,\\nwhich allows it to be inspected using the displayable\\ninspector.\\n\\n`fit`\\nIf true, the Model is given the size of the displayable.\\nThis may only be true for one texture.\\n\\n`texture_wrap`\\nIf not None, this is the gl_texture wrap GL property that will be applied\\nto this texture.\\n\\n.. method:: uniform(name, value)\\n\\nSets the value of a uniform that is passed to the shaders.\\n\\n`name`\\nA string giving the name of the uniform to set, including the\\n\\"u\\\\_\\" prefix.\\n\\n`value`\\nThe value of the uniform. Either a float, a 2, 3, or 4 element\\ntuple of floats, or a Matrix.\\n\\n"],"MouseDisplayable":["renpy","class","(cursor, x, y)","","class","A displayable that wraps a mouse cursor displayable, and causes\\nit to move across the screen when the player moves their mouse.\\n\\n`cursor`\\nA displayable that is used to draw the mouse.\\n\\n`x`, `y`\\nThe coordinates of the hotspot, relative to the upper left\\ncorner of the mouse, in virtual pixels.\\n\\n.. method:: add(name, cursor, x, y)\\n\\nThis adds a second cursor, that is used when the `name`\\nmouse is displayed. This returns the MouseDisplayable,\\nso that calls to this method can be chained.\\n\\n\\n\\n"],"MouseMove":["renpy","function","(x, y, duration=0)","","function","Move the mouse pointer to `x`, `y`. If the device does not have a mouse\\npointer, if it is not possible for Ren\'Py to move that pointer,\\nor if the \\"automatic move\\" preference\\nis False, this does nothing.\\n\\n`duration`\\nThe time it will take to perform the move, in seconds. During\\nthis time, the mouse may be unresponsive.\\n\\n"],"MoveTransition":["renpy","function","(delay, *, enter=None, leave=None, old=False, layers=[\'master\'], time_warp=_warper.linear, enter_time_warp=_warper.linear, leave_time_warp=_warper.linear)","","function","With these transitions, images changing position between the old and new\\nscenes will be interpolated, which means their movement will be smooth\\ninstead of instantaneous.\\n\\nAs only layers have tags, MoveTransitions can only be applied to a single\\nlayer or all layers at once, using the with statement.\\nIt will not work in other contexts such as ATL,\\nComposeTransition, or other ways of applying transitions.\\n\\n`delay`\\nThe time it takes for the interpolation to finish.\\n\\n`old`\\nIf true, when a tag gets its image changed during the transition,\\nthe old image will be used in preference to the new one. Otherwise,\\nthe new images will be used.\\n\\n`layers`\\nA list of layers that moves are applied to.\\n\\nThe two following parameters take transforms, which should not be animated\\nover time.\\n\\n`enter`\\nIf not None, images entering the scene will also be moved. The transform\\nwill be applied to the image to get it in its starting position.\\n\\n`leave`\\nIf not None, images leaving the scene will also be moved. The transform\\nwill be applied to the image to get it in its ending position.\\n\\nThe three following parameters take time warp functions,\\nwhich take a number between 0.0 and 1.0, and should return a number in the\\nsame range.\\n\\n`time_warp`\\nA time warp function that\'s applied to the images changing position\\nbetween the old and new scenes.\\n\\n`enter_time_warp`\\nA time warp function that\'s applied to images entering the scene.\\n\\n`leave_time_warp`\\nA time warp function that\'s applied to images leaving the scene.\\n\\n\\n\\n```\\ndefine longer_easein = MoveTransition(3.0, enter=offscreenright, enter_time_warp=_warper.easein)\\n\\n```\\n\\nIn the following code, \\"a\\" will be leaving the scene (using `leave` and\\n`leave_time_warp`), \\"b\\" will be changing position (using `time_warp`), and\\n\\"c\\" will be entering (using `enter` and `enter_time_warp`). Because the same\\ntag is applied before and after, \\"d\\" will not be counted as entering or\\nleaving, but as changing position.\\n\\n\\n\\n```\\ndefine some_move_trans = MoveTransition(...)\\n\\nlabel start:\\n    show a\\n    show b at left\\n    show ugly_eileen as d at right\\n    e \\"This is a dialogue !\\"\\n    \\n    hide a\\n    show b at right\\n    show c\\n    show pretty_eileen as d at left\\n    with some_move_trans\\n    \\n```\\n\\nDuring the time when \\"d\\" is changing position, whether ugly or pretty eileen\\nwill be shown depends on the value of `old` : if `old` is False, the\\ndefault, ugly_eileen will instantly turn into pretty_eileen and then move,\\nand if `old` is True, ugly_eileen will move and then instantly turn into\\npretty_eileen.\\n\\n"],"Movie":["renpy","class","(*, size=None, channel=\\"movie\\", play=None, side_mask=False, mask=None, mask_channel=None, start_image=None, image=None, play_callback=None, loop=True, group=None, **properties)","","class","This is a displayable that shows the current movie.\\n\\n`size`\\nThis should be specified as either a tuple giving the width and\\nheight of the movie, or None to automatically adjust to the size\\nof the playing movie. (If None, the displayable will be (0, 0)\\nwhen the movie is not playing.)\\n\\n`channel`\\nThe audio channel associated with this movie. When a movie file\\nis played on that channel, it will be displayed in this Movie\\ndisplayable. If this is left at the default of \\"movie\\", and `play`\\nis provided, a channel name is automatically selected, using\\nconfig.single_movie_channel and config.auto_movie_channel.\\n\\n`play`\\nIf given, this should be the path to a movie file, or a list\\nof paths to movie files. These movie\\nfiles will be automatically played on `channel` when the Movie is\\nshown, and automatically stopped when the movie is hidden.\\n\\n`side_mask`\\nIf true, this tells Ren\'Py to use the side-by-side mask mode for\\nthe Movie. In this case, the movie is divided in half. The left\\nhalf is used for color information, while the right half is used\\nfor alpha information. The width of the displayable is half the\\nwidth of the movie file.\\n\\nWhere possible, `side_mask` should be used over `mask` as it has\\nno chance of frames going out of sync.\\n\\n`mask`\\nIf given, this should be the path to a movie file, or a list of paths\\nto movie files, that are used as\\nthe alpha channel of this displayable. The movie file will be\\nautomatically played on `movie_channel` when the Movie is shown,\\nand automatically stopped when the movie is hidden.\\n\\n`mask_channel`\\nThe channel the alpha mask video is played on. If not given,\\ndefaults to `channel`\\\\_mask. (For example, if `channel` is \\"sprite\\",\\n`mask_channel` defaults to \\"sprite_mask\\".)\\n\\n`start_image`\\nAn image that is displayed when playback has started, but the\\nfirst frame has not yet been decoded.\\n\\n`image`\\nAn image that is displayed when `play` has been given, but the\\nfile it refers to does not exist. (For example, this can be used\\nto create a slimmed-down mobile version that does not use movie\\nsprites.) Users can also choose to fall back to this image as a\\npreference if video is too taxing for their system. The image will\\nalso be used if the video plays, and then the movie ends, unless\\n`group` is given.\\n\\n`play_callback`\\nIf not None, a function that\'s used to start the movies playing.\\n(This may do things like queue a transition between sprites, if\\ndesired.) It\'s called with the following arguments:\\n\\n`old`\\nThe old Movie object, or None if the movie is not playing.\\n`new`\\nThe new Movie object.\\n\\nA movie object has the `play` parameter available as ``_play``,\\nwhile the ``channel``, ``loop``, ``mask``, and ``mask_channel`` fields\\ncorrespond to the given parameters.\\n\\nGenerally, this will want to use renpy.music.play to start\\nthe movie playing on the given channel, with synchro_start=True.\\nA minimal implementation is\\n\\n```\\ndef play_callback(old, new):\\n\\n    renpy.music.play(new._play, channel=new.channel, loop=new.loop, synchro_start=True)\\n    \\n    if new.mask:\\n        renpy.music.play(new.mask, channel=new.mask_channel, loop=new.loop, synchro_start=True)\\n        \\n```\\n\\n`loop`\\nIf False, the movie will not loop. If `image` is defined, the image\\nwill be displayed when the movie ends. Otherwise, the displayable will\\nbecome transparent.\\n\\n`group`\\nIf not None, this should be a string. If given, and if the movie has not\\nyet started playing, and another movie in the same group has played in\\nthe previous frame, the last frame from that movie will be used for\\nthis movie. This can prevent flashes of transparency when switching\\nbetween two movies.\\n\\n`keep_last_frame`\\nIf true, and the movie has ended, the last frame will be displayed,\\nrather than the movie being hidden. This only works if `loop` is\\nfalse. (This behavior will also occur if `group` is set.)\\n\\n"],"MultiPersistent":["renpy","class","(key, save_on_quit=False)","","class","Creates a new ``MultiPersistent`` object. This should only be called at init time,\\nand it returns a new ``MultiPersistent`` with the given key.\\n\\n`key`\\nThe key used to to access the multipersistent data. Games using the\\nsame key will access the same multipersistent data.\\n\\n`save_on_quit`\\nIf it is True, this object will be automatically saved when Ren\'Py terminates.\\n\\n.. method:: save()\\n\\nSaves the multipersistent data to disk. This must be called after\\nthe data is modified.\\n\\n\\n"],"MultiRevertable":["renpy","class","()","","class","MultiRevertable is a mixin class that allows an object to inherit\\nfrom more than one kind of revertable object. To use it, from MultiRevertable,\\nthen from the revertable classes you want to inherit from.\\n\\nFor example\\n\\n```\\nclass MyDict(MultiRevertable, dict, object):\\n    pass\\n    \\n```\\n\\nwill create an class that will rollback both its dict contents and\\nobject fields.\\n\\n"],"MultipleTransition":["renpy","function","(args)","","function","Returns a transition that allows multiple transitions to be displayed, one\\nafter the other.\\n\\n`args`\\nA **list** containing an odd number of items. The first, third, and\\nother odd-numbered items must be scenes, and the even items\\nmust be transitions. A scene can be one of:\\n\\n* A displayable.\\n* False, to use the old scene.\\n* True, to use the new scene.\\n\\nAlmost always, the first argument will be False and the last True.\\n\\nNote that this is a single parameter taking a list, this is not ``*args``.\\n\\nThe transitions in `args` are applied in order. For each transition,\\nthe old scene is the screen preceding it, and the new scene is the\\nscene following it. For example\\n\\n```\\ndefine logodissolve = MultipleTransition([\\n    False, Dissolve(0.5),\\n    \\"logo.jpg\\", Pause(1.0),\\n    \\"logo.jpg\\", dissolve,\\n    True])\\n    \\n```\\n\\nThis example will dissolve to logo.jpg, wait 1 second, and then\\ndissolve to the new scene.\\n\\n"],"MusicRoom":["renpy","class","(channel=\'music\', fadeout=0.0, fadein=0.0, loop=True, single_track=False, shuffle=False, stop_action=None)","","class","A music room that contains a series of songs that can be unlocked\\nby the user, and actions that can play entries from the list in\\norder.\\n\\n`channel`\\nThe channel that this music room will operate on.\\n\\n`fadeout`\\nThe number of seconds it takes to fade out the old\\nmusic when changing tracks.\\n\\n`fadein`\\nThe number of seconds it takes to fade in the new\\nmusic when changing tracks.\\n\\n`loop`\\nDetermines if playback will loop or stop when it reaches\\nthe end of the playlist.\\n\\n`single_track`\\nIf true, only a single track will play. If loop is true,\\nthat track will loop. Otherwise, playback will stop when the\\ntrack finishes.\\n\\n`shuffle`\\nIf true, the tracks are shuffled, and played in the shuffled\\norder. If false, the tracks are played in the order they\'re\\nadded to the MusicRoom.\\n\\n`stop_action`\\nAn action to run when the music has stopped.\\n\\nSingle_track and shuffle conflict with each other. Only one should\\nbe true at a time. (Actions that set single_track and shuffle\\nenforce this.)\\n\\n.. method:: Next()\\n\\nAn action that causes the music room to play the next unlocked file\\nin the playlist.\\n\\n.. method:: Play(filename=None)\\n\\nThis action causes the music room to start playing. If `filename` is given, that\\nfile begins playing. Otherwise, the currently playing file starts\\nover (if it\'s unlocked), or the first file starts playing.\\n\\nIf `filename` is given, buttons with this action will be insensitive\\nwhile `filename` is locked, and will be selected when `filename`\\nis playing.\\n\\n.. method:: Previous()\\n\\nAn action that causes the music room to play the previous unlocked\\nfile in the playlist.\\n\\n.. method:: RandomPlay()\\n\\nThis action causes the music room to start playing a randomly selected unlocked\\nmusic track.\\n\\n.. method:: SetLoop(value)\\n\\nThis action sets the value of the loop property.\\n\\n.. method:: SetShuffle(value)\\n\\nThis action sets the value of the shuffle property.\\n\\n.. method:: SetSingleTrack(value)\\n\\nThis action sets the value of the single_track property.\\n\\n.. method:: Stop()\\n\\nThis action stops the music.\\n\\n.. method:: ToggleLoop()\\n\\nThis action toggles the value of the loop property.\\n\\n.. method:: TogglePause()\\n\\nIf music is playing, pauses or unpauses the music as appropriate.\\n\\nThis button is selected when the music is paused.\\n\\n.. method:: TogglePlay()\\n\\nIf no music is currently playing, this action starts playing the first\\nunlocked track. Otherwise, stops the currently playing music.\\n\\nThis button is selected when any music is playing.\\n\\n.. method:: ToggleShuffle()\\n\\nThis action toggles the value of the shuffle property.\\n\\n.. method:: ToggleSingleTrack()\\n\\nThis action toggles the value of the single_track property.\\n\\n.. method:: add(filename, always_unlocked=False, action=None)\\n\\nAdds the music file `filename` to this music room. The music room\\nwill play unlocked files in the order that they are added to the\\nroom.\\n\\n`always_unlocked`\\nIf true, the music file will be always unlocked. This allows\\nthe file to show up in the music room before it has been\\nplayed in the game.\\n\\n`action`\\nThis is a action or the list of actions. these are called when this\\nfile is played.\\n\\nFor example, These actions is used to change a screen or background, description\\nby the playing file.\\n\\n.. method:: is_unlocked(filename)\\n\\nReturns true if the filename has been unlocked (or is always\\nunlocked), and false if it is still locked.\\n\\n"],"NoRollback":["renpy","class","()","","class","Instances of this class, and classes inheriting from this class,\\ndo not participate in rollback. Objects reachable through an instance\\nof a NoRollback class only participate in rollback if they are\\nreachable through other paths.\\n\\n"],"Notify":["renpy","function","(message)","","function","Displays `message` using renpy.notify.\\n\\n"],"Null":["renpy","class","(width=0, height=0, **properties)","","class","A displayable that creates an empty box on the screen. The size\\nof the box is controlled by `width` and `height`. This can be used\\nwhen a displayable requires a child, but no child is suitable, or\\nas a spacer inside a box.\\n\\n\\n\\n```\\nimage logo spaced = HBox(\\"logo.png\\", Null(width=100), \\"logo.png\\")\\n\\n```\\n\\n"],"NullAction":["renpy","function","()","","function","Does nothing.\\n\\nThis can be used to make a button responsive to hover/unhover events,\\nwithout actually doing anything.\\n\\n"],"OffsetMatrix":["renpy","class","(x, y, z)","","class","A TransformMatrix that returns a matrix that offsets the vertex by a fixed amount.\\n\\n"],"OpacityMatrix":["renpy","class","(value=1.0)","","class","A ColorMatrix that can be used with matrixcolor to change\\nthe opacity of an image, while leaving color channels alone.\\n\\n`value`\\nThe amount the alpha channel should be multiplied by,\\na number between 0.0 and 1.0.\\n\\n"],"OpenDirectory":["renpy","function","(directory)","","function","Opens `directory` in a file browser. `directory` is relative to\\nconfig.basedir.\\n\\n"],"OpenURL":["renpy","function","(url)","","function","Causes `url` to be opened in a web browser.\\n\\n"],"ParameterizedText":["renpy","class","(style=\'default\', **properties)","","class","This is a displayable that can be shown with an additional string\\nparameter, which then shows that string as if it was an image.\\nThis is usually used as part of the pre-defined ``text`` image.\\n\\nFor example, one can do\\n\\n```\\nshow text \\"Hello, World\\" at truecenter\\nwith dissolve\\npause 1\\nhide text\\nwith dissolve\\n\\n```\\n\\nYou can use ParameterizedText directly to define similar images with\\ndifferent style properties. For example, one can write\\n\\n```\\nimage top_text = ParameterizedText(xalign=0.5, yalign=0.0)\\n\\nlabel start:\\n    show top_text \\"This text is shown at the center-top of the screen\\"\\n    \\n```\\n\\n"],"Pause":["renpy","function","(delay)","","function","Returns a transition that only displays the new screen for `delay` seconds.\\nIt can be useful as part of a MultipleTransition.\\n\\n"],"PauseAudio":["renpy","function","(channel, value=True)","","function","Sets the pause flag for `channel`.\\n\\nIf `value` is True, the channel is paused. If False, the channel is\\nunpaused. If \\"toggle\\", the pause flag will be toggled.\\n\\n"],"Pixellate":["renpy","function","(time, steps)","","function","Returns a transition that pixellates out the old screen, and then\\npixellates in the new screen.\\n\\n`time`\\nThe total time the transition will take, in seconds.\\n\\n`steps`\\nThe number of steps that will occur, in each direction. Each step\\ncreates pixels about twice the size of those in the previous step,\\nso a 5-step pixellation will create 32x32 pixels.\\n\\n"],"Placeholder":["renpy","class","(base=None, full=False, flip=None, text=None, **properties)","","class","This displayable can be used to display a placeholder character or\\nbackground.\\n\\n`base`\\nThe type of image to display. This should be one of:\\n\\n\'bg\'\\nTo display a background placeholder. This currently\\nfills the screen with a light-gray, and displays\\nthe image name at the top of the screen.\\n\\n\'boy\'\\nDisplays a male-identified placeholder with the image\\nname on his chest.\\n\\n\'girl\'\\nDisplays a female-identified placeholder with the image\\nname on her chest.\\n\\nNone\\nAttempts to automatically determine the type of image\\nto use. If the image name begins with \\"bg\\", \\"cg\\", or\\n\\"event\\", uses \'bg\'.\\n\\nOtherwise, the \'girl\' placeholder is used.\\n\\n`full`\\nIf true, a full-body sprite is used. Otherwise, a 3/4 sprite\\nis used.\\n\\n`flip`\\nIf true, the sprite is flipped horizontally.\\n\\n`text`\\nIf provided, no other text than this will be displayed on the\\nplaceholder. If not, the text will reflect the show\\ninstruction that was used to display it.\\n\\n\\n"],"Play":["renpy","function","(channel, file, selected=None, **kwargs)","","function","Causes an audio file to be played on a given channel.\\n\\n`channel`\\nThe channel to play the sound on.\\n`file`\\nThe file to play.\\n`selected`\\nIf True, buttons using this action will be marked as selected\\nif the file is playing on the channel. If False, this action\\nwill not cause the button to start playing. If None, the button\\nis marked selected if the channel is a music channel, and not\\notherwise.\\n\\nAny other keyword arguments are passed to renpy.music.play.\\n\\n"],"PlayCharacterVoice":["renpy","function","(voice_tag, sample, selected=False)","","function","This plays `sample` on the voice channel, as if said by a\\ncharacter with `voice_tag`.\\n\\n`sample`\\nThe full path to a sound file. No voice-related handling\\nof this file is done.\\n\\n`selected`\\nIf True, buttons using this action will be marked as selected\\nwhile the sample is playing.\\n\\n"],"Preference":["renpy","function","(name, value=None, range=None)","","function","This constructs the appropriate action or value from a preference.\\nThe preference name should be the name given in the standard\\nmenus, while the value should be either the name of a choice,\\n\\"toggle\\" to cycle through choices, a specific value, or left off\\nin the case of buttons.\\n\\nActions that can be used with buttons and hotspots are:\\n\\n* Preference(\\"display\\", \\"fullscreen\\") - displays in fullscreen mode.\\n* Preference(\\"display\\", \\"window\\") - displays in windowed mode at 1x normal size.\\n* Preference(\\"display\\", 2.0) - displays in windowed mode at 2.0x normal size.\\n* Preference(\\"display\\", \\"any window\\") - displays in windowed mode at the previous size.\\n* Preference(\\"display\\", \\"toggle\\") - toggle display mode.\\n\\n* Preference(\\"transitions\\", \\"all\\") - show all transitions.\\n* Preference(\\"transitions\\", \\"none\\") - do not show transitions.\\n* Preference(\\"transitions\\", \\"toggle\\") - toggle transitions.\\n\\n* Preference(\\"video sprites\\", \\"show\\") - show all video sprites.\\n* Preference(\\"video sprites\\", \\"hide\\") - fall back to images where possible.\\n* Preference(\\"video sprites\\", \\"toggle\\") - toggle image fallback behavior.\\n\\n* Preference(\\"show empty window\\", \\"show\\") - Allow the \\"window show\\" and \\"window auto\\" statement to show an empty window outside of the say statement.\\n* Preference(\\"show empty window\\", \\"hide\\") - Prevent the above.\\n* Preference(\\"show empty window\\", \\"toggle\\") - Toggle the above.\\n\\n* Preference(\\"text speed\\", 0) - make text appear instantaneously.\\n* Preference(\\"text speed\\", 142) - set text speed to 142 characters per second.\\n\\n* Preference(\\"joystick\\") - Show the joystick preferences.\\n\\n* Preference(\\"skip\\", \\"seen\\") - Only skip seen messages.\\n* Preference(\\"skip\\", \\"all\\") - Skip unseen messages.\\n* Preference(\\"skip\\", \\"toggle\\") - Toggle between skip seen and skip all.\\n\\n* Preference(\\"begin skipping\\") - Starts skipping.\\n\\n* Preference(\\"after choices\\", \\"skip\\") - Skip after choices.\\n* Preference(\\"after choices\\", \\"stop\\") - Stop skipping after choices.\\n* Preference(\\"after choices\\", \\"toggle\\") - Toggle skipping after choices.\\n\\n* Preference(\\"auto-forward time\\", 0) - Set the auto-forward time to infinite.\\n* Preference(\\"auto-forward time\\", 10) - Set the auto-forward time (unit is seconds per 250 characters).\\n\\n* Preference(\\"auto-forward\\", \\"enable\\") - Enable auto-forward mode.\\n* Preference(\\"auto-forward\\", \\"disable\\") - Disable auto-forward mode.\\n* Preference(\\"auto-forward\\", \\"toggle\\") - Toggle auto-forward mode.\\n\\n* Preference(\\"auto-forward after click\\", \\"enable\\") - Remain in auto-forward mode after a click.\\n* Preference(\\"auto-forward after click\\", \\"disable\\") - Disable auto-forward mode after a click.\\n* Preference(\\"auto-forward after click\\", \\"toggle\\") - Toggle auto-forward after click.\\n\\n* Preference(\\"automatic move\\", \\"enable\\") - Allow Ren\'Py to move the mouse automatically using the MouseMove action.\\n* Preference(\\"automatic move\\", \\"disable\\") - Disable the MouseMove action.\\n* Preference(\\"automatic move\\", \\"toggle\\") - Toggle automatic mouse mode.\\n\\n* Preference(\\"wait for voice\\", \\"enable\\")  - Wait for the currently playing voice to complete before auto-forwarding.\\n* Preference(\\"wait for voice\\", \\"disable\\") - Do not wait for the currently playing voice to complete before auto-forwarding.\\n* Preference(\\"wait for voice\\", \\"toggle\\")  - Toggle wait voice.\\n\\n* Preference(\\"voice sustain\\", \\"enable\\")  - Sustain voice past the current interaction.\\n* Preference(\\"voice sustain\\", \\"disable\\") - Don\'t sustain voice past the current interaction.\\n* Preference(\\"voice sustain\\", \\"toggle\\")  - Toggle voice sustain.\\n\\n* Preference(\\"music mute\\", \\"enable\\") - Mute the music mixer.\\n* Preference(\\"music mute\\", \\"disable\\") - Un-mute the music mixer.\\n* Preference(\\"music mute\\", \\"toggle\\") - Toggle music mute.\\n\\n* Preference(\\"sound mute\\", \\"enable\\") - Mute the sound mixer.\\n* Preference(\\"sound mute\\", \\"disable\\") - Un-mute the sound mixer.\\n* Preference(\\"sound mute\\", \\"toggle\\") - Toggle sound mute.\\n\\n* Preference(\\"voice mute\\", \\"enable\\") - Mute the voice mixer.\\n* Preference(\\"voice mute\\", \\"disable\\") - Un-mute the voice mixer.\\n* Preference(\\"voice mute\\", \\"toggle\\") - Toggle voice mute.\\n\\n* Preference(\\"mixer <mixer> mute\\", \\"enable\\") - Mute the specified mixer.\\n* Preference(\\"mixer <mixer> mute\\", \\"disable\\") - Unmute the specified mixer.\\n* Preference(\\"mixer <mixer> mute\\", \\"toggle\\") - Toggle mute of the specified mixer.\\n\\n* Preference(\\"all mute\\", \\"enable\\") - Mute each individual mixer.\\n* Preference(\\"all mute\\", \\"disable\\") - Unmute each individual mixer.\\n* Preference(\\"all mute\\", \\"toggle\\") - Toggle mute of each individual mixer.\\n\\n* Preference(\\"main volume\\", 0.5) - Set the adjustment applied to all channels.\\n* Preference(\\"music volume\\", 0.5) - Set the music volume.\\n* Preference(\\"sound volume\\", 0.5) - Set the sound volume.\\n* Preference(\\"voice volume\\", 0.5) - Set the voice volume.\\n* Preference(\\"mixer <mixer> volume\\", 0.5) - Set the specified mixer volume.\\n\\n* Preference(\\"emphasize audio\\", \\"enable\\") - Emphasize the audio channels found in config.emphasize_audio_channels.\\n* Preference(\\"emphasize audio\\", \\"disable\\") - Do not emphasize audio channels.\\n* Preference(\\"emphasize audio\\", \\"toggle\\") - Toggle emphasize audio.\\n\\n* Preference(\\"self voicing\\", \\"enable\\") - Enables self-voicing.\\n* Preference(\\"self voicing\\", \\"disable\\") - Disable self-voicing.\\n* Preference(\\"self voicing\\", \\"toggle\\") - Toggles self-voicing.\\n\\n* Preference(\\"self voicing volume drop\\", 0.5) - Drops the volume of non-voice mixers when self voicing is active.\\n\\n* Preference(\\"clipboard voicing\\", \\"enable\\") - Enables clipboard-voicing.\\n* Preference(\\"clipboard voicing\\", \\"disable\\") - Disable clipboard-voicing.\\n* Preference(\\"clipboard voicing\\", \\"toggle\\") - Toggles clipboard-voicing.\\n\\n* Preference(\\"debug voicing\\", \\"enable\\") - Enables self-voicing debug\\n* Preference(\\"debug voicing\\", \\"disable\\") - Disable self-voicing debug.\\n* Preference(\\"debug voicing\\", \\"toggle\\") - Toggles self-voicing debug.\\n\\n* Preference(\\"rollback side\\", \\"left\\") - Touching the left side of the screen causes rollback.\\n* Preference(\\"rollback side\\", \\"right\\") - Touching the right side of the screen causes rollback.\\n* Preference(\\"rollback side\\", \\"disable\\") - Touching the screen will not cause rollback.\\n\\n* Preference(\\"gl powersave\\", True) - Drop framerate to allow for power savings.\\n* Preference(\\"gl powersave\\", False) - Do not drop framerate to allow for power savings.\\n\\n* Preference(\\"gl framerate\\", None) - Runs at the display framerate.\\n* Preference(\\"gl framerate\\", 60) - Runs at the given framerate.\\n\\n* Preference(\\"gl tearing\\", True) - Tears rather than skipping frames.\\n* Preference(\\"gl tearing\\", False) - Skips frames rather than tearing.\\n\\n* Preference(\\"font transform\\", \\"opendyslexic\\") - Sets the accessibility font transform to opendyslexic.\\n* Preference(\\"font transform\\", \\"dejavusans\\") - Sets the accessibility font transform to deja vu sans.\\n* Preference(\\"font transform\\", None) - Disables the accessibility font transform.\\n\\n* Preference(\\"font size\\", 1.0) - Sets the accessibility font size scaling factor.\\n* Preference(\\"font line spacing\\", 1.0) - Sets the accessibility font vertical spacing scaling factor.\\n\\n* Preference(\\"system cursor\\", \\"disable\\") - Use the cursor defined in config.mouse or config.mouse_displayable.\\n* Preference(\\"system cursor\\", \\"enable\\") - Use the system cursor, ignoring config.mouse.\\n* Preference(\\"system cursor\\", \\"toggle\\") - Toggle system cursor.\\n\\n* Preference(\\"high contrast text\\", \\"enable\\") - Enables white text on a black background.\\n* Preference(\\"high contrast text\\", \\"disable\\") - Disables high contrast text.\\n* Preference(\\"high contrast text\\", \\"toggle\\") - Toggles high contrast text.\\n\\n* Preference(\\"audio when minimized\\", \\"enable\\") - Enable sounds playing when the window has been minimized.\\n* Preference(\\"audio when minimized\\", \\"disable\\") - Disable sounds playing when the window has been minimized.\\n* Preference(\\"audio when minimized\\", \\"toggle\\") - Toggle sounds playing when the window has been minimized.\\n\\n* Preference(\\"audio when unfocused\\", \\"enable\\") - Enable sounds playing when the window is not in focus.\\n* Preference(\\"audio when unfocused\\", \\"disable\\") - Disable sounds playing when the window is not in focus.\\n* Preference(\\"audio when unfocused\\", \\"toggle\\") - Toggle sounds playing when the window is not in focus.\\n\\n* Preference(\\"web cache preload\\", \\"enable\\") - Will cause the web cache to be preloaded.\\n* Preference(\\"web cache preload\\", \\"disable\\") - Will cause the web cache to not be preloaded, and preloaded data to be deleted.\\n* Preference(\\"web cache preload\\", \\"toggle\\") - Will toggle the web cache preload state.\\n\\n* Preference(\\"voice after game menu\\", \\"enable\\") - Will cause the voice to continue being played when entering the game  menu.\\n* Preference(\\"voice after game menu\\", \\"disable\\") - Will cause the voice to stop being played when entering the game menu.\\n* Preference(\\"voice after game menu\\", \\"toggle\\") - Will toggle the voice after game menu state.\\n\\n* Preference(\\"restore window position\\", \\"enable\\") - Will cause the window position to be restored when the game is started.\\n* Preference(\\"restore window position\\", \\"disable\\") - Will cause the window position to not be restored when the game is started.\\n* Preference(\\"restore window position\\", \\"toggle\\") - Will toggle the restore window position state.\\n\\nValues that can be used with bars are:\\n\\n* Preference(\\"text speed\\")\\n* Preference(\\"auto-forward time\\")\\n* Preference(\\"main volume\\")\\n* Preference(\\"music volume\\")\\n* Preference(\\"sound volume\\")\\n* Preference(\\"voice volume\\")\\n* Preference(\\"mixer <mixer> volume\\")\\n* Preference(\\"self voicing volume drop\\")\\n* Preference(\\"font size\\")\\n* Preference(\\"font line spacing\\")\\n\\nThe `range` parameter can be given to give the range of certain bars.\\nFor \\"text speed\\", it defaults to 200 cps. For \\"auto-forward time\\", it\\ndefaults to 30.0 seconds per chunk of text. (These are maximums, not\\ndefaults.)\\n\\nActions that can be used with buttons are:\\n\\n* Preference(\\"renderer menu\\") - Show the renderer menu.\\n* Preference(\\"accessibility menu\\") - Show the accessibility menu.\\n* Preference(\\"reset\\") - Reset preferences to defaults.\\n\\nThese screens are intended for internal use, and are not customizable.\\n\\n"],"PushMove":["renpy","function","(time, mode=\\"pushright\\")","","function","Returns a transition that works by taking the new scene and using it to\\n\\"push\\" the old scene off the screen.\\n\\n`time`\\nThe time the transition takes.\\n\\n`mode`\\nThere are four possible modes: \\"pushright\\", \\"pushleft\\", \\"pushup\\",\\nand \\"pushdown\\", which push the old scene off the screen in the\\ndirection indicated.\\n\\n\\n\\n```\\ndefine pushright = PushMove(1.0, \\"pushright\\")\\ndefine pushleft = PushMove(1.0, \\"pushleft\\")\\ndefine pushup = PushMove(1.0, \\"pushup\\")\\ndefine pushdown = PushMove(1.0, \\"pushdown\\")\\n\\n```\\n\\n"],"Queue":["renpy","function","(channel, file, **kwargs)","","function","Causes an audio file to be queued on a given channel.\\n\\n`channel`\\nThe channel to play the sound on.\\n`file`\\nThe file to play.\\n\\nAny keyword arguments are passed to renpy.music.queue\\n\\n"],"QueueEvent":["renpy","function","(event, up=False)","","function","Queues the given event using renpy.queue_event.\\n\\n"],"QuickLoad":["renpy","function","(confirm=True)","","function","Performs a quick load.\\n\\n`confirm`\\nIf true and not at the main menu, prompt for confirmation before loading the file.\\n\\n"],"QuickSave":["renpy","function","(message=\'Quick save complete.\', newest=False)","","function","Performs a quick save.\\n\\n`message`\\nA message to display to the user when the quick save finishes.\\n\\n`newest`\\nSet to true to mark the quicksave as the newest save.\\n\\n\\n"],"Quit":["renpy","function","(confirm=None)","","function","Quits the game.\\n\\n`confirm`\\nIf true, prompts the user if he wants to quit, rather\\nthan quitting directly. If None, asks if and only if\\nthe user is not at the main menu.\\n\\n"],"RemoveFromSet":["renpy","function","(set, value)","","function","Removes `value` from `set`.\\n\\n`set`\\nThe set to remove from. This may be a set or list.\\n`value`\\nThe value to remove.\\n\\n"],"Replay":["renpy","function","(label, scope={}, locked=None)","","function","An action that starts `label` as a replay.\\n\\n`scope`\\nA dictionary mapping variable name to value. These variables are set\\nwhen entering the replay.\\n\\n`locked`\\nIf true, this action is insensitive and will not do anything when triggered.\\nIf false, it will behave normally. If None, it will be locked if the label\\nhas not been seen in any playthrough.\\n\\n"],"RestartStatement":["renpy","function","()","","function","This action causes Ren\'Py to rollback to before the current\\nstatement, and then re-run the current statement. This may be used\\nwhen changing a persistent variable that affects how the statement\\nis displayed.\\n\\nIf run in a menu context, this waits until the player exits to a\\ntop-level context before performing the rollback.\\n\\n"],"Return":["renpy","function","(value=None)","","function","Causes the current interaction to return the supplied non-None value.\\nThis is often used with menus and imagemaps, to\\nselect what the return value of the interaction is. If the screen\\nwas called using the ``call screen`` statement, the return value\\nis placed in the `_return` variable.\\n\\nWhen in a menu, this returns from the menu. (The value should be\\nNone in this case.)\\n\\n"],"RollForward":["renpy","function","()","","function","This action causes a rollforward to occur, if a roll forward is\\npossible. Otherwise, it is insensitive.\\n\\n"],"Rollback":["renpy","function","(*args, force=\\"menu\\", **kwargs)","","function","This action causes a rollback to occur, when a rollback is possible.\\nOtherwise, nothing happens.\\n\\nThe arguments are given to renpy.rollback. This includes the\\n`force` argument which here defaults to \\"menu\\".\\n\\n"],"RollbackToIdentifier":["renpy","function","(identifier)","","function","This causes a rollback to an identifier to occur. Rollback\\nidentifiers are returned as part of HistoryEntry objects.\\n\\n"],"RotateMatrix":["renpy","class","(x, y, z)","","class","A TransformMatrix that returns a matrix that rotates the displayable around the\\norigin.\\n\\n`x`, `y`, `z`\\nThe amount to rotate around the origin, in degrees.\\n\\n\\nThe rotations are applied in order:\\n\\n* A clockwise rotation by `x` degrees in the Y/Z plane.\\n* A clockwise rotation by `y` degrees in the Z/X plane.\\n* A clockwise rotation by `z` degrees in the X/Y plane.\\n\\n"],"Sample":["renpy","function","(name, delay, position=(0, 0), **properties)","","function","A sample function that doesn\'t actually exist in Ren\'Py, but\\nis used only in documentation.\\n\\n"],"SaturationMatrix":["renpy","class","(value, desat=(0.2126, 0.7152, 0.0722))","","class","A ColorMatrix that can be used with matrixcolor that alters\\nthe saturation of an image, while leaving the alpha channel\\nalone.\\n\\n`value`\\nThe amount of saturation in the resulting image. 1.0 is\\nthe unaltered image, while 0.0 is grayscale.\\n\\n`desat`\\nThis is a 3-element tuple that controls how much of the\\nred, green, and blue channels will be placed into all\\nthree channels of a fully desaturated image. The default\\nis based on the constants used for the luminance channel\\nof an NTSC television signal. Since the human eye is\\nmostly sensitive to green, more of the green channel is\\nkept then the other two channels.\\n\\n"],"ScaleMatrix":["renpy","class","(x, y, z)","","class","A TransformMatrix that returns a matrix that scales the displayable.\\n\\n`x`, `y`, `z`\\nThe factor to scale each axis by.\\n\\n"],"ScreenVariableInputValue":["renpy","function","(variable, default=True, returnable=False)","","function","An input value that updates a variable in a screen.\\n\\nIn a ``use``\\\\ d screen, this targets a variable in the context of the\\nscreen containing the ``use``\\\\ d one(s). To target variables within a\\n``use``\\\\ d screen, and only in that case, use\\nLocalVariableInputValue instead.\\n\\n`variable`\\nA string giving the name of the variable to update.\\n`default`\\nIf true, this input can be editable by default.\\n`returnable`\\nIf true, the value of this input will be returned when the\\nuser presses enter.\\n\\n"],"ScreenVariableValue":["renpy","function","(variable, range=None, max_is_zero=False, style=\'bar\', offset=0, step=None, action=None, force_step=False, min=None, max=None)","","function","A bar value that adjusts the value of a variable in a screen.\\n\\nIn a ``use``\\\\ d screen, this targets a variable in the context of\\nthe screen containing the ``use``\\\\ d one(s). To target variables\\nwithin a ``use``\\\\ d screen, and only in that case, use\\nLocalVariableValue instead.\\n\\n`variable`\\nA string giving the name of the variable to adjust.\\n`range`\\nThe range to adjust over. This must be specified if `max` and `min`\\nare not given.\\n`max_is_zero`\\nIf True, then when the screen variable\'s value is zero, the value of the\\nbar will be `range`, and all other values will be shifted down\\nby 1. This works both ways - when the bar is set to the maximum,\\nthe value of the screen variable is set to 0.\\n\\nThis is used internally, for some preferences.\\n`style`\\nThe styles of the created bar.\\n`offset`\\nAn offset to add to the value.\\n`step`\\nThe amount to change the bar by. If None, defaults to 1/10th of\\nthe bar.\\n`action`\\nIf not None, an action to call when the screen variable\'s value is changed.\\n`min`\\nThe minimum value of the bar. If both `min` and `max` are given,\\n`range` and `offset` are calculated from them.\\n`max`\\nThe maximum value of the bar. If both `min` and `max` are given,\\n`range` and `offset` are calculated from them.\\n\\n"],"Screenshot":["renpy","function","()","","function","Takes a screenshot.\\n\\n"],"Scroll":["renpy","function","(id, direction, amount=\'step\', delay=0.0)","","function","Causes a Bar, Viewport, or Vpgrid to scroll.\\n\\n`id`\\nThe id of a bar, viewport, or vpgrid in the current screen.\\n\\n`direction`\\nFor a vbar, one of \\"increase\\" or \\"decrease\\". For a viewport\\nor vpgrid, one of \\"horizontal increase\\", \\"vertical increase\\",\\n\\"horizontal decrease\\", or \\"vertical decrease\\".\\n\\n`amount`\\nThe amount to scroll by. This can be a number of pixels, or\\nelse \\"step\\" or \\"page\\".\\n\\n`delay`\\nIf non-zero, the scroll will be animated for this many seconds.\\n\\n"],"SelectedIf":["renpy","function","(action, /)","","function","This indicates that one action in a list of actions should be used\\nto determine if a button is selected. This only makes sense\\nwhen the button has a list of actions. For example\\n\\n```\\n# The button is selected only if mars_flag is True\\ntextbutton \\"Marsopolis\\":\\n    action [ SelectedIf(SetVariable(\\"mars_flag\\", True)), SetVariable(\\"on_mars\\", True) ]\\n    \\n```\\n\\nThe action inside SelectedIf is run normally when the button is clicked.\\n\\n"],"SensitiveIf":["renpy","function","(action, /)","","function","This indicates that one action in a list of actions should be used\\nto determine if a button is sensitive. This only makes sense\\nwhen the button has a list of actions. For example\\n\\n```\\n# The button is sensitive only if mars_flag is True\\ntextbutton \\"Marsopolis\\":\\n    action [ SensitiveIf(SetVariable(\\"mars_flag\\", True)), SetVariable(\\"on_mars\\", True) ]\\n    \\n```\\n\\nThe action inside SensitiveIf is run normally when the button is clicked.\\n\\n"],"SepiaMatrix":["renpy","function","(tint=\'#ffeec2\', desat=(0.2126, 0.7152, 0.0722))","","function","A function that returns a ColorMatrix that can be used with matrixcolor\\nto sepia-tone a displayable. This is the equivalent of\\n\\n```\\nTintMatrix(tint) * SaturationMatrix(0.0, desat)\\n\\n```\\n\\n"],"SetCharacterVolume":["renpy","function","(voice_tag, volume=None)","","function","This allows the volume of each characters to be adjusted.\\nIf `volume` is None, this returns a BarValue that\\ncontrols the value of `voice_tag`. Otherwise, this set it to `volume`.\\n\\n`volume` is a number between 0.0 and 1.0, and is interpreted as a\\nfraction of the mixer volume for `voice` channel.\\n\\n"],"SetDict":["renpy","function","(dict, key, value)","","function","See data-actions.\\n\\n"],"SetField":["renpy","function","(object, field, value)","","function","See data-actions.\\n\\n"],"SetLocalVariable":["renpy","function","(name, value)","","function","See data-actions.\\n\\n"],"SetMixer":["renpy","function","(mixer, volume)","","function","Sets the volume of `mixer` to `value`.\\n\\n`mixer`\\nThe mixer to set the volume of. A string, usually one of\\n\\"main\\", \\"music\\", \\"sfx\\", or \\"voice\\". See volume for\\nmore information about mixers.\\n`value`\\nThe value to set the volume to. A number between 0.0 and 1.0,\\ninclusive.\\n\\n"],"SetMute":["renpy","function","(mixer, mute)","","function","Sets the mute status of one or more mixers. When a mixer is muted,\\naudio channels associated with that mixer will stop playing audio.\\n\\n`mixer`\\nEither a single string giving a mixer name, or a list of strings\\ngiving a list of mixers. The strings should be mixer names.\\n\\n`mute`\\nTrue to mute the mixer, False to ummute it.\\n\\n"],"SetScreenVariable":["renpy","function","(name, value)","","function","See data-actions.\\n\\n"],"SetVariable":["renpy","function","(name, value)","","function","See data-actions.\\n\\n"],"SetVoiceMute":["renpy","function","(voice_tag, mute)","","function","If `mute` is true, mutes voices that are played with the given\\n`voice_tag`. If `mute` is false, unmutes voices that are played\\nwith `voice_tag`.\\n\\n"],"Show":["renpy","function","(screen, transition=None, *args, **kwargs)","","function","This causes another screen to be shown. `screen` is a string\\ngiving the name of the screen. The arguments are\\npassed to the screen being shown.\\n\\nIf not None, `transition` is used to show the new screen.\\n\\nThis action takes the `_layer`, `_zorder` and `_tag` keyword\\narguments, which have the same meaning as in the\\nrenpy.show_screen function.\\n\\n"],"ShowMenu":["renpy","function","(screen=_game_menu_screen, *args, _transition=config.intra_transition, **kwargs)","","function","Causes us to enter the game menu, if we\'re not there already. If we\\nare in the game menu, then this shows a screen or jumps to a label.\\n\\n`screen` is usually the name of a screen, which is shown using\\nthe screen mechanism. If the screen doesn\'t exist, then \\"_screen\\"\\nis appended to it, and that label is jumped to.\\nthe screen mechanism with the ``*args`` and ``**kwargs`` passed to\\nthe screen. If the screen doesn\'t exist, then \\"_screen\\" is appended\\nto it, and that label is jumped to, ignoring `args` and `kwargs`.\\n\\nIf the optional keyword argument `_transition` is given, the\\nmenu will change screens using the provided transition.\\nIf not manually specified, the default transition is\\n`config.intra_transition`.\\n\\n* ShowMenu(\\"load\\")\\n* ShowMenu(\\"save\\")\\n* ShowMenu(\\"preferences\\")\\n\\nThis can also be used to show user-defined menu screens. For\\nexample, if one has a \\"stats\\" screen defined, one can\\nshow it as part of the game menu using:\\n\\n* ShowMenu(\\"stats\\")\\n\\nShowMenu without an argument will enter the game menu at the\\ndefault screen, taken from _game_menu_screen.\\n\\nExtra arguments and keyword arguments are passed on to the screen\\n\\n"],"ShowTransient":["renpy","function","(screen, transition=None, *args, **kwargs)","","function","Shows a transient screen. A transient screen will be hidden when\\nthe current interaction completes. The arguments are\\npassed to the screen being shown.\\n\\nIf not None, `transition` is use to show the new screen.\\n\\nThis action takes the `_layer`, `_zorder` and `_tag` keyword\\narguments, which have the same meaning as in the\\nrenpy.show_screen function.\\n\\n"],"ShowingSwitch":["renpy","function","(*args, predict_all=None, **properties)","","function","This is a displayable that changes what it is showing based on the\\nimages are showing on the screen. The positional argument should\\nbe given in groups of two, where each group consists of:\\n\\n* A string giving an image name, or None to indicate the default.\\n* A displayable to use if the condition is true.\\n\\nA default image should be specified.\\n\\n`predict_all`\\nIf True, all of the possible displayables will be predicted when\\nthe displayable is shown. If False, only the current condition is\\npredicted. If None, config.conditionswitch_predict_all is\\nused.\\n\\nOne use of ShowingSwitch is to have images change depending on\\nthe current emotion of a character. For example\\n\\n```\\nimage emotion_indicator = ShowingSwitch(\\n   \\"eileen concerned\\", \\"emotion_indicator concerned\\",\\n   \\"eileen vhappy\\", \\"emotion_indicator vhappy\\",\\n   None, \\"emotion_indicator happy\\")\\n   \\n```\\n\\n"],"SideImage":["renpy","function","()","","function","Returns the side image associated with the currently speaking character,\\nor a Null displayable if no such side image exists.\\n\\n"],"Skip":["renpy","function","(fast=False, confirm=False)","","function","Causes the game to begin skipping. If the game is in a menu\\ncontext, then this returns to the game. Otherwise, it just\\nenables skipping.\\n\\n`fast`\\nIf true, skips directly to the next menu choice.\\n\\n`confirm`\\nIf true, asks for confirmation before beginning skipping.\\n\\n"],"SlottedNoRollback":["renpy","class","()","","class","Instances of classes inheriting from this class do not participate\\nin rollback. The difference between this and NoRollback is that\\nthis class does not have an associated dictionary, hence can be used\\nwith ``__slots__`` to reduce memory usage.\\n\\nObjects reachable through an instance of a NoRollback class only participate\\nin rollback if they are reachable through other paths.\\n\\n"],"SnowBlossom":["renpy","function","(d, count=10, border=50, xspeed=(20, 50), yspeed=(100, 200), start=0, fast=False, horizontal=False)","","function","The snowblossom effect moves multiple instances of a sprite up,\\ndown, left or right on the screen. When a sprite leaves the screen, it\\nis returned to the start.\\n\\n`d`\\nThe displayable to use for the sprites.\\n\\n`border`\\nThe size of the border of the screen. The sprite is considered to be\\non the screen until it clears the border, ensuring that sprites do\\nnot disappear abruptly.\\n\\n`xspeed`, `yspeed`\\nThe speed at which the sprites move, in the horizontal and vertical\\ndirections, respectively. These can be a single number or a tuple of\\ntwo numbers. In the latter case, each particle is assigned a random\\nspeed between the two numbers. The speeds can be positive or negative,\\nas long as the second number in a tuple is larger than the first.\\n\\n`start`\\nThe delay, in seconds, before each particle is added. This can be\\nallows the particles to start at the top of the screen, while not\\nlooking like a \\"wave\\" effect.\\n\\n`fast`\\nIf true, particles start in the center of the screen, rather than\\nonly at the edges.\\n\\n`horizontal`\\nIf true, particles appear on the left or right side of the screen,\\nrather than the top or bottom.\\n\\n\\n"],"Solid":["renpy","class","(color, **properties)","","class","A displayable that fills the area its assigned with `color`.\\n\\n\\n\\n```\\nimage white = Solid(\\"#fff\\")\\n\\n```\\n\\n"],"Sprite":["renpy","class","()","","class","This represents a sprite that is managed by the SpriteManager. It contains\\nfields that control the placement of the sprite on the screen. Sprites\\nshould not be created directly. Instead, they should be created by\\ncalling SpriteManager.create.\\n\\nThe fields of a sprite object are:\\n\\n`x`, `y`\\nThe x and y coordinates of the upper-left corner of the sprite,\\nrelative to the SpriteManager.\\n\\n`zorder`\\nAn integer that\'s used to control the order of this sprite in the\\nrelative to the other sprites in the SpriteManager. The larger the\\nnumber is, the closer to the viewer the sprite is.\\n\\n`events`\\nIf True, then events are passed to child. If False, the default,\\nthe children ignore events (and hence don\'t spend time processing\\nthem).\\n\\nThe methods of a Sprite object are:\\n\\n\\n.. method:: destroy()\\n\\nDestroys this sprite, preventing it from being displayed and\\nremoving it from the SpriteManager.\\n\\n.. method:: set_child(d)\\n\\nChanges the Displayable associated with this sprite to `d`.\\n\\n"],"SpriteManager":["renpy","class","(update=None, event=None, predict=None, ignore_time=False, **properties)","","class","This displayable manages a collection of sprites, and displays\\nthem at the fastest speed possible.\\n\\n`update`\\nIf not None, a function that is called each time a sprite\\nis rendered by this sprite manager. It is called with one\\nargument, the time in seconds since this sprite manager\\nwas first displayed.  It is expected to return the number\\nof seconds until the function is called again, and the\\nSpriteManager is rendered again.\\n\\n`event`\\nIf not None, a function that is called when an event occurs.\\nIt takes as arguments:\\n* A pygame event object.\\n* The x coordinate of the event.\\n* The y coordinate of the event.\\n* The time since the sprite manager was first shown.\\nIf it returns a non-None value, the interaction ends, and\\nthat value is returned.\\n\\n`predict`\\nIf not None, a function that returns a list of\\ndisplayables. These displayables are predicted when the\\nsprite manager is.\\n\\n`ignore_time`\\nIf True, then time is ignored when rendering displayables. This\\nshould be used when the sprite manager is used with a relatively\\nsmall pool of images, and those images do not change over time.\\nThis should only be used with a small number of displayables, as\\nit will keep all displayables used in memory for the life of the\\nSpriteManager.\\n\\nAfter being rendered once (before the `update` function is called),\\nSpriteManagers have the following fields:\\n\\n`width`, `height`\\nThe width and height of this SpriteManager, in pixels.\\n\\n\\nSpriteManagers have the following methods:\\n\\n.. method:: create(d)\\n\\nCreates a new Sprite for the displayable `d`, and adds it to this\\nSpriteManager.\\n\\n.. method:: redraw(delay=0)\\n\\nCauses this SpriteManager to be redrawn in `delay` seconds.\\n\\n"],"Start":["renpy","function","(label=\'start\')","","function","Causes Ren\'Py to jump out of the menu context to the named\\nlabel. The main use of this is to start a new game from the\\nmain menu. Common uses are:\\n\\n* Start() - Start at the start label.\\n* Start(\\"foo\\") - Start at the \\"foo\\" label.\\n\\n"],"StaticValue":["renpy","function","(value=0.0, range=1.0)","","function","This allows a value to be specified statically.\\n\\n`value`\\nThe value itself, a number.\\n\\n`range`\\nThe range of the value.\\n\\n"],"Stop":["renpy","function","(channel, **kwargs)","","function","Causes an audio channel to be stopped.\\n\\n`channel`\\nThe channel to stop the sound on.\\n\\nAny keyword arguments are passed to renpy.music.stop\\n\\n"],"Style":["renpy","class","(parent)","","class","`parent`\\nThe styles parent. This can be another Style object, or a string.\\n\\n.. method:: clear()\\n\\nThis removes all style properties from this object. Values will be\\ninherited from this object\'s parent.\\n\\nThe equivalent of the ``clear`` clause in a style statement.\\n\\n.. method:: set_parent(parent)\\n\\nSets the parent of this style object to `parent`, which can be another\\nStyle object or a string.\\n\\nThe equivalent of the ``is`` clause in a style statement.\\n\\n.. method:: take(other)\\n\\nThis takes all style properties from `other`, which can be another\\nStyle object or a string.\\n\\nThe equivalent of the ``take`` clause in a style statement.\\n\\n\\n"],"StylePreference":["renpy","function","(preference, alternative)","","function","An action that causes `alternative` to become the selected alternative for the given style preference.\\n\\nThe `update` event is triggered when this action is called.\\n\\n`preference`\\nA string giving the name of the style preference.\\n\\n`alternative`\\nA string giving the name of the alternative.\\n\\n"],"Swing":["renpy","function","(delay=1.0, vertical=False, reverse=False, background=\\"#000\\", flatten=True)","","function","A transitions that rotates the old scene 90 degrees around an axis,\\nso that it is edge on with the viewer, switches to the new scene,\\nand then rotates that scene another 90 degrees to show the new\\nscene to the viewer.\\n\\n`delay`\\nHow long the transition should take.\\n\\n`vertical`\\nIf true, the scene is rotate around the x-axis (pixels move\\nvertically). If false, the scene is roated around the y axis,\\npixels moving horizontally.\\n\\n`reverse`\\nWhen true, the rotation occurs in the reverse direction.\\n\\n`background`\\nA displayable that is placed behind the scene as it rotates.\\n\\n`flatten`\\nIf true, the scenes are flattened into images the size of\\nthe screen before being rotated. Use this if images being\\nnot entirely on the screen causes undesired effects.\\n\\n"],"Text":["renpy","class","(text, slow=None, scope=None, substitute=None, slow_done=None, *, tokenized=False, **properties)","","class","A displayable that displays text on the screen.\\n\\n`text`\\nThe text to display on the screen. This may be a string, or a list of\\nstrings and displayables.\\n\\n`slow`\\nDetermines if the text is displayed slowly, being typed out one character at the time.\\nIf None, slow text mode is determined by the slow_cps style property. Otherwise,\\nthe truth value of this parameter determines if slow text mode is used.\\n\\n`scope`\\nIf not None, this should be a dictionary that provides an additional scope for text\\ninterpolation to occur in.\\n\\n`substitute`\\nIf true, text interpolation occurs. If false, it will not occur. If\\nNone, they are controlled by config.new_substitutions.\\n\\n`slow_done`\\nIf not None, and if slow text mode is enabled (see the `slow` parameter), this is a\\nfunction or callable which is called with no arguments when the text finishes displaying.\\n\\n`tokenized`\\nIf true, `text` is expected to be a list of tokens, rather than a string. The tokens are\\nintroduced in the custom_text_tags page.\\n\\n`**properties`\\nLike other Displayables, Text takes style properties, including (among many others) the\\nmipmap property.\\n\\n"],"Tile":["renpy","class","(child, style=\'tile\', **properties)","","class","Tiles `child` until it fills the area allocated to this displayable.\\n\\n\\n\\n```\\nimage bg tile = Tile(\\"bg.png\\")\\n\\n```\\n\\n"],"TintMatrix":["renpy","class","(color)","","class","A ColorMatrix can be used with matrixcolor to tint\\nan image, while leaving the alpha channel alone.\\n\\n`color`\\nThe color that the matrix will tint things to. This is passed\\nto Color, and so may be anything that Color supports\\nas its first argument.\\n\\n"],"ToggleDict":["renpy","function","(dict, key, true_value=None, false_value=None)","","function","See data-actions.\\n\\n"],"ToggleField":["renpy","function","(object, field, true_value=None, false_value=None)","","function","See data-actions.\\n\\n"],"ToggleFocus":["renpy","function","(name=\'default\')","","function","If the focus rectangle exists, clears it, otherwise captures it.\\n\\n`name`\\nThe name of the focus rectangle to store. This should be a string.\\nThe name \\"tooltip\\" is special, as it is automatically captured\\nwhen the tooltip is changed.\\n\\n"],"ToggleLocalVariable":["renpy","function","(name, true_value=None, false_value=None)","","function","See data-actions.\\n\\n"],"ToggleMute":["renpy","function","(mixer)","","function","Toggles the mute status of one or more mixers.\\n\\n`mixer`\\nEither a single string giving a mixer name, or a list of strings\\ngiving a list of mixers. The strings should be mixer names.\\n\\n"],"ToggleScreen":["renpy","function","(screen, transition=None, *args, **kwargs)","","function","This toggles the visibility of `screen`. If it is not currently\\nshown, the screen is shown with the provided arguments. Otherwise,\\nthe screen is hidden.\\n\\nIf not None, `transition` is use to show and hide the screen.\\n\\nThis action takes the `_layer`, `_zorder` and `_tag` keyword\\narguments, which have the same meaning as in the\\nrenpy.show_screen function.\\n\\n"],"ToggleScreenVariable":["renpy","function","(name, true_value=None, false_value=None)","","function","See data-actions.\\n\\n"],"ToggleSetMembership":["renpy","function","(set, value)","","function","Toggles the membership of `value` in `set`. If the value is not\\nin the set, it\'s added. Otherwise, it is removed.\\n\\nButtons with this action are marked as selected if and only if the\\nvalue is in the set.\\n\\n`set`\\nThe set to add to or remove from. This may be a set or list. In the\\ncase of a list, new items are appended.\\n`value`\\nThe value to add or append.\\n\\n"],"ToggleVariable":["renpy","function","(name, true_value=None, false_value=None)","","function","See data-actions.\\n\\n"],"ToggleVoiceMute":["renpy","function","(voice_tag, invert=False)","","function","Toggles the muting of `voice_tag`. This is selected if\\nthe given voice tag is muted, unless `invert` is true,\\nin which case it\'s selected if the voice is unmuted.\\n\\n"],"Tooltip":["renpy","class","(default)","","class","A tooltip object can be used to define a portion of a screen that is\\nupdated when the mouse hovers an area.\\n\\nA tooltip object has a ``value`` field, which is set to the `default`\\nvalue passed to the constructor when the tooltip is created. When\\na button using an action created by the tooltip is hovered, the\\nvalue field changes to the value associated with the action.\\n\\n.. method:: Action(value)\\n\\nReturns an action that is generally used as the hovered property\\nof a button. When the button is hovered, the value field of this\\ntooltip is set to `value`. When the button loses focus, the\\nvalue field of this tooltip reverts to the default.\\n\\n"],"Transform":["renpy","class","(child=None, function=None, **properties)","","class","A transform applies operations such as cropping, rotation, scaling, and\\nalpha-blending to its child. A transform object has fields corresponding\\nto the transform properties, which it applies\\nto its child.\\n\\n`child`\\nThe child the transform applies to.\\n\\n.. function:: function(trans, st, at, /) -> int|None\\n\\nIf not None, this function will be called when the transform\\nis rendered, with three positional arguments:\\n\\n* The transform object.\\n* The shown timebase, in seconds.\\n* The animation timebase, in seconds.\\n\\nThe function should return a delay, in seconds, after which it will\\nbe called again, or None to be called again at the start of the next\\ninteraction.\\n\\nThis function should not have side effects other\\nthan changing the Transform object in the first argument, and may be\\ncalled at any time with any value to enable prediction.\\n\\nAdditional keyword arguments are values that transform properties are set\\nto. These particular transform properties will be set each time the\\ntransform is drawn, and so may not be changed after the Transform object\\nis created. Fields corresponding to other transform properties, however,\\ncan be set and changed afterwards, either within the function passed as\\nthe `function` parameter, or immediately before calling the\\nupdate method.\\n\\nattribute hide_request\\n\\nThis is set to true when the function is called, to indicate that the\\ntransform is being hidden.\\n\\nattribute hide_response\\n\\nIf hide request is true, this can be set to false to prevent the\\ntransform from being hidden.\\n\\n.. method:: set_child(child)\\n\\nCall this method with a new `child` to change the child of\\nthis transform.\\n\\n.. method:: update()\\n\\nThis should be called when a transform property field is updated\\noutside of the function passed as the `function` argument, to ensure\\nthat the change takes effect.\\n\\n"],"UploadSync":["renpy","function","()","","function","This action begins the process of uploading the most recent\\nsaves to the Ren\'Py Sync server.\\n\\n"],"VBox":["renpy","function","(*args, **properties)","","function","A layout that lays out its members from top to bottom.\\n\\n"],"VariableInputValue":["renpy","function","(variable, default=True, returnable=False)","","function","An input value that updates `variable`.\\n\\n`variable`\\nA string giving the name of the variable to update.\\n\\nThe `variable` parameter must be a string, and can be a simple name like \\"strength\\", or\\none with dots separating the variable from fields, like \\"hero.strength\\"\\nor \\"persistent.show_cutscenes\\".\\n`default`\\nIf true, this input can be editable by default.\\n`returnable`\\nIf true, the value of this input will be returned when the\\nuser presses enter.\\n\\n"],"VariableValue":["renpy","function","(variable, range=None, max_is_zero=False, style=\'bar\', offset=0, step=None, action=None, force_step=False, min=None, max=None)","","function","A bar value that allows the user to adjust the value of a variable in\\nthe default store.\\n\\n`variable`\\nThe `variable` parameter must be a string, and can be a simple\\nname like \\"strength\\", or one with dots separating the variable\\nfrom fields, like \\"hero.strength\\" or \\"persistent.show_cutscenes\\".\\n`range`\\nThe range to adjust over. This must be specified if `max` and `min`\\nare not given.\\n`max_is_zero`\\nIf True, then when the variable\'s value is zero, the value of the\\nbar will be `range`, and all other values will be shifted down\\nby 1. This works both ways - when the bar is set to the maximum,\\nthe value of the variable is set to 0.\\n\\nThis is used internally, for some preferences.\\n`style`\\nThe styles of the created bar.\\n`offset`\\nAn offset to add to the value.\\n`step`\\nThe amount to change the bar by. If None, defaults to 1/10th of\\nthe bar.\\n`action`\\nIf not None, an action to call when the variable\'s value is changed.\\n`min`\\nThe minimum value of the bar. If both `min` and `max` are given,\\n`range` and `offset` are calculated from them.\\n`max`\\nThe maximum value of the bar. If both `min` and `max` are given,\\n`range` and `offset` are calculated from them.\\n\\n"],"VoiceReplay":["renpy","function","()","","function","Replays the most recently played voice.\\n\\n"],"With":["renpy","function","(transition)","","function","Causes `transition` to occur.\\n\\n"],"XScrollValue":["renpy","function","(viewport)","","function","The value of an adjustment that horizontally scrolls the viewport with the\\ngiven id, on the current screen. The viewport must be defined before a bar\\nwith this value is.\\n\\n"],"YScrollValue":["renpy","function","(viewport)","","function","The value of an adjustment that vertically scrolls the viewport with the\\ngiven id, on the current screen. The viewport must be defined before a bar\\nwith this value is.\\n\\n"],"_":["renpy","function","(s)","","function","(Single underscore) Returns `s` unchanged. Ren\'Py will scan for\\nstrings enclosed in this function, and add them to the list of\\ntranslatable strings. The strings will not be translated until\\nthey are displayed.\\n\\n"],"__":["renpy","function","(s)","","function","(Double underscore) Returns `s` immediately translated into the\\ncurrent language. Strings enclosed in this function will be added\\nto the list of translatable strings. Note that the string may be\\ndouble-translated, if it matches a string translation when it\\nis displayed.\\n\\n"],"_autosave":["renpy","var","= True","","var","This variable can be set to False to disable autosave.\\n\\n"],"_confirm_quit":["renpy","var","= True","","var","This determines if quitting the game asks for confirmation. It is\\nset to False during the splashscreen, and is ignored when in the main\\nmenu.\\n\\n"],"_constant":["renpy","var","","","var","If set to true in a store, indicates the store is constant.\\nSee constant-stores.\\n\\n"],"_dismiss_pause":["renpy","var","= True","","var","If True, the player can dismiss pauses and transitions.\\n\\n"],"_game_menu_screen":["renpy","var","= \\"save\\"","","var","This is the screen that is displayed when entering the game menu with no\\nmore specific screen selected. (For example, when right-clicking, pressing\\nescape, or when ShowMenu is not given an argument.) If None, entry\\nto the game menu is disallowed.\\n\\nThis is set to None at the start of the splashscreen, and restored to its\\noriginal value when the splashscreen ends.\\n\\n"],"_get_voice_info":["renpy","function","()","","function","Returns information about the voice being played by the current\\nsay statement. This function may only be called while a say statement\\nis executing.\\n\\nThe object returned has the following fields:\\n\\nattribute VoiceInfo.filename\\n\\nThe filename of the voice to be played, or None if no files\\nshould be played.\\n\\nattribute VoiceInfo.auto_filename\\n\\nThe filename that Ren\'Py looked in for automatic-voicing\\npurposes, or None if one could not be found.\\n\\nattribute VoiceInfo.tag\\n\\nThe voice_tag parameter supplied to the speaking Character.\\n\\nattribute VoiceInfo.sustain\\n\\nFalse if the file was played as part of this interaction. True if\\nit was sustained from a previous interaction.\\n\\n"],"_greedy_rollback":["renpy","var","= True","","var","Determines if the game performs a greedy rollback after a load. A greedy\\nrollback will rollback to just after the last statement that interacted,\\nrather than to just before the statement that the game was in during\\nthe load.\\n\\n"],"_history":["renpy","var","= True","","var","If true, Ren\'Py will record dialogue history when a line is shown. (Note\\nthat config.history_length must be set as well.)\\n\\n"],"_history_list":["renpy","var","= [ ]","","var","This is a list of history objects, corresponding to each line of history\\nfrom oldest to newest. See the History section for more\\ninformation.\\n\\n"],"_ignore_action":["renpy","var","= None","","var","When this is not None, it\'s an action that is run after clicking Ignore\\non the error handling screen. The action is usually Jump, to jump\\nthe game to a place that can recover from an error. If None, control\\ncontinues with the next Ren\'Py statement.\\n\\n"],"_in_replay":["renpy","var","","","var","When in replay mode, this is sent to the label at which replay\\nmode was started - the label that was called, not the one the\\ncall originated from. Outside of replay mode, this is None.\\n\\n"],"_live2d_fade":["renpy","var","= True","","var","If true, Live2D animations use motion fading. If False, animations\\nare transitioned abruptly.\\n\\n"],"_menu":["renpy","var","= False","","var","Ren\'Py sets this variable to True when entering a main menu or game menu\\ncontext.\\n\\n"],"_p":["renpy","function","(s)","","function","Reformats a string and flags it as translatable. The string will be\\ntranslated when displayed by the text displayable. This is intended\\nto define multi-line for use in strings, of the form\\n\\n```\\ndefine gui.about = _p(\\"\\"\\"\\n    These two lines will be combined together\\n    to form a long line.\\n    \\n    This line will be separate.\\n    \\"\\"\\")\\n    \\n```\\n\\nThe reformatting is done by breaking the text up into lines,\\nremoving whitespace from the start and end of each line. Blank lines\\nare removed at the end. When there is a blank line, a blank line is\\ninserted to separate paragraphs. The {p} tag breaks a line, but\\ndoesn\'t add a blank one.\\n\\nThis can be used in a string translation, using the construct\\n\\n```\\nold \\"These two lines will be combined together to form a long line.\\\\n\\\\nThis line will be separate.\\"\\nnew _p(\\"\\"\\"\\n    These two lines will be combined together\\n    to form a long line. Bork bork bork.\\n    \\n    This line will be separate. Bork bork bork.\\n    \\"\\"\\")\\n    \\n```\\n\\n\\n"],"_preferences.language":["renpy","var","","","var","The name of the current language, or None if the default language is\\nbeing used. This should be treated as a read-only variable. To\\nchange the language, call renpy.change_language.\\n\\n\\n"],"_quit_slot":["renpy","var","= None","","var","If not None, this should be a string giving the name of a file slot.\\nWhen Ren\'Py quits, the game will be saved in this slot.\\n\\n"],"_rollback":["renpy","var","= True","","var","Controls if rollback is allowed.\\n\\n"],"_scene_show_hide_transition":["renpy","var","= None","","var","If not None, this is a transition that will be performed using the\\nwith statement after a series of scene, show, and hide statements\\nthat are not followed by a with statement, or by a window transition.\\n\\nSee also: scene-show-hide-transition\\n\\n"],"_screenshot_pattern":["renpy","var","= None","","var","If not None, this string is used in preference to config.screenshot_pattern\\nto determine the filename of a screenshot. Please see the documentation for\\nthat variable for the format of the string.\\n\\n"],"_side_image_tag":["renpy","var","= None","","var",".. var:: config.side_image_tag = None\\n\\nIf _side_image_tag is not None, it takes precedence over config.side_image_tag.\\n\\nIf this is given, then the side image will track the given image tag,\\nrather than the image associated with the currently speaking character. For example,\\n\\n\\n\\n```\\ndefine e = Character(\\"Eileen\\", image=\\"eileen\\")\\ndefine config.side_image_tag = \\"eileen\\"\\n\\n```\\n\\nWill make the side image track the \\"eileen\\" image tag, which is associated\\nwith the ``e`` character.\\n\\n.. var:: config.side_image_only_not_showing = False\\n\\nWhen set to true, the side image will only show if an image with that tag\\nis not already being shown on the screen.\\n\\n.. var:: _side_image_prefix_tag = None\\n.. var:: config.side_image_prefix_tag = \'side\'\\n\\nIf _side_image_prefix_tag is not None, it takes preference over\\nconfig.side_image_prefix_tag.\\n\\nThe prefix that is used when searching for a side image.\\n\\n.. var:: config.side_image_null = Null()\\n\\nThe Null displayable to use when not displaying a side image. This can\\nbe changed, but only to other Null objects. One reason for doing so\\nwould be to set the side of the Null (eg. ``Null(width=200, height=150)``)\\nto prevent dissolves from being cut off.\\n\\n.. var:: config.side_image_same_transform = None\\n\\nIf not None, a transform that is used when the new side image shares the\\nsame image tag as the previous side image.\\n\\n.. var:: config.side_image_change_transform = None\\n\\nIf not None, a transform that is used when the new side image does not\\nshare the name image tag (or one of the new or old side images does not\\nexist).\\n\\n\\nTransforms and Transitions\\n--------------------------\\n\\nThe config.side_image_same_transform and\\nconfig.side_image_change_transform transforms are called with two\\narguments – old and new side image displayables – each time the side\\nimage is displayed. These can be used to move around side images, or\\nuse a transition to go between side images.\\n\\nThis causes the side image to slide in and out when the character\\nassociated with that image changes\\n\\n```\\ntransform change_transform(old, new):\\n    contains:\\n        old\\n        yalign 1.0\\n        xpos 0.0 xanchor 0.0\\n        linear 0.2 xanchor 1.0\\n    contains:\\n        new\\n        yalign 1.0\\n        xpos 0.0 xanchor 1.0\\n        linear 0.2 xanchor 0.0\\n        \\ndefine config.side_image_change_transform = change_transform\\n\\n```\\n\\nThis is used to dissolve between old and new side images when the\\ncharacter remains the same. (For example, when the character changes\\nemotion.) For the Dissolve to work correctly, both side images must\\nbe the same size. \\n\\n```\\ntransform same_transform(old, new):\\n    old\\n    new with Dissolve(0.2, alpha=True)\\n    \\ndefine config.side_image_same_transform = same_transform\\n\\n\\n```\\n\\nWhen the SideImage is scaled down, it might make sense to enable\\nmipmapping in the Dissolve\\n\\n```\\ntransform same_transform(old, new):\\n    old\\n    new with Dissolve(0.2, alpha=True, mipmap=True)\\n    \\ndefine config.side_image_same_transform = same_transform\\n\\n```\\n\\nFunctions\\n---------\\n\\n.. Automatically generated file - do not modify.\\n\\n.. function:: renpy.get_side_image(prefix_tag, image_tag=None, not_showing=None, layer=None)\\n\\nThis attempts to find an image to show as the side image.\\n\\nIt begins by determining a set of image attributes. If `image_tag` is\\ngiven, it gets the image attributes from the tag. Otherwise, it gets\\nthem from the image property suplied to the currently showing character.\\nIf no attributes are available, this returns None.\\n\\nIt then looks up an image with the tag `prefix_tag`, and attributes\\nconsisting of:\\n\\n* An image tag (either from `image_tag` or the image property supplied\\nto the currently showing character).\\n* The attributes.\\n\\nIf such an image exists, it\'s returned.\\n\\n`not_showing`\\nIf not showing is True, this only returns a side image if an image\\nwith the tag that the attributes are taken from is not currently\\nbeing shown. If False, it will always return an image, if possible.\\nIf None, takes the value from config.side_image_only_not_showing.\\n\\n`layer`\\nIf given, the layer to look for the image tag and attributes on. If\\nNone, uses the default layer for the tag.\\n\\n.. function:: renpy.set_tag_attributes(name, layer=None)\\n\\nThis sets the attributes associated with an image tag when that image\\ntag is not showing. The main use of this would be to directly set the\\nattributes used by a side image.\\n\\nFor example\\n\\n```\\n$ renpy.set_tag_attributes(\\"lucy mad\\")\\n$ renpy.say(l, \\"I\'m rather cross.\\")\\n\\n```\\n\\nand\\n\\n```\\nl mad \\"I\'m rather cross.\\"\\n\\n```\\n\\nare equivalent.\\n\\n"],"_skipping":["renpy","var","= True","","var","Controls if skipping is allowed.\\n\\n"],"_version":["renpy","var","= ...","","var","This is set to config.version when a new game is started. It can be\\nused by the ``after_load`` label or config.after_load_callbacks to\\ndetermine which upgrades need to be done.\\n\\nThis is only set once, upon the initial start. After that, the game is\\nresponsible for updating _version as necessary.\\n\\n"],"_window":["renpy","var","= False","","var","This set by the ``window show`` and ``window hide`` statements, and indirectly\\nby ``window auto``. If true, the dialogue window is shown during non-dialogue\\nstatements.\\n\\n"],"_window_auto":["renpy","var","= False","","var","This is set to true by ``window auto`` and to false by ``window show`` and\\n``window hide``. If true, the window auto behavior occurs.\\n\\n"],"_window_hide":["renpy","function","(trans=False, auto=False)","","function","The Python equivalent of the ``window hide`` statement.\\n\\n`trans`\\nIf False, the default window hide transition is used. If None,\\nno transition is used. Otherwise, the specified transition is\\nused.\\n\\n`auto`\\nIf True, this becomes the equivalent of the ``window auto hide``\\nstatment.\\n\\n"],"_window_show":["renpy","function","(trans=False, auto=False)","","function","The Python equivalent of the ``window show`` statement.\\n\\n`trans`\\nIf False, the default window show transition is used. If None,\\nno transition is used. Otherwise, the specified transition is\\nused.\\n\\n`auto`\\nIf True, this becomes the equivalent of the ``window auto show``\\nstatement.\\n\\n"],"_window_subtitle":["renpy","var","= \'\'","","var","This is appended to config.window_title to produce the caption for the game\\nwindow. This is automatically set to config.menu_window_subtitle while in\\nthe game menu.\\n"],"absolute":["renpy","function","(value, /)","","function","For example, ``absolute(100.25)``, or ``absolute(a+b)`` when both\\n``a`` and ``b`` may be floats or ints.\\n\\nAn ``absolute`` number is interpreted as the number of pixels from\\nthe left or top side of the screen, when using subpixel-precise\\nrendering.\\n\\n"],"achievement":["renpy","var","","","var","A namespace that contains functions that grant and manage achievements. This also contains much of\\nthe Steamworks integration.\\n\\n"],"achievement.Sync":["renpy","function","()","","function","An action that calls achievement.sync(). This is only sensitive if\\nachievements are out of sync.\\n\\n"],"achievement.clear":["renpy","function","(name)","","function","Clears the achievement with `name`.\\n\\n"],"achievement.clear_all":["renpy","function","()","","function","Clears all achievements.\\n\\n"],"achievement.get_progress":["renpy","function","(name)","","function","Returns the current progress towards the achievement identified\\nwith `name`, or 0 if no progress has been registered for it or if\\nthe achievement is not known.\\n\\n"],"achievement.grant":["renpy","function","(name)","","function","Grants the achievement with `name`, if it has not already been\\ngranted.\\n\\n"],"achievement.has":["renpy","function","(name)","","function","Returns true if the player has been granted the achievement with\\n`name`.\\n\\n"],"achievement.progress":["renpy","function","(name, complete)","","function","Reports progress towards the achievement with `name`, if that\\nachievement has not been granted. The achievement must be defined\\nwith a completion amount.\\n\\n`name`\\nThe name of the achievement. This should be the name of the\\nachievement, and not the stat.\\n\\n`complete`\\nAn integer giving the number of units completed towards the\\nachievement.\\n\\n"],"achievement.register":["renpy","function","(name, **kwargs)","","function","Registers an achievement. Achievements are not required to be\\nregistered, but doing so allows one to pass information to the\\nbackends.\\n\\n`name`\\nThe name of the achievement to register.\\n\\nThe following keyword parameters are optional.\\n\\n`steam`\\nThe name to use on steam. If not given, defaults to `name`.\\n\\n`stat_max`\\nThe integer value of the stat at which the achievement unlocks.\\n\\n`stat_modulo`\\nIf the progress modulo `stat_max` is 0, progress is displayed\\nto the user. For example, if stat_modulo is 10, progress will\\nbe displayed to the user when it reaches 10, 20, 30, etc. If\\nnot given, this defaults to 0.\\n\\n"],"achievement.steam":["renpy","var","","","var","If Steam initialized successfully, this is a namespace with high-level Steam methods. If Steam did not\\ninitialize, this is None. Always check that this is not None before calling a method.\\n\\n"],"achievement.steam.activate_overlay":["renpy","function","(dialog)","","function","Activates the Steam overlay.\\n\\n`dialog`\\nThe dialog to open the overlay to. One of \\"Friends\\", \\"Community\\",\\n\\"Players\\", \\"Settings\\", \\"OfficialGameGroup\\", \\"Stats\\", \\"Achievements\\"\\n\\n"],"achievement.steam.activate_overlay_to_store":["renpy","function","(appid, flag=None)","","function","Opens the steam overlay to the store.\\n\\n`appid`\\nThe appid to open.\\n\\n`flag`\\nOne of achievement.steam.STORE_NONE, .STORE_ADD_TO_CART, or .STORE_ADD_TO_CART_AND_SHOW.\\n\\n"],"achievement.steam.activate_overlay_to_web_page":["renpy","function","(url)","","function","Activates the Steam overlay, and opens the web page at `url`.\\n\\n"],"achievement.steam.add_timeline_event":["renpy","function","(icon, title, description, priority=0, start_offset=0.0, duration=0.0, possible_clip=None)","","function","Adds an event to the timeline.\\n\\n`icon`\\nThe icon to display for the event. This should be a string giving one of the standard steam icons,\\nor one you uploaded to Steam.\\n\\n`title`\\nThe title of the event.\\n\\n`description`\\nThe description of the event.\\n\\n`priority`\\nThe priority of the event, used to resolve conflicts. This should be an interger between 0 and 1000.\\n\\n`start_offset`\\nThe offset of the start of the event from the current time, in seconds.\\n\\n`duration`\\nThe duration of the event, in seconds.\\n\\n`possible_clip`\\nThis determines if the event can be clipped. This should be one of the achievement.steam.CLIP_PRIORITY_...\\nconstants: CLIP_PRIORITY_NONE, CLIP_PRIORITY_STANDARD, or CLIP_PRIORITY_FEATURED.\\n\\n"],"achievement.steam.cancel_ticket":["renpy","function","()","","function","Cancels the ticket returned by _renpysteam.get_session_ticket.\\n\\n"],"achievement.steam.clear_achievement":["renpy","function","(name)","","function","Clears the achievement with `name`. Call _renpysteam.store_stats to\\npush this change to the server.\\n\\n"],"achievement.steam.clear_timeline_state_description":["renpy","function","(time_delta)","","function","Clears the description of the current state in the timeline.\\n\\n"],"achievement.steam.dlc_installed":["renpy","function","(appid)","","function","Returns True if `dlc` is installed, or False otherwise.\\n\\n"],"achievement.steam.dlc_progress":["renpy","function","(appid)","","function","Reports the progress towards DLC download completion.\\n\\n"],"achievement.steam.get_account_id":["renpy","function","()","","function","Returns the user\'s account ID.\\n\\n"],"achievement.steam.get_achievement":["renpy","function","(name)","","function","Gets the state of the achievements with `name`. This returns True if the\\nachievement has been granted, False if it hasn\'t, and None if the achievement\\nis unknown or an error occurs.\\n\\n"],"achievement.steam.get_app_build_id":["renpy","function","()","","function","Returns the build ID of the installed game.\\n\\n"],"achievement.steam.get_csteam_id":["renpy","function","()","","function","Returns the user\'s full CSteamID as a 64-bit number..\\n\\n"],"achievement.steam.get_current_beta_name":["renpy","function","()","","function","Returns the name of the current beta, or None if it can\'t.\\n\\n"],"achievement.steam.get_current_game_language":["renpy","function","()","","function","Return the name of the language the user has selected.\\n\\n"],"achievement.steam.get_float_stat":["renpy","function","(name)","","function","Returns the value of the stat with `name`, or None if no such stat\\nexits.\\n\\n"],"achievement.steam.get_game_badge_level":["renpy","function","(series, foil)","","function","Gets the level of the users Steam badge for your game.\\n\\n"],"achievement.steam.get_int_stat":["renpy","function","(name)","","function","Returns the value of the stat with `name`, or None if no such stat\\nexits.\\n\\n"],"achievement.steam.get_persona_name":["renpy","function","()","","function","Returns the user\'s publicly-visible name.\\n\\n"],"achievement.steam.get_session_ticket":["renpy","function","()","","function","Gets a ticket that can be sent to the server to authenticate this user.\\n\\n"],"achievement.steam.get_steam_ui_language":["renpy","function","()","","function","Return the name of the language the steam UI is using.\\n\\n"],"achievement.steam.get_subscribed_item_path":["renpy","function","(item_id)","","function","Returns the path where an item of user-generated content was installed. Returns\\nNone if the item was not installed.\\n\\n`item_id`\\nThe item id.\\n\\n"],"achievement.steam.get_subscribed_items":["renpy","function","()","","function","Returns a list of the item ids the user has subscribed to in the steam\\nworkshop.\\n\\n"],"achievement.steam.grant_achievement":["renpy","function","(name)","","function","Grants the achievement with `name`. Call _renpysteam.store_stats to\\npush this change to the server.\\n\\n"],"achievement.steam.indicate_achievement_progress":["renpy","function","(name, cur_progress, max_progress)","","function","Indicates achievement progress to the user. This does *not* unlock the\\nachievement.\\n\\n"],"achievement.steam.install_dlc":["renpy","function","(appid)","","function","Requests the DLC with `appid` be installed.\\n\\n"],"achievement.steam.is_overlay_enabled":["renpy","function","()","","function","Returns true if the steam overlay is enabled. (This might take a while to\\nreturn true once the game starts.)\\n\\n"],"achievement.steam.is_subscribed_app":["renpy","function","(appid)","","function","Returns true if the user owns the app with `appid`, and false otherwise.\\n\\n"],"achievement.steam.list_achievements":["renpy","function","()","","function","Returns a list of achievement names.\\n\\n"],"achievement.steam.overlay_needs_present":["renpy","function","()","","function","Returns true if the steam overlay is enabled. (This might take a while to\\nreturn true once the game starts.)\\n\\n"],"achievement.steam.retrieve_stats":["renpy","function","()","","function","Retrieves achievements and statistics from Steam.\\n\\n"],"achievement.steam.set_float_stat":["renpy","function","(name, value)","","function","Sets the value of the stat with `name`, which must have the type of\\nFLOAT. Call _renpysteam.store_stats to push this change to the\\nserver.\\n\\n"],"achievement.steam.set_int_stat":["renpy","function","(name, value)","","function","Sets the value of the stat with `name`, which must have the type of\\nINT. Call _renpysteam.store_stats to push this change to the\\nserver.\\n\\n"],"achievement.steam.set_overlay_notification_position":["renpy","function","(position)","","function","Sets the position of the steam overlay. `Position` should be one of\\nachievement.steam.POSITION_TOP_LEFT, .POSITION_TOP_RIGHT, .POSITION_BOTTOM_LEFT,\\nor .POSITION_BOTTOM_RIGHT.\\n\\n"],"achievement.steam.set_timeline_state_description":["renpy","function","(description, time_delta=0.0)","","function","Sets the description of the current state in the timeline.\\n\\n`description`\\nA string giving the description of the current state.\\n\\n`time_delta`\\nThe time since the last state change.\\n\\n"],"achievement.steam.store_stats":["renpy","function","()","","function","Stores statistics and achievements on the Steam server.\\n\\n"],"achievement.steam.uninstall_dlc":["renpy","function","(appid)","","function","Requests that the DLC with `appid` be uninstalled.\\n\\n"],"achievement.steam_position":["renpy","var","= None","","var","If not None, this sets the position of the steam notification popup.\\nThis must be a string, one of \\"top left\\", \\"top right\\", \\"bottom left\\",\\nor \\"bottom right\\".\\n\\n"],"achievement.sync":["renpy","function","()","","function","Synchronizes registered achievements between local storage and\\nother backends. (For example, Steam.)\\n\\n"],"adv":["renpy","var","= Character(...)","","var","This is a template ADV-mode character, and the default character kind\\nthat is used when Character is called.\\n\\n"],"alt":["renpy","var","= ...","","var","A character-like object that uses the narrator to speak text if\\nself-voicing is enabled.\\n\\n"],"black":["renpy","image","= Solid(\\"#000\\")","","image","A solid black color."],"blinds":["renpy","var","","","var","Transitions the screen in a vertical blinds effect lasting 1\\nsecond. An instance of the ImageDissolve transition class.\\n\\n"],"bubble":["renpy","var",":","","var","A namespace that contains variables that control the display of dialogue bubbles.\\n\\n"],"bubble.clear_retain_statements":["renpy","var","= [ \\"call screen\\", \\"menu\\",  \\"say\\", \\"say-centered\\", \\"say-nvl\\", \\"scene\\", ]","","var","This is a list of statements that will automatically cause retained bubbles to be cleared.\\n\\n\\n"],"bubble.cols":["renpy","var","= 24","","var","The granularity of the grid that\'s used to position and size speech bubbles,\\nin the horizontal direction.\\n\\n"],"bubble.db_filename":["renpy","var","= \\"bubble.json\\"","","var","The database file, stored in the game directory, that contains the\\nspeech bubble information.\\n\\n\\n"],"bubble.default_area":["renpy","var","= (15, 1, 8, 5)","","var","This is the default area that speech bubbles are placed in, if no other\\narea is specified. This is a tuple of the form (x, y, w, h),\\nwhere each value is a number of grid cells.\\n\\n\\n"],"bubble.expand_area":["renpy","var","= { ... }","","var","This is a map from the name of a set of properties to a (left, top, right, bottom)\\ntuple. If found in this set, the area of the speech bubble is expanded by the\\ngiven number of pixels.\\n\\nThis makes the speech bubble bigger than the area the creator dragged out.\\nThe intent is that this can be used to drag out the body of the speech\\nbubble without concern for the tail, and also for the text itself to stay\\nput when the set of properties is changed and the tail moves.\\n\\nBy default, this is\\n\\n```\\ndefine bubble.expand_area = {\\n    \\"bottom_left\\" : (0, 0, 0, 22),\\n    \\"bottom_right\\" : (0, 0, 0, 22),\\n    \\"top_left\\" : (0, 22, 0, 0),\\n    \\"top_right\\" : (0, 22, 0, 0),\\n}\\n\\n```\\n\\n"],"bubble.properties":["renpy","var","= { ... }","","var","These are properties, apart from the area, that can be used to customize\\nthe speech bubble. This is a map from the name of a set of proprerties\\nto a dictionary of properties and values. These properties supersede those\\ngiven to the character, and are then supplied to the ``bubble`` screen.\\n\\nThis uses the same prefixing system as Character does. Properties\\nbeginning with ``window_`` have the prefix removed, and are passed to the\\ndisplayable with id \\"window\\" in the bubble screen, which is the bubble\\nitself. Properties with ``what_`` have the prefix removed, and are passed\\nto the displayable with id \\"what\\" in the bubble screen, which is the text\\nof the bubble. Properties with ``who_`` are handled similarly, and given\\nto the characters name. Properties with ``show_`` are given as arguments\\nto the bubble screen itself.\\n\\nIn a new game, screens.rpy includes\\n\\n```\\ndefine bubble.frame = Frame(\\"gui/bubble.png\\", 55, 55, 55, 95)\\n\\ndefine bubble.properties = {\\n    \\"bottom_left\\" : {\\n        \\"window_background\\" : Transform(bubble.frame, xzoom=1, yzoom=1),\\n        \\"window_bottom_padding\\" : 27,\\n    },\\n    \\n    \\"bottom_right\\" : {\\n        \\"window_background\\" : Transform(bubble.frame, xzoom=-1, yzoom=1),\\n        \\"window_bottom_padding\\" : 27,\\n    },\\n    \\n    \\"top_left\\" : {\\n        \\"window_background\\" : Transform(bubble.frame, xzoom=1, yzoom=-1),\\n        \\"window_top_padding\\" : 27,\\n    },\\n    \\n    \\"top_right\\" : {\\n        \\"window_background\\" : Transform(bubble.frame, xzoom=-1, yzoom=-1),\\n        \\"window_top_padding\\" : 27,\\n    },\\n}\\n\\n```\\n\\nThe bubble.frame variable is just used to make defining bubble.properties\\neasier. Then for each of the four styles of bubble, the bubble is flipped\\nso the tail is in the right place, and the padding is adjusted to leave\\nroom for the tail.\\n\\n"],"bubble.properties_callback":["renpy","var","= None","","var","If not None, this should be a function that takes an image tag, and returns\\na list or tuple of property names that should be used for that image tag, in\\nthe order those names should be cycled through. This takes precendence over\\nbubble.properties_order, and can be used to customize the list of bubble\\nproperties by character.\\n\\n"],"bubble.properties_order":["renpy","var","= [ ]","","var","This is a list of the names of the sets of properties, in the order they should\\nbe cycled through in the speech bubble editor. If the names of the sets of properties\\nare not given, the properties are cycled through in alphabetical order.\\n\\n"],"bubble.rows":["renpy","var","= 24","","var","The granularity of the grid that\'s used to position and size speech bubbles,\\nin the vertical direction.\\n\\n"],"build":["renpy","var",":","","var","A namespace that contains variables that control the build process.\\n\\n"],"build.allow_integrated_gpu":["renpy","var","= True","","var","Allows Ren\'Py to run on the integrated GPU on platforms that have both\\nintegrated and discrete GPUs. Right now, this is only supported on Mac\\nOS X.\\n\\n"],"build.android_permissions":["renpy","var","= [ ]","","var","This is a list of strings, with each string giving the full name\\nof an Android permission. For example, \\"android.permission.WRITE_EXTERNAL_STORAGE\\".\\nThis simply declares that the application might request these permissions, it\'s\\nnecessary to use renpy.check_permission and renpy.request_permission as necessary\\nto request the permission.\\n\\n"],"build.archive":["renpy","function","(name, file_list=\'all\')","","function","Declares the existence of an archive, whose `name` is added to the\\nlist of available archive names, which can be passed to\\nbuild.classify.\\n\\nIf one or more files are classified with `name`, `name`.rpa is\\nbuilt as an archive, and then distributed in packages including\\nthe `file_list` given here. \\n\\n```\\nbuild.archive(\\"secret\\", \\"windows\\")\\n\\n```\\n\\nIf any file is included in the \\"secret\\" archive using the\\nbuild.classify function, the file will be included inside\\nthe secret.rpa archive in the windows builds.\\n\\nAs with the build.classify function, if the name given as\\n`file_list` doesn\'t exist as a file list name, it is created and\\nadded to the set of valid file lists.\\n\\n"],"build.change_icon_i686":["renpy","var","= True","","var","If True, and icon.ico exists, the icon of the 32-bit Windows executable\\nwill be changed. If False, the icon will not be changed. Setting this\\nto False may prevent some antivirus programs from producing a false\\npositive for your game.\\n\\n"],"build.classify":["renpy","function","(pattern, file_list)","","function","Classifies files that match `pattern` into `file_list`, which can\\nalso be an archive name.\\n\\nIf the name given as `file_list` doesn\'t exist as an archive or file\\nlist name, it is created and added to the set of valid file lists.\\n\\n"],"build.clear":["renpy","function","()","","function","Clears the list of patterns used to classify files.\\n\\n"],"build.destination":["renpy","var","= \\"{directory_name}-dists\\"","","var","Gives the path to the directory the archive files will be placed in. This\\nmay be an absolute or a relative path. A relative path is considered to\\nbe relative to the projects directory.\\n\\nThe following values are substituted in using Python\'s ``str.format`` function.\\n\\n``{directory_name}``\\nThe value of build.directory_name.\\n\\n``{executable_name}``\\nThe value of build.executable_name.\\n\\n``{version}``\\nThe value of build.version.\\n\\n"],"build.directory_name":["renpy","var","= \\"...\\"","","var","This is used to create the names of directories in the archive\\nfiles. For example, if this is set to \\"mygame-1.0\\", the Linux\\nversion of the project will unpack to \\"mygame-1.0-linux\\".\\n\\nThis is also used to determine the name of the directory in\\nwhich the package files are placed. For example, if you set\\nbuild.directory_name to mygame-1.0, the archive files will\\nbe placed in mygame-1.0-dists in the directory above the base\\ndirectory.\\n\\nThis variable should not contain special characters like spaces,\\ncolons, and semicolons. If not set, it defaults to build.name\\na dash, and config.version.\\n\\n"],"build.documentation":["renpy","function","(pattern)","","function","Declares a pattern that matches documentation. In a mac app build,\\nfiles matching the documentation pattern are stored twice - once\\ninside the app package, and again outside of it.\\n\\n"],"build.exclude_empty_directories":["renpy","var","= True","","var","If true, empty directories (including directories left empty by\\nfile archiving) will be removed from generated packages. If false,\\nempty directories will be included.\\n"],"build.executable":["renpy","function","(pattern)","","function","Adds a pattern marking files as executable on platforms that support it.\\n(Linux and Macintosh)\\n\\n"],"build.executable_name":["renpy","var","= \\"...\\"","","var","This variable controls the name of the executables that the user\\nclicks on to start the game.\\n\\nThis variable should not contain special characters like spaces,\\ncolons, and semicolons. If not set, it defaults to build.name.\\n\\nFor example, if this is set to \\"mygame\\", the user will be able\\nto run mygame.exe on Windows, mygame.app on Macintosh, and\\nmygame.sh on Linux.\\n\\n"],"build.game_only_update":["renpy","var","= False","","var","If true, build.include_update is enabled, and\\nthe \\"Game-Only Update for Mobile\\" package becomes available.\\n"],"build.include_i686":["renpy","var","= True","","var","If true, files necessary to run on 32-bit x86 processors will be included\\nin the Linux and Mac builds. If False, these files will not be included.\\n\\n"],"build.include_old_themes":["renpy","var","= True","","var","When true, files required to support themes that existed before Ren\'Py\\n6.99.9 will be included in the build. When false, such files are excluded.\\n\\nThis is set to False when gui.init is called.\\n\\n"],"build.include_update":["renpy","var","= False","","var","When true, Ren\'Py will produce the files required for the updater\\nto work.\\n\\n"],"build.info":["renpy","var","= { }","","var","This variable lets you store information that will be placed into\\nthe game/cache/build_info.json file in the built game. When the built\\ngame starts, game/cache/build_info.json is loaded and the contents\\nplaced into this variable.\\n\\nGenerally, you\'ll want to check that a field does not exist, and\\nset it, using setdefault.\\n\\nFor example, this stores the name of the computer that built the\\ngame in the build_info.json file\\n\\n```\\npython hide:\\n    import socket\\n    build.info.setdefault(\\"build_host\\", socket.gethostname())\\n    \\n```\\n\\nThe information in this variable needs to be of types that can be\\nplaced in JSON files. (That is, None, booleans, strings,\\nnumbers, lists, and dictionaries)\\n\\n\\n"],"build.itch_channels":["renpy","var","= { ... }","","var","This maps a filename pattern (such as \\"\\\\*-win.zip\\") to a string giving\\nthe itch channel the file should be uploaded to. This defaults to\\n\\n```\\n{\\n    \\"*-all.zip\\" : \\"win-osx-linux\\",\\n    \\"*-market.zip\\" : \\"win-osx-linux\\",\\n    \\"*-pc.zip\\" : \\"win-linux\\",\\n    \\"*-win.zip\\" : \\"win\\",\\n    \\"*-mac.zip\\" : \\"osx\\",\\n    \\"*-linux.tar.bz2\\" : \\"linux\\",\\n    \\"*-release.apk\\" : \\"android\\",\\n}\\n\\n```\\n\\n"],"build.itch_project":["renpy","var","= None","","var","Setting this allows the Ren\'Py launcher to upload your project to\\nitch.io. This should be set to the name of a project registered\\nwith itch. (For example, \\"renpytom/the-question\\").\\n\\nOnce this is set, after the distributions have been built, you can\\nclick \\"Build distributions\\", \\"Upload to itch.io\\" to cause an upload\\nto occur.\\n\\n"],"build.mac_info_plist":["renpy","var","= { }","","var","This is a dictionary mapping strings to strings, that can be used to\\nadd or override keys in the mac\'s Info.plist file.\\n\\n"],"build.name":["renpy","var","= \\"...\\"","","var","This is used to automatically generate build.directory_name\\nand build.executable_name, if neither is set. This should not\\ncontain spaces, colons, or semicolons.\\n\\n"],"build.package":["renpy","function","(name, format, file_lists, description=None, update=True, dlc=False, hidden=False, update_only=False)","","function","Declares a package that can be built by the packaging\\ntool.\\n\\n`name`\\nThe name of the package.\\n\\n`format`\\nThe format of the package. A string containing a space separated\\nlist of:\\n\\nzip\\nA zip file.\\ntar.bz2\\nA tar.bz2 file.\\ndirectory\\nA directory containing the files.\\ndmg\\nA Macintosh DMG containing the files.\\napp-zip\\nA zip file containing a macintosh application. This format\\ndoesn\'t support the Ren\'Py updater.\\napp-directory\\nA directory containing the mac app. This format\\ndoesn\'t support the Ren\'Py updater.\\napp-dmg\\nA macintosh drive image containing a dmg. (Mac only.) This format\\ndoesn\'t support the Ren\'Py updater.\\nbare-zip\\nA zip file without build.directory_name\\nprepended.\\nbare-tar.bz2\\nA zip file without build.directory_name\\nprepended.\\nnull\\nUsed to produce only updates, without the main package.\\n\\nThe empty string will not build any package formats (this\\nmakes dlc possible).\\n\\n`file_lists`\\nA list containing the file lists that will be included\\nin the package.\\n\\n`description`\\nAn optional description of the package to be built.\\n\\n`update`\\nIf true and updates are being built, an update will be\\nbuilt for this package.\\n\\n`dlc`\\nIf true, any zip or tar.bz2 file will be built in\\nstandalone DLC mode, without an update directory.\\n\\n`hidden`\\nIf true, this will be hidden from the list of packages in\\nthe launcher.\\n\\n"],"build.time":["renpy","var","= None","","var","This variable defaults to None, but if your game has been built,\\nit will be set to the time the game was built, in seconds since\\nJanuary 1, 1970.\\n\\n"],"build.update_formats":["renpy","var","= [ \\"rpu\\" ]","","var","This is a list of formats that the updater will build. The default,\\n\\"rpu\\" is supported from Ren\'Py 7.7 and 8.2 on. If you need to support\\nupdating using the earlier zsync-based updates, add \\"zsync\' to the\\nlist.\\n\\n"],"center":["renpy","var","","","var","Centers horizontally, and aligns to the bottom of the screen.\\n\\n"],"config":["renpy","var",":","","var","A namespace that contains variables that control the configuration of Ren\'Py. These variables should\\nbe set at init time (in ``init python`` blocks or with the ``define``) and should not be changed once the game\\nhas started.\\n\\n"],"config.automatic_steam_timeline":["renpy","var","= True","","var","If true, when run under Steam, the game will automatically update the Steam Timeline.\\n\\nThis currently consists of:\\n\\n* Updating the state description to match save_name, if the variables is set.\\n* Updating the game mode to reflect when the player is inside a menu.\\n\\n\\n"],"config.custom_text_tags":["renpy","var","= { }","","var","Maps text tag names to text tag functions, when the text tag can\\nwrap other text.\\n\\n\\n"],"config.descriptive_text_character":["renpy","var","= None","","var","If not None, this should be a character object that is used to\\ndisplay the descriptive text, instead of the narrator.\\n\\n"],"config.dispatch_gesture":["renpy","var",": Callable","","var","The function that is used to dispatch gestures. This function is\\npassed the raw gesture string. If it returns non-None, the\\ninteraction ends.\\n\\n"],"config.gestures":["renpy","var","= { \\"n_s_w_e_w_e\\" : \\"progress_screen\\" }","","var","A map from gesture to the event activated by the gesture.\\n\\n"],"config.gl_blend_func":["renpy","var","= { ... }","","var","A dictionary used to map a blend mode name to a blend function. The\\nblend modes are supplied to the blend func property, given below.\\n\\n"],"config.language":["renpy","var","= None","","var","If not None, sets the language to use at game launch, overriding\\nany memorized choice made by the user.\\n\\n"],"config.log_gl_shaders":["renpy","var","= False","","var","If true, source code for the GLSL shader programs will be written to\\nlog.txt on start.\\n\\n\\n"],"config.log_live2d_loading":["renpy","var","= False","","var","If True, loaded path and used motions and expressions will be written to\\nlog.txt on start.\\n\\n"],"config.nvl_layer":["renpy","var","= \\"screens\\"","","var","The layer the nvl screens are shown on.\\n\\n"],"config.nvl_list_length":["renpy","var","= None","","var","If not None, the maximum length of the the list of NVL dialogue.\\nThis can be set (often in conjuction with forcing the dialogue to\\nhave a fixed height) in order to emulate an infinite scrolling\\nNVL window.\\n\\n"],"config.nvl_page_ctc":["renpy","var","= None","","var","If not None, this is the click-to-continue indicator that is used for NVL mode\\ncharacters that are at the end of a page. (That is, immediately\\nfollowed by an nvl clear statement.) This replaces the ctc parameter\\nof Character.\\n\\n"],"config.nvl_page_ctc_position":["renpy","var","= \\"nestled\\"","","var","If not None, this is the click-to-continue indicator position that is used for NVL mode\\ncharacters that are at the end of a page. (That is, immediately\\nfollowed by an nvl clear statement.) This replaces the ctc_position parameter\\nof Character.\\n\\n"],"config.nvl_paged_rollback":["renpy","var","= False","","var","If true, NVL-mode rollback will occur a full page at a time.\\n\\n"],"config.perspective":["renpy","var","= (100, z, 100000)","","var","The default value used when perspective is not set to a 3-tuple.\\n``z`` depends on the size of the game, as defined above.\\n\\n\\n"],"config.self_closing_custom_text_tags":["renpy","var","= { }","","var","Maps text tag names to a self-closing text tag functions, when the text tag\\ndoes not wrap other text.\\n\\n"],"config.steam_appid":["renpy","var","= None","","var","If not None, this should be the Steam appid. Ren\'Py will automatically\\nset this appid when it starts. This needs to be set using the define\\nstatement\\n\\n```\\ndefine config.steam_appid = 12345\\n\\n```\\n\\n"],"default":["renpy","var","","","var","Centers horizontally, and aligns to the bottom of the screen. This\\ncan be redefined via config.default_transform to change the\\ndefault placement of images shown with the show or scene statements.\\n\\n"],"default_mouse":["renpy","var","","","var","This is undefined by default. If defined, and if config.mouse is\\nset at game startup, this is a key that is used to look up a mouse cursor\\nwhen the current cursor does not exist, or is the default. This is used by\\nconfig.mouse and MouseDisplayable.\\n\\nSee mouse for more information.\\n\\n"],"defaultdict":["renpy","class","(default_factory, /, *args, **kwargs)","","class","This is a revertable version of collections.defaultdict. It takes a\\nfactory function. If a key is accessed that does not exist, the `default_factory`\\nfunction is called with the key as an argument, and the result is\\nreturned.\\n\\nWhile the default_factory attribute is present on this object, it does not\\nparticipate in rollback, and so should not be changed.\\n\\n"],"define":["renpy","var",":","","var","The define namespace contains functions that define new variables, such as families of transitions.\\n\\n"],"define.move_transitions":["renpy","function","(prefix, delay, time_warp=None, in_time_warp=None, out_time_warp=None, old=False, layers=[\'master\'], **kwargs)","","function","This defines a family of move transitions,\\nsimilar to the move and ease transitions. For a given\\n`prefix`, this defines the transitions:\\n\\n* *prefix* - A transition that takes `delay` seconds to move images that\\nchanged positions to their new locations.\\n\\n* *prefix*\\\\ inleft, *prefix*\\\\ inright, *prefix*\\\\ intop, *prefix*\\\\ inbottom - Transitions\\nthat take `delay` seconds to move images that changed positions to their\\nnew locations, with newly shown images coming in from the appropriate\\nside.\\n\\n* *prefix*\\\\ outleft, *prefix*\\\\ outright, *prefix*\\\\ outtop, *prefix*\\\\ outbottom -\\nTransitions that take `delay` seconds to move images that changed\\npositions to their new locations, with newly hidden images leaving via\\nthe appropriate side.\\n\\nThe other parameters are as MoveTransition takes them:\\n\\n`time_warp`, `in_time_warp`, `out_time_warp`\\nTime warp functions that are given a time from 0.0\\nto 1.0 representing the fraction of the move that is complete, and\\nreturn a value in the same range giving the fraction of a linear\\nmove that is complete.\\n\\nThis can be used to define functions that ease the images around,\\nrather than moving them at a constant speed.\\n\\nThe three arguments are used for images remaining on the screen,\\nnewly shown images, and newly hidden images, respectively.\\n\\n`old`\\nIf true, when a tag gets its image changed during the transition,\\nthe old image will be used in preference to the new one. Otherwise,\\nthe new images will be used.\\n\\n`layers`\\nThe layers the transition will apply to.\\n\\n\\n\\n```\\n# This defines all of the pre-defined transitions beginning\\n# with \\"move\\".\\ninit python:\\n    define.move_transitions(\\"move\\", 0.5)\\n    \\n```\\n\\n"],"director":["renpy","var",":","","var","The director namespace contains functions that control the interactive director, which\\nlets you insert images and music into the game interactively.\\n\\n"],"director.audio_channel_patterns":["renpy","var","= { }","","var","A map from a channel name to the list of audio patterns that are\\navailable in that audio channel. For example, if this is set to\\n``{ \'sound\' : [ \'sound/*.opus\' ], \'music\' : [ \'music/*.opus\' ] }`` the\\nmusic and sound channels get their own lists of patterns.\\n\\n"],"director.audio_channels":["renpy","var","= [ \\"music\\", \\"sound\\", \\"audio\\" ]","","var","The name of the audio channels that can be used with the play, show\\nand stop statements.\\n\\n"],"director.audio_patterns":["renpy","var","= [ \\"*.opus\\", \\"*.ogg\\", \\"*.mp3\\" ]","","var","The default list of audio patterns that are used to match the files\\navailable in an audio channel.\\n\\n"],"director.button":["renpy","var","= True","","var","If True, the director displays a screen with a button to access the\\ndirector window. If False, the game can provide it\'s own access, by\\nmaking available the director.Start action.\\n\\n"],"director.director_spacing":["renpy","var","= 0","","var","The spacing between two consecutive director lines.\\n\\n"],"director.other_spacing":["renpy","var","= 0","","var","The spacing between two consecutive non-director lines.\\n\\n"],"director.scene_tags":["renpy","var","= { \\"bg\\" }","","var","The set of tags that will be presented for the scene statement, and hidden\\nfrom the show statement.\\n\\n"],"director.show_tags":["renpy","var","= set()","","var","If not empty, only the tags present in this set will be presented for the\\nshow statement.\\n\\n"],"director.spacing":["renpy","var","= 1","","var","The spacing between a director (scene, show, hide, with, play, queue, and voice) line\\nand a non-director line, or vice versa. These spacings should be 0 or 1 lines, a higher spacing\\nmay not work.\\n\\n"],"director.tag_blacklist":["renpy","var","= { \\"black\\", \\"text\\", \\"vtext\\" }","","var","A blacklist of tags that will not be shown for the show, scene, or hide\\nstatements.\\n\\n"],"director.transforms":["renpy","var","= [ \\"left\\", \\"center\\", \\"right\\" ]","","var","A list of transforms that will be presented as part of the editor.\\nIn addition to these, any transform defined using the transform\\nstatement outside of Ren\'Py itself will be added to the list of\\ntransforms, which is then sorted.\\n\\n"],"director.transitions":["renpy","var","= [ \\"dissolve\\", \\"pixellate\\" ]","","var","A list of transitions that are available to the with statement. Since\\ntransitions can\'t be auto-detected, these must be added manually.\\n\\n"],"director.viewport_height":["renpy","var","= 280","","var","The maximum height of scrolling viewports used by the director.\\n\\n"],"director.voice_channel":["renpy","var","= \\"voice\\"","","var","The name of the audio channel used by voice.\\n\\n"],"dissolve":["renpy","var","","","var","Takes 0.5 seconds to dissolve from the old to the new screen. An\\ninstance of the Dissolve transition class.\\n\\n"],"ease":["renpy","var","","","var","Also: **easeinright, easeinleft, easeintop, easeinbottom, easeoutright, easeoutleft, easeouttop, easeoutbottom**\\n\\nThese are similar to the move- family of transitions, except that\\nthey use a cosine-based curve to slow down the start and end of\\nthe transition.\\n\\n"],"emscripten.run_script":["renpy","function","(script)","","function","Runs the given Javascript script. This does not return a result.\\n\\n"],"emscripten.run_script_int":["renpy","function","(script)","","function","Runs the given Javascript script, and returns its result as an integer.\\n\\n"],"emscripten.run_script_string":["renpy","function","(script)","","function","Runs the given Javascript script, and returns its result as a string.\\n\\n"],"fade":["renpy","var","","","var","Takes 0.5 seconds to fade to black, and then 0.5 seconds to\\nfade to the new screen. An instance of the Fade transition\\nclass.\\n\\n"],"gui":["renpy","var","","","var","The gui namespace contains functions that control the default GUI system. These variables only matter\\nif you are using the default GUI system, and may not be used if you\'ve replaced it. Define statements that\\naffect the gui namespace are re-run when the translaton changes.\\n\\n"],"gui.FONT_SCALE":["renpy","var","= 1.0","","var","A scaling factor that is applied to all text in the launcher.\\n\\n"],"gui.LIGHT_FONT":["renpy","var","= \\"Roboto-Light.ttf\\"","","var","The path to the font used for normal text in the launcher.\\n\\n"],"gui.REGULAR_BOLD":["renpy","var","= False","","var","If True, heavy-weight text is bolded.\\n\\n"],"gui.REGULAR_FONT":["renpy","var","= \\"Roboto-Regular.ttf\\"","","var","The path to the font used for heavy-weight text in the launcher.\\n\\n"],"gui.SetPreference":["renpy","function","(name, value, rebuild=True)","","function","This Action sets the gui preference with `name` to `value`.\\n\\n`rebuild`\\nIf true, the default, gui.rebuild is called to make\\nthe changes take effect. This should generally be true, except\\nin the case of multiple gui.SetPreference actions, in which case\\nit should be False in all but the last one.\\n\\nThis is a very slow action, and probably not suitable for use\\nwhen a button is hovered.\\n\\n"],"gui.TogglePreference":["renpy","function","(name, a, b, rebuild=True)","","function","This Action toggles the gui preference with `name` between\\nvalue `a` and value `b`. It is selected if the value is equal\\nto `a`.\\n\\n`rebuild`\\nIf true, the default, gui.rebuild is called to make\\nthe changes take effect. This should generally be true, except\\nin the case of multiple gui.SetPreference actions, in which case\\nit should be False in all but the last one.\\n\\nThis is a very slow action, and probably not suitable for use\\nwhen a button is hovered.\\n\\n"],"gui.accent_color":["renpy","var","= \'#000060\'","","var","The accent color is used in many places in the GUI, including titles\\nand labels.\\n\\n"],"gui.button_properties":["renpy","function","(kind)","","function","Given a `kind` of button, returns a dictionary giving standard style\\nproperties for that button. This sets:\\n\\nbackground\\nAs described below.\\n\\npadding\\nTo gui.kind_borders.padding (if it exists).\\n\\nxsize\\nTo gui.kind_width (if it exists).\\n\\nysize\\nTo gui.kind_height (if it exists).\\n\\n(Note that if `kind` is the string \\"nvl_button\\", this will look for\\nthe gui.nvl_button_background variable.)\\n\\nThe background is a frame that takes its background picture from\\nthe first existing one of:\\n\\n* gui/button/kind_[prefix\\\\_].background.png\\n* gui/button/[prefix\\\\_].background.png\\n\\nIf a gui variables named gui.kind_borders exists, it\'s\\nused. Otherwise, gui.button_borders is used. If gui.kind_tile\\nexists, it determines if the borders are tiled, else gui.button_tile\\ncontrols tiling.\\n\\nFor what [prefix\\\\_] means, check out the style prefix search\\ndocumentation.\\n\\n"],"gui.button_text_properties":["renpy","function","(kind=None, accent=False):","","function","An obsolete alias for gui.text_properties.\\n\\n"],"gui.choice_button_text_hover_color":["renpy","var","= \'#0066cc\'","","var","The color used for the text of focused choice buttons.\\n\\n"],"gui.choice_button_text_idle_color":["renpy","var","= \'#888888\'","","var","The color used for the text of unfocused choice buttons.\\n\\n"],"gui.hover_color":["renpy","var","= \'#3284d6\'","","var","The color used by focused items in the GUI, including the text of\\nof buttons and the thumbs (movable areas) of sliders and scrollbars.\\n\\n"],"gui.idle_color":["renpy","var","= \'#606060\'","","var","The color used for most buttons when not focused or selected.\\n\\n"],"gui.idle_small_color":["renpy","var","= \'#404040\'","","var","The color used for small text (like the date and name of a save slot,\\nand quick menu buttons) when not hovered. This color often needs to be a\\nbit lighter or darker than idle_color to compensate for the smaller size\\nof the font.\\n\\n"],"gui.init":["renpy","function","(width, height, fov=75)","","function","Initializes the gui.\\n\\n`width`\\nThe width of the default window.\\n\\n`height`\\nThe height of the default window.\\n\\n`fov`\\nThe field of view of the 3d stage.\\n\\n"],"gui.insensitive_color":["renpy","var","= \'#8888887f\'","","var","The color used by the text of buttons that are insensitive to user input.\\n(For example, the rollback button when no rollback is possible.)\\n\\n"],"gui.interface_text_color":["renpy","var","= \'#404040\'","","var","The color used by static text in the game interface, such as text on the\\nhelp and about screens.\\n\\n"],"gui.muted_color":["renpy","var","= \'#6080d0\'","","var",".. var:: gui.hover_muted_color = \'#8080f0\'\\n\\nMuted colors, used for the sections of bars, scrollbars, and sliders that\\ndo not represent the value or visible area. (These are only used when\\ngenerating images, and will not take effect until images are regenerated\\nin the launcher.)\\n\\nIn additional to gui.text_font, the following variables selects the\\nfonts used for text. These fonts should also be placed in the game directory.\\n\\n.. var:: gui.interface_text_font = \\"ArchitectsDaughter.ttf\\"\\n\\nThe font used for text for user interface elements, like the main and\\ngame menus, buttons, and so on.\\n\\n.. var:: gui.system_font = \\"DejaVuSans.ttf\\"\\n\\nThe font used for system text, like exception messages and the shift+A\\naccessibility menu. This should be able to handle both ASCII and the\\ngame\'s translated language.\\n\\n.. var:: gui.glyph_font = \\"DejaVuSans.ttf\\"\\n\\nA font used for certain glyphs, such as the arrow glyphs used by the skip\\nindicator. DejaVuSans is a reasonable default for these glyphs, and is\\nautomatically included with every Ren\'Py game.\\n\\nIn addition to gui.text_size and gui.name_text_size, the following\\nvariables control text sizes.\\n\\n.. var:: gui.interface_text_size = 36\\n\\nThe size of static text in the game\'s user interface, and the default size\\nof button text in the game\'s interface.\\n\\n.. var:: gui.label_text_size = 45\\n\\nThe size of section labels in the game\'s user interface.\\n\\n.. var:: gui.notify_text_size = 24\\n\\nThe size of notification text.\\n\\n.. var:: gui.title_text_size = 75\\n\\nThe size of the game\'s title.\\n\\n.. ifconfig:: renpy_figures\\n\\n.. figure:: gui/text.jpg\\n:width: 100%\\n\\nThe game menu after customizing text colors, fonts, and sizes.\\n\\nBorders\\n-------\\n\\nThere are a number of GUI components – such as buttons and bars – that use\\nscalable backgrounds configured using Border objects. Before discussing,\\nhow to customize buttons and bars, we\'ll first describe how this works.\\n\\nBorders are given to the Frame displayable.\\nA Frame takes an image, and divides it into nine parts – the four corners,\\nthe four sides, and the center. The corners always remain the same size,\\nthe left and right sides are stretched vertically, the top and bottom sides\\nare stretched horizontally, and the center is stretched in both directions.\\n\\nA Borders object gives the size of each of the borders, in left, top, right,\\nbottom order. So if the following border image is used:\\n\\n.. image:: oshs/game/images/borders.png\\n\\nalong with the following borders\\n\\n```\\nBorders(40, 40, 40, 40)\\n\\n```\\n\\none possible result is this:\\n\\n.. image:: gui/borders1.png\\n\\nAs the child changes size, so will the background.\\n\\nA Border object can also be given padding, including negative padding that\\ncauses the child to overlap the borders. For example, these borders\\n\\n```\\nBorders(40, 40, 40, 40, -20, -20, -20, -20)\\n\\n```\\n\\nallow the child to overlap the sides. Note that due to this overlap, the\\nresult is smaller, since the borders themselves now take up less space.\\n\\n.. image:: gui/borders2.png\\n\\nBorders can also be tiled, rather than scaled. This is invoked by variables,\\nand produces this result.\\n\\n.. image:: gui/borders3.png\\n\\nThese example images are a bit ugly, since we need to show what\'s going on.\\nIn practice, this system can produce quite pleasing results. This is the case when\\na Frame displayable is used as the background of a frame window holding\\nuser interface components.\\n\\nThese frame windows can be customized in two ways. The first is by changing the\\nbackground image file:\\n\\ngui/frame.png\\nThe image used as the background of frames windows.\\n\\nAnd the second is by customizing variables.\\n\\n.. var:: gui.frame_borders = Borders(15, 15, 15, 15)\\n\\nThe borders applied to frame windows.\\n\\n.. var:: gui.confirm_frame_borders = Borders(60, 60, 60, 60)\\n\\nThe borders applied to the fame used in the confirm screen.\\n\\n.. var:: gui.frame_tile = True\\n\\nIf true, the sides and center of the confirm screen are tiled. If false,\\nthey are scaled.\\n\\n.. ifconfig:: renpy_figures\\n\\n.. figure:: oshs/game/gui/frame.png\\n:width: 100%\\n\\nAn example gui/frame.png image.\\n\\n.. figure:: gui/frame_confirm.jpg\\n:width: 100%\\n\\nThe confirm screen after applying the customizations given\\nabove.\\n\\nButtons\\n-------\\n\\nThe Ren\'Py user interface includes a large number of buttons, buttons\\nthat come in different sizes and that are used for different purposes.\\nThe various kinds of buttons are:\\n\\nbutton\\nA basic button. Used for navigation within the user interface.\\n\\nchoice_button\\nA button used for choices in the in-game menu.\\n\\nquick_button\\nA button, displayed in-game, that is intended to allow quick access\\nto the game menu.\\n\\nnavigation_button\\nA button used in main and game menu for navigation between screens,\\nand to start the game.\\n\\npage_button\\nA button used to switch between pages on the load and save screens.\\n\\nslot_button\\nButtons that represent file slots, and contain a thumbnail, the save\\ntime, and an optional save name. These are described in more detail\\nbelow.\\n\\nradio_button\\nA button used for multiple-choice preferences on the preferences\\nscreen.\\n\\ncheck_button\\nA button used for toggleable preferences on the preferences screen.\\n\\ntest_button\\nA button used to test audio playback on the preferences screen. This\\nshould be the same height as a horizontal slider.\\n\\nhelp_button\\nA button used to select what kind of help the player wants.\\n\\nconfirm_button\\nA button used on the confirm screen to select yes or no.\\n\\nnvl_button\\nA button used for an NVL-mode menu choice.\\n\\nThe following image files are used to customize button backgrounds,\\nif they exist.\\n\\ngui/button/idle_background.png\\nThe background image used by buttons that are not focused.\\n\\ngui/button/hover_background.png\\nThe background image used by buttons that are focused.\\n\\ngui/button/selected_idle_background.png\\nThe background image used by buttons that are selected but not\\nfocused. This is optional, and is used in preference to\\nidle_background.png if it exists.\\n\\ngui/button/selected_hover_background.png\\nThe background image used by buttons that are selected but not\\nfocused. This is optional, and is used in preference to\\nhover_background.png if it exists.\\n\\nMore specific backgrounds can be given for each kind of button, by\\nprefixing it with the kind. For example, gui/button/check_idle_background.png\\nis used as the background of check buttons that are not focused.\\n\\nFour image files are used as foreground decorations on radio and check\\nbuttons, to indicate if the option is chosen or not.\\n\\ngui/button/check_foreground.png, gui/button/radio_foreground.png\\nThese images are used when a check or radio button is not selected.\\n\\ngui/button/check_selected_foreground.png, gui/button/radio_selected_foreground.png\\nThese images are used when a check or radio button is selected.\\n\\n\\nThe following variables set various properties of buttons:\\n\\n.. var:: gui.button_width = None\\n.. var:: gui.button_height = 64\\n\\nThe width and height of a button, in pixels. If None, the size is\\nautomatically determined based on the size of the text inside a button,\\nand the borders given below.\\n\\n.. var:: gui.button_borders = Borders(10, 10, 10, 10)\\n\\nThe borders surrounding a button, in left, top, right, bottom order.\\n\\n.. var:: gui.button_tile = True\\n\\nIf true, the sides and center of the button background are tiled to\\nincrease or  decrease their size. If false, the sides and center are\\nscaled.\\n\\n.. var:: gui.button_text_font = gui.interface_font\\n.. var:: gui.button_text_size = gui.interface_text_size\\n\\nThe font and size of the button text.\\n\\n.. var:: gui.button_text_idle_color = gui.idle_color\\n.. var:: gui.button_text_hover_color = gui.hover_color\\n.. var:: gui.button_text_selected_color = gui.accent_color\\n.. var:: gui.button_text_insensitive_color = gui.insensitive_color\\n\\nThe color of the button text in various states.\\n\\n.. var:: gui.button_text_xalign = 0.0\\n\\nThe horizontal alignment of the button text. 0.0 is left-aligned,\\n0.5 is centered, and 1.0 is right-aligned.\\n\\n.. var:: gui.button_image_extension = \\".png\\"\\n\\nThe extension for button images. This could be changed to .webp\\nto use WEBP button images instead of png ones.\\n\\nThese variables can be prefixed with the button kind to configure a\\nproperty for a particular kind of button. For example,\\ngui.choice_button_text_idle_color configures the color of\\nan idle choice button.\\n\\nFor example, we customize these variables in our sample game.\\n\\n.. var:: gui.navigation_button_width = 290\\n\\nIncreases the width of navigation buttons.\\n\\n.. var:: gui.radio_button_borders = Borders(40, 10, 10, 10)\\n.. var:: gui.check_button_borders = Borders(40, 10, 10, 10)\\n\\nIncreases the width of radio and check button borders, leaving extra\\nspace on the left for the check mark.\\n\\n\\n.. ifconfig:: renpy_figures\\n\\nHere\'s an example of how the play screen can be customized.\\n\\n.. figure:: oshs/game/gui/button/idle_background.png\\n\\nAn example gui/button/idle_background.png image.\\n\\n.. figure:: oshs/game/gui/button/hover_background.png\\n\\nAn example gui/button/hover_background.png image.\\n\\n.. figure:: oshs/game/gui/button/check_foreground.png\\n\\nAn image that can be used as gui/button/check_foreground.png and\\ngui/button/radio_foreground.png.\\n\\n.. figure:: oshs/game/gui/button/check_selected_foreground.png\\n\\nAn image that can be used as gui/button/check_selected_foreground.png and\\ngui/button/radio_selected_foreground.png.\\n\\n.. figure:: gui/button_preferences.jpg\\n:width: 100%\\n\\nThe preferences screen with the customizations described in this\\nsection applied.\\n\\nSave Slot Buttons\\n------------------\\n\\nThe load and save screens use slot buttons, which are buttons that present\\na thumbnail and information about when the file was saved. The following\\nvariables are quite useful when it comes to customizing the size of\\nthe save slots.\\n\\n.. var:: gui.slot_button_width = 414\\n.. var:: gui.slot_button_height = 309\\n\\nThe width and height of the save slot button.\\n\\n.. var:: gui.slot_button_borders = Borders(15, 15, 15, 15)\\n\\nThe borders applied to each save slot.\\n\\nconfig.thumbnail_width = 384 and config.thumbnail_height = 216\\nset the width and height of the save thumbnails. Note that these live in\\nthe config namespace, not the gui namespace. These do not take effect\\nuntil the file is saved and loaded.\\n\\n.. var:: gui.file_slot_cols = 3\\n.. var:: gui.file_slot_rows = 2\\n\\nThe number of columns and rows in the grid of save slots.\\n\\nThere are the background images used for save slots.\\n\\ngui/button/slot_idle_background.png\\nThe image used for the background of save slots that are not focused.\\n\\ngui/button/slot_hover_background.png\\nThe image used for the background of save slots that are focused.\\n\\n.. ifconfig:: renpy_figures\\n\\nPutting those to use, we get:\\n\\n.. figure:: oshs/game/gui/button/slot_idle_background.png\\n\\nAn example gui/button/slot_idle_background.png image.\\n\\n.. figure:: oshs/game/gui/button/slot_hover_background.png\\n\\nAn example gui/button/slot/slot_hover_background.png image.\\n\\n.. figure:: gui/slot_save.jpg\\n\\nThe save screen after applying the customizations given in this\\nsection.\\n\\nSliders\\n-------\\n\\nSliders are a type of bar that is used in the preferences screen to\\nallow the player to adjust preference with a large number of values.\\nBy default, the GUI only uses horizontal sliders, but a game\\nmay also use vertical sliders.\\n\\nSliders are customized with the following images:\\n\\ngui/slider/horizontal_idle_bar.png, gui/slider/horizontal_hover_bar.png, gui/slider/vertical_idle_bar.png, gui/slider/vertical_hover_bar.png\\nImages used for vertical and idle bar backgrounds in idle and\\nhover states.\\n\\ngui/slider/horizontal_idle_thumb.png, gui/slider/horizontal_hover_thumb.png, gui/slider/vertical_idle_thumb.png, gui/slider/vertical_hover_thumb.png\\nImages used for the thumb – the movable part of the bar.\\n\\nThe following variables are also used:\\n\\n.. var:: gui.slider_size = 64\\n\\nThe height of horizontal sliders, and width of vertical sliders.\\n\\n.. var:: gui.slider_tile = True\\n\\nIf true, the frame containing the bar of a slider is tiled. If False,\\nif it scaled.\\n\\n.. var:: gui.slider_borders = Borders(6, 6, 6, 6)\\n.. var:: gui.vslider_borders = Borders(6, 6, 6, 6)\\n\\nThe borders that are used with the Frame containing the bar image.\\n\\n.. ifconfig:: renpy_figures\\n\\nHere\'s an example of how we customize the horizontal slider.\\n\\n.. figure:: oshs/game/gui/slider/horizontal_idle_bar.png\\n\\nAn example gui/slider/horizontal_idle_bar.png image.\\n\\n.. figure:: oshs/game/gui/slider/horizontal_hover_bar.png\\n\\nAn example gui/slider/horizontal_hover_bar.png image.\\n\\n.. figure:: oshs/game/gui/slider/horizontal_idle_thumb.png\\n\\nAn example gui/slider/horizontal_idle_thumb.png image.\\n\\n.. figure:: oshs/game/gui/slider/horizontal_hover_thumb.png\\n\\nAn example gui/slider/horizontal_hover_thumb.png image.\\n\\n.. figure:: gui/slider_preferences.jpg\\n:width: 100%\\n\\nThe preferences screen after applying the customizations given in this\\nsection.\\n\\n\\n\\nScrollbars\\n----------\\n\\nScrollbars are bars that are used to scroll viewports. In the GUI,\\nthe most obvious place a scrollbar is used is the history screen,\\nbut vertical scrollbars can be used on other screens as well.\\n\\nSliders are customized with the following images:\\n\\ngui/scrollbar/horizontal_idle_bar.png, gui/scrollbar/horizontal_hover_bar.png, gui/scrollbar/vertical_idle_bar.png, gui/scrollbar/vertical_hover_bar.png\\nImages used for vertical and idle bar backgrounds in idle and\\nhover states.\\n\\ngui/scrollbar/horizontal_idle_thumb.png, gui/scrollbar/horizontal_hover_thumb.png, gui/scrollbar/vertical_idle_thumb.png, gui/scrollbar/vertical_hover_thumb.png\\nImages used for the thumb – the movable part of the bar.\\n\\nThe following variables are also used:\\n\\n.. var:: gui.scrollbar_size = 24\\n\\nThe height of horizontal scrollbars, and width of vertical scrollbars.\\n\\n.. var:: gui.scrollbar_tile = True\\n\\nIf true, the frame containing the bar of a scrollbar is tiled. If False,\\nif it scaled.\\n\\n.. var:: gui.scrollbar_borders = Borders(10, 6, 10, 6)\\n.. var:: gui.vscrollbar_borders = Borders(6, 10, 6, 10)\\n\\nThe borders that are used with the Frame containing the bar image.\\n\\n.. var:: gui.unscrollable = \\"hide\\"\\n\\nThis controls what to do if the bar is unscrollable. \\"hide\\" hides\\nthe bar, while None keeps it shown.\\n\\n.. ifconfig:: renpy_figures\\n\\nHere\'s an example of how we customize the vertical scrollbar.\\n\\n.. figure:: oshs/game/gui/scrollbar/vertical_idle_bar.png\\n:height: 150\\n\\nAn example gui/scrollbar/vertical_idle_bar.png image.\\n\\n.. figure:: oshs/game/gui/scrollbar/vertical_hover_bar.png\\n:height: 150\\n\\nAn example gui/scrollbar/vertical_hover_bar.png image.\\n\\n.. figure:: oshs/game/gui/scrollbar/vertical_idle_thumb.png\\n:height: 150\\n\\nAn example gui/scrollbar/vertical_idle_thumb.png image.\\n\\n.. figure:: oshs/game/gui/scrollbar/vertical_hover_thumb.png\\n:height: 150\\n\\nAn example gui/scrollbar/vertical_hover_thumb.png image.\\n\\n.. figure:: gui/scrollbar_history.jpg\\n:width: 100%\\n\\nThe history screen after applying the customizations given in this\\nsection.\\n\\nBars\\n----\\n\\nPlain old bars are used to display a number to the player. They\'re not\\nused in the GUI, but can be used in creator-defined screens.\\n\\nA bar can customized by editing the following images:\\n\\ngui/bar/left.png, gui/bar/bottom.png\\nImages that are used for the filled section of horizontal and vertical bars.\\n\\ngui/bar/right.png, gui/bar/top.png\\nImages that are used for the filled section of horizontal and vertical bars.\\n\\nThere are also the usual variables that control bars:\\n\\n.. var:: gui.bar_size = 64\\n\\nThe height of horizontal bars, and width of vertical bars.\\n\\n.. var:: gui.bar_tile = False\\n\\nIf true, the bar images are tiled. If false, the images are linearly\\nscaled.\\n\\n.. var:: gui.bar_borders = Borders(10, 10, 10, 10)\\n.. var:: gui.vbar_borders = Borders(10, 10, 10, 10)\\n\\nThe borders that are used with the Frames containing the bar images.\\n\\n\\n.. ifconfig:: renpy_figures\\n\\nHere\'s an example of how we customize horizontal bars.\\n\\n.. figure:: oshs/game/gui/bar/left.png\\n:width: 100%\\n\\nAn example gui/bar/left.png image.\\n\\n.. figure:: oshs/game/gui/bar/right.png\\n:width: 100%\\n\\nAn example gui/bar/right.png image.\\n\\n.. figure:: gui/bar.jpg\\n:width: 100%\\n\\nA screen we defined to give an example of a bar.\\n\\n\\nSkip and Notify\\n---------------\\n\\nThe skip and notify screens both display frames with messages in them. Both\\nuse custom frame background images:\\n\\n\\ngui/skip.png\\nThe background of the skip indicator.\\n\\ngui/notify.png\\nThe background of the notify screen.\\n\\nThe variables that control these are:\\n\\n.. var:: gui.skip_frame_borders = Borders(24, 8, 75, 8)\\n\\nThe borders of the frame that is used by the skip screen.\\n\\n.. var:: gui.notify_frame_borders = Borders(24, 8, 60, 8)\\n\\nThe borders of the frame that is used by the notify screen.\\n\\n.. var:: gui.skip_ypos = 15\\n\\nThe vertical position of the skip indicator, in pixels from the top of the\\nwindow.\\n\\n.. var:: gui.notify_ypos = 68\\n\\nThe vertical position of the notify message, in pixels from the top of the\\nwindow.\\n\\n.. ifconfig:: renpy_figures\\n\\nHere is an example of customizing the skip and notify screens.\\n\\n.. figure:: oshs/game/gui/skip.png\\n:width: 100%\\n\\nAn example gui/skip.png image.\\n\\n.. figure:: oshs/game/gui/notify.png\\n:width: 100%\\n\\nAn example gui/notify.png image.\\n\\n.. figure:: gui/skip_notify.jpg\\n\\nThese skip and notify screens in action.\\n\\nDialogue, Continued\\n-------------------\\n\\nIn addition to the simple customizations given above, there are a number\\nof ways to control how dialogue is presented to the player.\\n\\nTextbox\\n^^^^^^^\\n\\nThe textbox (or window) is the window the dialogue is displayed in. In addition\\nto changing gui/textbox.png, the following variables control how the textbox\\nis displayed.\\n\\n.. var:: gui.textbox_height = 278\\n\\nThe height of the textbox window, which should also be the height of gui/\\ntextbox.png.\\n\\n.. var:: gui.textbox_yalign = 1.0\\n\\nThe placement of the textbox vertically on the screen. 0.0 is the top,\\n0.5 is center, and 1.0 is the bottom.\\n\\nName and Namebox\\n^^^^^^^^^^^^^^^^\\n\\nThe character\'s name is placed inside a frame that uses gui/namebox.png as\\nits background. In addition, there are a number of variables that control\\nthe presentation of the name. The namebox is only show if the speaking character\\nhas a name (an empty name, like \\" \\", counts).\\n\\n.. var:: gui.name_xpos = 360\\n.. var:: gui.name_ypos = 0\\n\\nThe horizontal and vertical positions of the name and namebox. These\\nare usually a number of pixels from the left or top side of the textbox.\\nSetting a variable to 0.5 centers the name in the textbox (see below).\\nThese numbers can also be negative – for example, setting gui.name_ypos\\nto -22 causes it to be places 22 pixels above the top of the textbox.\\n\\n.. var:: gui.name_xalign = 0.0\\n\\nThe horizontal alignment of the character\'s name. This can be 0.0 for left-\\naligned, 0.5 for centered, and 1.0 for right-aligned. (It\'s almost always\\n0.0 or 0.5.) This is used for both the position of the namebox relative\\nto gui.name_xpos, and to select the side of of the namebox that is aligned\\nwith xpos.\\n\\n.. var:: gui.namebox_width = None\\n.. var:: gui.namebox_height = None\\n.. var:: gui.namebox_borders = Borders(5, 5, 5, 5)\\n.. var:: gui.namebox_tile = False\\n\\nThese variables control the display of the frame containing the namebox.\\n\\nDialogue\\n^^^^^^^^\\n\\n.. var:: gui.dialogue_xpos = 402\\n.. var:: gui.dialogue_ypos = 75\\n\\nThe horizontal and vertical positions of the actual dialogue. These\\nare usually a number of pixels from the left or top side of the textbox.\\nSetting a variable to 0.5 centers the dialogue in the textbox (see below).\\n\\n.. var:: gui.dialogue_width = 1116\\n\\nThis variable gives the maximum width of a line of dialogue, in pixels.\\nWhen dialogue reaches this width, it will be wrapped by Ren\'Py.\\n\\n.. var:: gui.dialogue_text_xalign = 0.0\\n\\nThe horizontal alignment of dialogue text. 0.0 is left aligned, 0.5 is\\ncentered, and 1.0 is right-aligned.\\n\\nExamples\\n^^^^^^^^\\n\\nTo center the character\'s name, use\\n\\n```\\ndefine gui.name_xpos = 0.5\\ndefine gui.name_xalign = 0.5\\n\\n```\\n\\nTo center dialogue text, use\\n\\n```\\ndefine gui.dialogue_xpos = 0.5\\ndefine gui.dialogue_text_xalign = 0.5\\n\\n```\\n\\nOur example game uses these statements to customize the centered namebox\\n\\n```\\ndefine gui.namebox_width = 300\\ndefine gui.name_ypos = -22\\ndefine gui.namebox_borders = Borders(15, 7, 15, 7)\\ndefine gui.namebox_tile = True\\n\\n```\\n\\n.. ifconfig:: renpy_figures\\n\\n.. figure:: oshs/game/gui/namebox.png\\n\\nAn example gui/namebox.png image.\\n\\n.. figure:: gui/intermediate_dialogue.jpg\\n:width: 100%\\n\\nThe example game, customized with the settings above.\\n\\n\\nHistory\\n-------\\n\\nThere are a few variables that control the way the history screen\\nis displayed.\\n\\nThe config.history_length variable, which defaults to 250,\\nsets the number of blocks of dialogue Ren\'Py will keep at history.\\n\\n.. var:: gui.history_height = 210\\n\\nThe height of a history entry, in pixels. This can be None to allow\\nthe height of a history entry to vary at the cost of performance –\\nconfig.history_length may need to be lowered significantly when this\\nis None.\\n\\n.. var:: gui.history_spacing = 0\\n\\nThe amount of space to leave between history entries, in pixels.\\n\\n.. var:: gui.history_name_xpos = 0.5\\n.. var:: gui.history_text_xpos = 0.5\\n\\nThe horizontal positions of the name label and dialogue text. These\\ncan be a number of pixels from the left side of the history entry,\\nor 0.5 to center.\\n\\n.. var:: gui.history_name_ypos = 0\\n.. var:: gui.history_text_ypos = 60\\n\\nThe vertical positions of the name label and dialogue text, relative\\nto the top of a history entry, in pixels.\\n\\n\\n.. var:: gui.history_name_width = 225\\n.. var:: gui.history_text_width = 1110\\n\\nThe width of the name label and dialogue text, in pixels.\\n\\n.. var:: gui.history_name_xalign = 0.5\\n.. var:: gui.history_text_xalign = 0.5\\n\\nThis controls the alignment of text and the side of the text that is\\naligned with xpos. 0.0 is left-aligned, 0.5 is center-aligned, 1.0 is\\nright-aligned.\\n\\n.. ifconfig:: renpy_figures\\n\\n.. figure:: gui/history.png\\n:width: 100%\\n\\nThe history screen customized with the settings given above.\\n\\n\\nNVL\\n---\\n\\nThe nvl screen displays NVL-mode dialogue. There are a number of ways it\\ncan be customized. The first is to customize the NVL-mode background image:\\n\\ngui/nvl.png\\nThe background image used in NVL-mode. This should be the same size as\\nthe game window.\\n\\nThere are also a number of variables that are used to customize the way\\nNVL-mode text is displayed.\\n\\n\\n.. var:: gui.nvl_borders = Borders(0, 15, 0, 30)\\n\\nThe borders around the background of the NVL-mode. Since the\\nbackground is not a frame, this is only used to pad out the NVL-mode\\nto prevent it from pressing up against the sides of the screen.\\n\\n.. var:: gui.nvl_height = 173\\n\\nThe height of a single NVL-mode entry. Setting this to a fixed height\\nmakes it possible to have NVL-mode without paging, showing a fixed number\\nof entries at once. Setting this to None allows entries to be of a\\nvariable size.\\n\\n.. var:: gui.nvl_spacing = 15\\n\\nThe spacing between entries when gui.nvl_height is None, and the spacing\\nbetween NVL-mode menu buttons.\\n\\n.. var:: gui.nvl_name_xpos = 0.5\\n.. var:: gui.nvl_text_xpos = 0.5\\n.. var:: gui.nvl_thought_xpos = 0.5\\n\\nThe positioning of character names, dialogue text, and thought/narration\\ntext, relative to the left side of the entry. This can be a number of\\npixels, or 0.5 to represent the center of the entry.\\n\\n.. var:: gui.nvl_name_xalign = 0.5\\n.. var:: gui.nvl_text_xalign = 0.5\\n.. var:: gui.nvl_thought_xalign = 0.5\\n\\nThe alignment of the text. This controls both the alignment of the text,\\nand the side of the text that is placed at xpos. This can be 0.0 for left,\\n0.5 for center, and 1.0 for right.\\n\\n.. var:: gui.nvl_name_ypos = 0\\n.. var:: gui.nvl_text_ypos = 60\\n.. var:: gui.nvl_thought_ypos = 0\\n\\nThe position of character names, dialogue text, and thought/narration text,\\nrelative to the top of the entry. This should be a number of pixels from\\nthe top.\\n\\n.. var:: gui.nvl_name_width = 740\\n.. var:: gui.nvl_text_width = 740\\n.. var:: gui.nvl_thought_width = 740\\n\\nThe width of each kind of text, in pixels.\\n\\n.. var:: gui.nvl_button_xpos = 0.5\\n.. var:: gui.nvl_button_xalign = 0.5\\n\\nThe position and alignment of NVL-mode menu buttons.\\n\\nRen\'Py does not use NVL-mode by default. It must be invoked using NVL-mode\\ncharacters, and by defining a few variables in script.rpy. \\n\\n```\\ndefine e = Character(\\"Eileen\\", kind=nvl)\\ndefine narrator = nvl_narrator\\ndefine menu = nvl_menu\\n\\n\\n```\\n\\n.. ifconfig:: renpy_figures\\n\\nHere\'s an example of the NVL screen as customized with the settings above.\\n\\n.. figure:: oshs/game/gui/nvl.png\\n\\nAn example gui/nvl.png image.\\n\\n.. figure:: gui/nvl.jpg\\n:width: 100%\\n\\nThe example game, customized with the settings above.\\n\\nText\\n----\\n\\nMost text can be customized using GUI variables. The variables used\\nare of the form:\\n\\n.. var:: gui.kind_text_font\\n\\nIf present, the font used for the text.\\n\\n.. var:: gui.kind_text_size\\n\\nIf present, the size of the text.\\n\\n.. var:: gui.kind_text_color\\n\\nIf present, the color of the text.\\n\\nOther text style properties cam also be\\nset in the same way. For example, gui.kind_text_outlines sets the\\noutlines property.\\n\\n\\nThe kind prefix can be omitted, in which case it customizes the default look\\nof text. Otherwise, it may be one of the button kinds above, or one of:\\n\\ninterface\\nFor default text in the out-of-game interface.\\n\\ninput\\nFor text in a text input widget.\\n\\ninput_prompt\\nFor the prompt portion of a text input.\\n\\nlabel\\nFor decorative labels.\\n\\nprompt\\nFor confirmation prompts asking the player a question.\\n\\nname\\nFor character names.\\n\\ndialogue\\nFor dialogue.\\n\\nnotify\\nFor notification text.\\n\\n\\n\\nFor example\\n\\n```\\ndefine gui.dialogue_text_outlines = [ (0, \\"#00000080\\", 2, 2) ]\\n\\n```\\n\\nputs a drop shadow to the right of and below dialogue text.\\n\\n\\nTranslation and GUI Variables\\n-----------------------------\\n\\nThe gui namespace is special, in that it is saved after the init phase,\\nbut before any ``translate python`` blocks are run. This makes it possible to\\nchange any GUI variable in a ``translate python`` block to accommodate a second\\nlanguage. For example, the following code changes the default text font\\nand size. \\n\\n```\\ntranslate japanese python:\\n    gui.text_font = \\"MTLc3m.ttf\\"\\n    gui.text_size = 24\\n    \\n```\\n\\nThere is one issue that translators need to be aware of, and that is that\\nin some places in gui.rpy, one variable is assigned the value of another.\\nFor example, the default gui.rpy has\\n\\n```\\ndefine gui.interface_text_font = \\"DejaVuSans.ttf\\"\\n\\n```\\n\\nand later on\\n\\n```\\ndefine gui.button_text_font = gui.interface_text_font\\n\\n```\\n\\nSince both of these statements run before any ``translate`` block runs, both\\nvariables need to be changed. \\n\\n```\\ntranslate japanese python::\\n\\n    define gui.interface_text_font = \\"MTLc3m.ttf\\"\\n    define gui.button_text_font = \\"MTLc3m.ttf\\"\\n    \\n```\\n\\nIf the second statement was missing, DejaVuSans would still be used.\\n\\n.. _more_advanced_gui:\\n\\nAdvanced Customization\\n======================\\n\\nMore advanced customization is possible by customizing screens.rpy,\\nup to and including deleting the entire contents of the file and replacing\\nit with something of your own. Here are a few places to get started.\\n\\nStyles\\n------\\n\\nStyles and style properties control how displayables\\nare displayed. To find out what style a displayable is using, put the mouse\\nover it and type Shift+I. This invokes the style inspector, which shows\\nstyle names. Once the style name is known, a style statement can be used\\nto customize it.\\n\\nFor example, say we\'ve lost our minds writing GUI documentation, and want to\\nadd a bright red outline to the dialogue text. We can hover the text and press\\nShift+I to find out the style used is named say_dialogue. We can then\\nadd (to the end of screens.rpy, or somewhere in options.rpy) the style statement\\n\\n```\\nstyle say_dialogue:\\n    outlines [ (1, \\"#f00\\", 0, 0 ) ]\\n    \\n```\\n\\nA huge number of customizations are possible using style statements.\\n\\n\\nScreens - Navigation\\n--------------------\\n\\nThe next level of customization is to modify the screens. The most\\nimportant documentation about screens is located in the screens\\nand screen_actions sections.\\n\\n\\nOne of the most important screens is the navigation screen, which serves\\nboth as the main menu, and to provide navigation for the game menu. This\\nscreen can be edited to add more buttons to one or both of those. For\\nexample, by changing the navigation screen to\\n\\n```\\nscreen navigation():\\n\\n    vbox:\\n        style_prefix \\"navigation\\"\\n        \\n        xpos gui.navigation_xpos\\n        yalign 0.5\\n        \\n        spacing gui.navigation_spacing\\n        \\n        if main_menu:\\n        \\n            textbutton _(\\"Start\\") action Start()\\n            \\n            textbutton _(\\"Prologue\\") action Start(\\"prologue\\")\\n            \\n        else:\\n        \\n            textbutton _(\\"Codex\\") action ShowMenu(\\"codex\\")\\n            \\n            textbutton _(\\"History\\") action ShowMenu(\\"history\\")\\n            \\n            textbutton _(\\"Save\\") action ShowMenu(\\"save\\")\\n            \\n        textbutton _(\\"Load\\") action ShowMenu(\\"load\\")\\n        \\n        textbutton _(\\"Preferences\\") action ShowMenu(\\"preferences\\")\\n        \\n        if _in_replay:\\n        \\n            textbutton _(\\"End Replay\\") action EndReplay(confirm=True)\\n            \\n        elif not main_menu:\\n        \\n            textbutton _(\\"Main Menu\\") action MainMenu()\\n            \\n        textbutton _(\\"About\\") action ShowMenu(\\"about\\")\\n        \\n        textbutton _(\\"Extras\\") action ShowMenu(\\"extras\\")\\n        \\n        if renpy.variant(\\"pc\\"):\\n        \\n            textbutton _(\\"Help\\") action ShowMenu(\\"help\\")\\n            \\n            textbutton _(\\"Quit\\") action Quit(confirm=not main_menu)\\n            \\n```\\n\\nWe add access to a prologue screen from the main menu, a codex screen from\\nthe game menu, and an extras screen from both menus.\\n\\nScreens - Game Menu\\n-------------------\\n\\nCustom game menu screens can also be created. These screens can use the\\ngame_menu screen to provide a title and scrollable viewport. An minimal\\ncustom game menu screen is\\n\\n```\\nscreen codex():\\n\\n    tag menu\\n    \\n    use game_menu(_(\\"Codex\\"), scroll=\\"viewport\\"):\\n    \\n        style_prefix \\"codex\\"\\n        \\n        has vbox:\\n            spacing 20\\n            \\n        text _(\\"{b}Mechanical Engineering:{/b} Where we learn to build things like missiles and bombs.\\")\\n        \\n        text _(\\"{b}Civil Engineering:{/b} Where we learn to build targets.\\")\\n        \\n```\\n\\nClearly, a functional codex would need to be more elaborate than this.\\n\\nNote the \\"tag menu\\" line. This line is important, as it hides other menu screens\\nwhen the codex is shown. Without it, it would be hard to switch to and\\nfrom the other menu screens.\\n\\nScreens - Click to Continue\\n---------------------------\\n\\nA screen we expect to be commonly added is the click to continue screen. This\\nis a screen that is shown when text finishes displaying. Here\'s a simple\\nexample\\n\\n```\\nscreen ctc(arg=None):\\n\\n    frame:\\n        at ctc_appear\\n        xalign .99\\n        yalign .99\\n        \\n        text _(\\"(click to continue)\\"):\\n            size 18\\n            \\ntransform ctc_appear:\\n    alpha 0.0\\n    pause 5.0\\n    linear 0.5 alpha 1.0\\n    \\n```\\n\\nThis particular ctc screen uses a transform to show the frame after 5 seconds.\\nIt\'s a good idea to delay CTC animations for several seconds, to give Ren\'Py\\ntime to predict and load images.\\n\\n\\nTotal GUI Replacement\\n---------------------\\n\\nAdvanced creators can replace some or all of screens.rpy in its entirely.\\nWhen doing so, some or all of the contents of gui.rpy may become redundant.\\nIt\'s probably a good idea to call gui.init to reset styles – but after\\nthat, a creator can do whatever they want. It usually makes sense to include\\nsome or all of the special screens, to make sure\\nplayers can have access to all the functionality Ren\'Py provides.\\n\\n\\nSee Also\\n========\\n\\nFor more information about the GUI, see the Advanced GUI\\nsection.\\n\\n\\n.. _gui-changes:\\n\\nIncompatible GUI Changes\\n========================\\n\\nAs the GUI is changed, occasionally some of the variables change name. These\\nchanges only take effect when the GUI is regenerated – until then, the game\\nwill continue to use the old variable names in the new Ren\'Py.\\n\\n6.99.12.3\\n---------\\n\\n* gui.default_font -> gui.text_font\\n* gui.name_font -> gui.name_text_font\\n* gui.interface_font -> gui.interface_text_font\\n* gui.text_xpos -> gui.dialogue_xpos\\n* gui.text_ypos -> gui.dialogue_ypos\\n* gui.text_width -> gui.dialogue_width\\n* gui.text_xalign -> gui.dialogue_text_xalign\\n"],"gui.name_text_size":["renpy","var","= 45","","var","Sets the size of character names.\\n\\n"],"gui.preference":["renpy","function","(name, default=...)","","function","This function returns the value of the gui preference with\\n`name`.\\n\\n`default`\\nIf given, this value becomes the default value of the gui\\npreference. The default value must be given the first time\\nthe preference is used.\\n\\n"],"gui.rebuild":["renpy","function","()","","function","Rebuilds the GUI.\\n\\nNote: This is a very slow function.\\n\\n"],"gui.selected_color":["renpy","var","= \'#555555\'","","var","The color used by the text of selected buttons. (This takes priority\\nover the hover and idle colors.)\\n\\n"],"gui.text_color":["renpy","var","= \\"#402000\\"","","var","This sets the color of the dialogue text.\\n\\n"],"gui.text_font":["renpy","var","= \\"ArchitectsDaughter.ttf\\"","","var","This sets the font that is used for dialogue text, menus, inputs, and\\nother in-game text. The font file should exist in the game directory.\\n\\n"],"gui.text_properties":["renpy","function","(kind=None, accent=False)","","function","Given a `kind` of button, returns a dictionary giving standard style\\nproperties for that button. This sets:\\nGiven a `kind` of textbutton, returns a dictionary giving standard style\\nproperties for the text inside that button. This sets:\\n\\nfont\\nTo gui.kind_text_font, if it exists.\\n\\nsize\\nTo gui.kind_text_size, if it exists.\\n\\nxalign\\nTo gui.kind_text_xalign, if it exists.\\n\\ntextalign\\nTo gui.kind_text_xalign, if it exists.\\n\\nlayout\\nTo \\"subtitle\\" if gui.kind_text_xalign is greater than zero\\nand less than one.\\n\\nThere are also a number of variables that set the text\\ncolor style property:\\n\\ncolor\\nTo gui.kind_text_color, if it exists. If the variable is not\\nset, and `accent` is True, sets the text color to the default\\naccent color.\\n\\ninsensitive_color\\nTo gui.kind_text_insensitive_color, if it exists.\\n\\nidle_color\\nTo gui.kind_text_idle_color, if it exists.\\n\\nhover_color\\nTo gui.kind_text_hover_color, if it exists.\\n\\nselected_color\\nTo gui.kind_text_selected_color, if it exists.\\n\\nAll other text style properties\\nare available. When `kind` is not None,\\nposition style properties\\nare also available. For\\nexample, gui.kind_text_outlines sets the outlines style property,\\ngui.kind_text_kerning sets kerning, and so on.\\n\\n"],"gui.text_size":["renpy","var","= 33","","var","Sets the size of the dialogue text. This may need to be increased or\\ndecreased to fit the selected font in the space allotted.\\n\\n"],"gui.variant":["renpy","function","(f, variant=None)","","function","A decorator that causes a function to be called when the gui is first\\ninitialized, and again each time the gui is rebuilt.  This is intended\\nto be used as a function decorator,  of the form\\n\\n```\\n@gui.variant\\ndef small():\\n    gui.text_size = 30\\n    # ...\\n    \\n```\\n\\nIt can also be called with `f` (a function) and `variant` (a string),\\ngiving the variant name.\\n\\n"],"hpunch":["renpy","var","","","var","When invoked, this transition shakes the screen horizontally for a\\nquarter second.\\n\\n"],"iap":["renpy","var","","","var","The iap namespace contains functions that control the in-app purchase system.\\n\\n"],"iap.Purchase":["renpy","function","(product, success=None)","","function","An action that attempts the purchase of `product`. This action is\\nsensitive if and only if the product is purchasable (a store is\\nenabled, and the product has not already been purchased.)\\n\\n`success`\\nIf not None, this is an action or list of actions that are run\\nwhen the purchase succeeds.\\n\\n"],"iap.Restore":["renpy","function","()","","function","An Action that contacts the app store and restores any missing purchases.\\n\\n"],"iap.get_price":["renpy","function","(product)","","function","Returns a string giving the price of the `product` in the user\'s\\nlocal currency. Returns None if the price of the product is unknown -\\nwhich indicates the product cannot be purchased.\\n\\n"],"iap.get_store_name":["renpy","function","()","","function","Returns the name of the enabled store for in-app purchase. This\\ncurrently returns one of \\"amazon\\", \\"play\\" (for Google Play), \\"ios\\"\\nor None if no store is available.\\n\\n"],"iap.has_purchased":["renpy","function","(product)","","function","Returns True if the user has purchased `product` in the past, and\\nFalse otherwise.\\n\\n"],"iap.init":["renpy","function","()","","function","Initialize iap. This should be called after all calls to iap.register(),\\nbut before any other iap function. If not called explicitly, this is\\nautomatically called at the end of the initialization phase.\\n\\n"],"iap.is_deferred":["renpy","function","(product)","","function","Returns True if the user has asked to purchase `product`, but that\\nrequest has to be approved by a third party, such as a parent or\\nguardian.\\n\\n"],"iap.purchase":["renpy","function","(product, interact=True)","","function","This function requests the purchase of `product`.\\n\\nIt returns true if the purchase succeeds, or false if the purchase\\nfails. If the product has been registered as consumable, the purchase\\nis consumed before this call returns.\\n\\n"],"iap.register":["renpy","function","(product, identifier=None, amazon=None, google=None, ios=None, consumable=False)","","function","Registers a product with the in-app purchase system.\\n\\n`product`\\nA string giving the high-level name of the product. This is the\\nstring that will be passed to iap.purchase, iap.Purchase,\\nand iap.has_purchased to represent this product.\\n\\n`identifier`\\nA string that\'s used to identify the product internally. Once used\\nto represent a product, this must never change. These strings are\\ngenerally of the form \\"com.domain.game.product\\".\\n\\nIf None, defaults to `product`.\\n\\n`amazon`\\nA string that identifies the product in the Amazon app store.\\nIf not given, defaults to `identifier`.\\n\\n`google`\\nA string that identifies the product in the Google Play store.\\nIf not given, defaults to `identifier`.\\n\\n`ios`\\nA string that identifies the product in the Apple App store for\\niOS. If not given, defaults to `identifier`.\\n\\n`consumable`\\nTrue if this is a consumable purchase. Right now, consumable purchases\\nare only supported on iOS.\\n\\n"],"iap.request_review":["renpy","function","()","","function","When called, the app store is asked to request a review from the user.\\nThis returns true if the request was successful, and false if the\\nrequest was not. Note that a successful request does not mean that\\nthe user will be asked to review the app, as app stores determine\\nif the user is actually asked.\\n\\nThis is supported on Google Play and the Apple App Store, only.\\n\\n"],"iap.restore":["renpy","function","(interact=True)","","function","Contacts the app store and restores any missing purchases.\\n\\n`interact`\\nIf True, renpy.pause will be called while waiting for the app store\\nto respond.\\n\\n"],"im":["renpy","var","","","var","**Note: Most functions in the im namespace are deprecated.**\\n\\nThe im namespace contains image manipulators, which load or manipulate images on the CPU. Most functions here\\ncan be accomplished on the GPU using Transform.\\n\\n"],"im.AlphaMask":["renpy","class","(base, mask, **properties)","","class","An image manipulator that takes two image manipulators, `base` and\\n`mask`, as arguments. It replaces the alpha channel of `base` with\\nthe red channel of `mask`.\\n\\nThis is used to provide an image\'s alpha channel in a second\\nimage, like having one jpeg for color data, and a second one\\nfor alpha. In some cases, two jpegs can be smaller than a\\nsingle png file.\\n\\nNote that this takes different arguments from AlphaMask,\\nwhich uses the mask\'s alpha channel.\\n\\nThe two images need to have the same size, and the same oversampling factor.\\n\\n"],"im.Blur":["renpy","class","(im, xrad, yrad=None, **properties)","","class","An image manipulator that blurs the image manipulator `im` using\\nan elliptical kernel described by `xrad` and optionally `yrad`.\\n\\nIf `yrad` is None, it will take the value of `xrad` resulting in\\na circular kernel being used.\\n\\n\\n\\n```\\nimage logo blurred = im.Blur(\\"logo.png\\", 1.5)\\n\\n```\\n\\n.. deprecated:: 7.4.0\\nUse the blur transform property.\\n\\n"],"im.Crop":["renpy","class","(im, rect)","","class","An image manipulator that crops `rect`, a (x, y, width, height) tuple,\\nout of `im`, an image manipulator.\\n\\n\\n\\n```\\nimage logo crop = im.Crop(\\"logo.png\\", (0, 0, 100, 307))\\n\\n```\\n\\n.. deprecated:: 7.4.0\\nUse the crop transform property.\\n\\n"],"im.Data":["renpy","class","(data, filename, **properties)","","class","This image manipulator loads an image from binary data.\\n\\n`data`\\nA string of bytes, giving the compressed image data in a standard\\nfile format.\\n\\n`filename`\\nA \\"filename\\" associated with the image. This is used to provide a\\nhint to Ren\'Py about the format of `data`. (It\'s not actually\\nloaded from disk.)\\n\\n"],"im.FactorScale":["renpy","class","(im, width, height=None, bilinear=True, **properties)","","class","An image manipulator that scales `im` (a second image manipulator)\\nto `width` times its original `width`, and `height` times its\\noriginal height. If `height` is omitted, it defaults to `width`.\\n\\nIf `bilinear` is true, then bilinear interpolation is used for\\nthe scaling. Otherwise, nearest neighbor interpolation is used.\\n\\n\\n\\n```\\nimage logo doubled = im.FactorScale(\\"logo.png\\", 1.5)\\n\\n```\\n\\n.. deprecated:: 7.4.0\\nUse the zoom, or the\\nxzoom and yzoom transform properties.\\n\\n"],"im.Flip":["renpy","class","(im, horizontal=False, vertical=False, **properties)","","class","An image manipulator that flips `im` (an image manipulator)\\nvertically or horizontally.  `vertical` and `horizontal` control\\nthe directions in which the image is flipped.\\n\\n\\n\\n```\\nimage eileen flip = im.Flip(\\"eileen_happy.png\\", vertical=True)\\n\\n```\\n\\n.. deprecated:: 7.4.0\\nSet xzoom (for horizontal flip)\\nor yzoom (for vertical flip) to a negative value.\\n\\n"],"im.Grayscale":["renpy","function","(im, **properties)","","function","An image manipulator that creates a desaturated version of the image\\nmanipulator `im`.\\n\\n.. deprecated:: 7.4.0\\nSet the matrixcolor transform property to\\nSaturationMatrix(0).\\n\\n"],"im.MatrixColor":["renpy","class","(im, matrix, **properties)","","class","An image operator that uses `matrix` to linearly transform the\\nimage manipulator `im`.\\n\\n`Matrix` should be a list, tuple, or im.matrix that is 20\\nor 25 elements long. If the object has 25 elements, then elements\\npast the 20th are ignored.\\n\\nWhen the four components of the source color are R, G, B, and A,\\nwhich range from 0.0 to 1.0; the four components of the transformed\\ncolor are R\', G\', B\', and A\', with the same range; and the elements\\nof the matrix are named\\n\\n```\\n[ a, b, c, d, e,\\n  f, g, h, i, j,\\n  k, l, m, n, o,\\n  p, q, r, s, t ]\\n  \\n```\\n\\nthe transformed colors can be computed with the formula\\n\\n```\\nR\' = (a * R) + (b * G) + (c * B) + (d * A) + e\\nG\' = (f * R) + (g * G) + (h * B) + (i * A) + j\\nB\' = (k * R) + (l * G) + (m * B) + (n * A) + o\\nA\' = (p * R) + (q * G) + (r * B) + (s * A) + t\\n\\n```\\n\\nThe components of the transformed color are clamped to the\\nrange [0.0, 1.0].\\n\\n.. deprecated:: 7.4.0\\nUse ``Transform(im, matrixcolor=matrix, **properties)``.\\nSee Transform and matrixcolor.\\n\\n"],"im.Sepia":["renpy","function","(im, **properties)","","function","An image manipulator that creates a sepia-toned version of the image\\nmanipulator `im`.\\n\\n.. deprecated:: 7.4.0\\nSet the matrixcolor transform property to\\nSepiaMatrix()\\n\\n"],"im.Tile":["renpy","class","(im, size=None, **properties)","","class","An image manipulator that tiles the image manipulator `im`, until\\nit is `size`.\\n\\n`size`\\nIf not None, a (width, height) tuple. If None, this defaults to\\n(config.screen_width, config.screen_height).\\n\\n.. deprecated:: 7.4.0\\nUse Tile(im, xysize=size, **properties).\\n\\n\\n"],"im.matrix":["renpy","class","()","","class","Constructs an im.matrix object from `matrix`. im.matrix objects\\nsupport The operations supported are matrix multiplication, scalar\\nmultiplication, element-wise addition, and element-wise\\nsubtraction. These operations are invoked using the standard\\nmathematical operators (\\\\*, \\\\*, +, and -, respectively). If two\\nim.matrix objects are multiplied, matrix multiplication is\\nperformed, otherwise scalar multiplication is used.\\n\\n`matrix` is a 20 or 25 element list or tuple. If it is 20 elements\\nlong, it is padded with (0, 0, 0, 0, 1) to make a 5x5 matrix,\\nsuitable for multiplication.\\n\\n.. deprecated:: 7.4.0\\nUse Matrix.\\n\\n"],"im.matrix.brightness":["renpy","function","(b)","","function","Returns an im.matrix that alters the brightness of an image.\\n\\n`b`\\nThe amount of change in image brightness. This should be\\na number between -1 and 1, with -1 the darkest possible\\nimage and 1 the brightest.\\n\\n.. deprecated:: 7.4.0\\nUse BrightnessMatrix(b)\\nwith the matrixcolor transform property.\\n\\n"],"im.matrix.colorize":["renpy","function","(black_color, white_color)","","function","Returns an im.matrix that colorizes a black and white image.\\n`black_color` and `white_color` are Ren\'Py style colors, so\\nthey may be specified as strings or tuples of (0-255) color\\nvalues. \\n\\n```\\n# This makes black colors red, and white colors blue.\\nimage logo colored = im.MatrixColor(\\n    \\"bwlogo.png\\",\\n    im.matrix.colorize(\\"#f00\\", \\"#00f\\"))\\n    \\n    \\n```\\n\\n.. deprecated:: 7.4.0\\nUse ColorizeMatrix(black_color, white_color)\\nwith the matrixcolor transform property.\\n\\n"],"im.matrix.contrast":["renpy","function","(c)","","function","Returns an im.matrix that alters the contrast of an image. `c` should\\nbe greater than 0.0, with values between 0.0 and 1.0 decreasing contrast, and\\nvalues greater than 1.0 increasing contrast.\\n\\n.. deprecated:: 7.4.0\\nUse ContrastMatrix(c)\\nwith the matrixcolor transform property.\\n\\n"],"im.matrix.desaturate":["renpy","function","()","","function","Returns an im.matrix that desaturates the image (makes it\\ngrayscale). This is equivalent to calling\\nim.matrix.saturation(0).\\n\\n.. deprecated:: 7.4.0\\nUse SaturationMatrix(0)\\nwith the matrixcolor transform property.\\n\\n"],"im.matrix.hue":["renpy","function","(h)","","function","Returns an im.matrix that rotates the hue by `h` degrees, while\\npreserving luminosity.\\n\\n.. deprecated:: 7.4.0\\nUse HueMatrix(h)\\nwith the matrixcolor transform property.\\n\\n"],"im.matrix.identity":["renpy","function","()","","function","Returns an identity matrix, one that does not change color or\\nalpha.\\n\\n.. deprecated:: 7.4.0\\nUse IdentityMatrix()\\nwith the matrixcolor transform property.\\n\\n"],"im.matrix.invert":["renpy","function","()","","function","Returns an im.matrix that inverts the red, green, and blue\\nchannels of the image without changing the alpha channel.\\n\\n.. deprecated:: 7.4.0\\nUse InvertMatrix(1.0)\\nwith the matrixcolor transform property.\\n\\n"],"im.matrix.opacity":["renpy","function","(o)","","function","Returns an im.matrix that alters the opacity of an image. An\\n`o` of 0.0 is fully transparent, while 1.0 is fully opaque.\\n\\n.. deprecated:: 7.4.0\\nUse OpacityMatrix(o)\\nwith the matrixcolor transform property.\\n\\n"],"im.matrix.saturation":["renpy","function","(level, desat=(0.2126, 0.7152, 0.0722))","","function","Returns an im.matrix that alters the saturation of an\\nimage. The alpha channel is untouched.\\n\\n`level`\\nThe amount of saturation in the resulting image. 1.0 is\\nthe unaltered image, while 0.0 is grayscale.\\n\\n`desat`\\nThis is a 3-element tuple that controls how much of the\\nred, green, and blue channels will be placed into all\\nthree channels of a fully desaturated image. The default\\nis based on the constants used for the luminance channel\\nof an NTSC television signal. Since the human eye is\\nmostly sensitive to green, more of the green channel is\\nkept then the other two channels.\\n\\n.. deprecated:: 7.4.0\\nUse SaturationMatrix(value, desat)\\nwith the matrixcolor transform property.\\n\\n"],"im.matrix.tint":["renpy","function","(r, g, b)","","function","Returns an im.matrix that tints an image, without changing\\nthe alpha channel. `r`, `g`, and `b` should be numbers between\\n0 and 1, and control what fraction of the given channel is\\nplaced into the final image. (For example, if `r` is .5, and\\nthe value of the red channel is 100, the transformed color\\nwill have a red value of 50.)\\n\\n.. deprecated:: 7.4.0\\nUse TintMatrix(Color((r, g, b)))\\nwith the matrixcolor transform property.\\n\\n"],"irisin":["renpy","var","","","var","Also: **irisout**\\n\\nUse a rectangular iris to display the new screen, or hide the old\\nscreen. Instances of the CropMove transition class.\\n\\n"],"layeredimage":["renpy","var","","","var","Layered images are a way to combine multiple images into a single image, using attributes\\nand conditions to control which images are shown. The layeredimage namespace contains classes that allow you\\nto create and manipulate layered images from Python, the equivalent of the ``layeredimage`` statement.\\n\\n"],"layeredimage.format_function":["renpy","function","(what, name, group, variant, attribute, image, image_format, **kwargs)","","function","This is called to format the information about an attribute\\nor condition into a displayable. This can be replaced by a\\ncreator, but the new function should ignore unknown kwargs.\\n\\n`what`\\nA string giving a description of the thing being formatted,\\nwhich is used to create better error messages.\\n\\n`name`\\nThe name of the layeredimage.\\n\\n`group`\\nThe group of an attribute, None if not supplied or if it\'s\\npart of a condition.\\n\\n`variant`\\nThe variant argument to the group, or None if it is not\\nsupplied.\\n\\n`attribute`\\nThe attribute itself.\\n\\n`image`\\nEither a displayable or string.\\n\\n`image_format`\\nThe image_format argument of the LayeredImage.\\n\\nIf `image` is None, then `name`, `group` (if not None), `variant` (if not None),\\nand `attribute` are combined with underscores to create `image`, which\\nwill then be a string.\\n\\nIf `images` is a string, and `image_format` is not None, `image` is formatted\\ninto the string to get the final displayable.\\n\\nSo if `name` is \\"eileen\\", `group` is \\"expression\\", and\\n`attribute` is \\"happy\\", `image` would be set to \\"eileen_expression_happy\\".\\nIf `image_format` is \\"images/{image}.png\\",\\nthe final image Ren\'Py finds is \\"images/eileen_expression_happy.png\\".\\nBut note that it would have found the same image without the format\\nargument.\\n\\n"],"layeredimage.predict_all":["renpy","var","= None","","var","Sets the value of `predict_all` for the ConditionSwitches produced\\nby layeredimages\' ``if`` statements.\\n\\n"],"left":["renpy","var","","","var","Aligns to the bottom-left corner of the screen.\\n\\n"],"main_menu":["renpy","var","= False","","var","Ren\'Py sets this variable to True while in the main menu. This can be used\\nto have screens display differently while in the main menu.\\n\\n"],"menu":["renpy","var","= renpy.display_menu","","var","The function that\'s called to display the in-game menu. It should take the same\\narguments as renpy.display_menu, and pass unknown keyword arguments\\nunchanged. Assigning nvl_menu to this will display an nvl-mode menu.\\n\\n"],"mouse_visible":["renpy","var","= True","","var","Controls if the mouse is visible. This is automatically set to true when\\nentering the standard game menus.\\n\\n"],"move":["renpy","var","","","var","Takes 0.5 seconds to the move images that have changed location to\\ntheir new locations. An instance of the MoveTransition\\ntransition class.\\n\\nMove transitions, and similar transitions like ease, can only be applied\\nto a single layer or all layers at once, using the\\nwith statement. It will not work in other contexts\\nsuch as ATL, ComposeTransition,\\nor other ways of applying transitions.\\n\\n"],"moveinright":["renpy","var","","","var","Also: **moveinleft, moveintop, moveinbottom**\\n\\nThese move entering images onto the screen from the appropriate\\nside, taking 0.5 seconds to do so.\\n\\n"],"moveoutright":["renpy","var","","","var","Also: **moveoutleft, moveouttop, moveoutbottom**\\n\\nThese move leaving images off the screen via the appropriate side,\\ntaking 0.5 seconds to do so.\\n\\n"],"name_only":["renpy","var","= Character(...)","","var","This is a template character that is used when a string is given as the\\ncharacter name in a say statement. This\\n\\n```\\n\\"Eileen\\" \\"Hello, world.\\"\\n\\n```\\n\\nis equivalent to\\n\\n```\\n$ temp_char = Character(\\"Eileen\\", kind=name_only)\\ntemp_char \\"Hello, world.\\"\\n\\n```\\n\\nexcept that the ``temp_char`` variable is not used.\\n\\n"],"narrator":["renpy","var","= Character(...)","","var","This is the character that speaks narration (say statements that do not\\ngive a character or character name). This\\n\\n```\\n\\"Hello, world.\\"\\n\\n```\\n\\nis equivalent to\\n\\n```\\nnarrator \\"Hello, world.\\"\\n\\n```\\n\\n"],"nvl_clear":["renpy","function","()","","function","The Python equivalent of the ``nvl clear`` statement.\\n\\n"],"nvl_hide":["renpy","function","(with_)","","function","The Python equivalent of the ``nvl hide`` statement.\\n\\n`with_`\\nThe transition to use to hide the NVL-mode window.\\n\\n"],"nvl_menu":["renpy","function","(items)","","function","A Python function that displays a menu in NVL style. This is rarely\\nused directly. Instead, it\'s assigned to the menu variable,\\nusing something like\\n\\n```\\ndefine menu = nvl_menu\\n\\n```\\n\\n"],"nvl_show":["renpy","function","(with_)","","function","The Python equivalent of the ``nvl show`` statement.\\n\\n`with_`\\nThe transition to use to show the NVL-mode window.\\n\\n"],"offscreenleft":["renpy","var","","","var","Places the displayable off the left side of the screen,\\naligned to the bottom of the screen.\\n\\n"],"offscreenright":["renpy","var","","","var","Places the displayable off the left side of the screen,\\naligned to the bottom of the screen.\\n\\n"],"persistent":["renpy","var","","","var","The persistent namespace contains persistent data. Fields on this object start as None, and retain\\ntheir values between runs of the game, even when not loading a save slot.\\n\\nThe values of fields on the persistent object should be of Python-supplied types, like booleans, numbers,\\nstrings, lists, tuples, dicts, and sets. Classes you define should not be assigned to the persistent object.\\n\\n"],"persistent._clear":["renpy","function","(progress=False)","","function","Resets the persistent data, except for fields starting with ``__``.\\n\\n`progress`\\nIf true, also resets progress data that Ren\'Py keeps.\\n\\nNote that this will delete all persistent data, and will not re-apply\\ndefaults until Ren\'Py restarts.\\n\\n"],"persistent._hasattr":["renpy","function","(field_name)","","function","Tests whether the `field_name` persistent field has been set or not.\\nThis allows you to distinguish fields that have been explicitly set\\nto None from fields that have never been set.\\n\\n"],"pixellate":["renpy","var","","","var","Pixellates the old scene for .5 seconds, and the new scene for\\nanother .5 seconds. An instance of the Pixellate\\ntransition class.\\n\\n"],"position":["renpy","function","(absolute, relative, /)","","function","For example, ``position(-10, .5)``.\\n\\nA combination of `absolute`, which will be treated as an absolute\\nposition, and `relative`, which will be treated as a relative\\nposition, both being as described above. The two components are\\nadded together to form the final position.\\n\\nBoth parameters should always be passed, otherwise unspecified\\nresults may occur.\\n\\n"],"preferences":["renpy","var","","","var","The preferences namespace contains variables that contain preferences. While these can be read and set,\\nthe most common use is with the ``default`` statement, using syntax like\\n\\n```\\ndefault preferences.fullscreen = True\\n\\n```\\n\\n"],"preferences.afm_after_click":["renpy","var","= False","","var","If True, the auto-forward mode will be continued after a click. If False,\\na click will end auto-forward mode. The equivalent of the \\"auto-forward\\nafter click\\" preference.\\n\\n"],"preferences.afm_enable":["renpy","var","= False","","var","If True, auto-forward move is enabled, otherwise False. The equivalent\\nof the \\"auto-forward time\\" preference.\\n\\n"],"preferences.afm_time":["renpy","var","= 15","","var","The amount of time to wait for auto-forward mode. Bigger numbers are\\nslower, though the conversion to wall time is complicated, as the\\nspeed takes into account line length. The equivalent of the\\n\\"auto-forward\\" preference.\\n\\n"],"preferences.audio_when_minimized":["renpy","var","= True","","var","If False, audio channels are stopped when the window is minimized,\\nand resumed when the window is restored. If True, window state will\\nhave no effect on audio.\\nThe equivalent of the \\"audio when minimized\\" preference.\\n\\n"],"preferences.audio_when_unfocused":["renpy","var","= True","","var","If False, audio channels are stopped when the window loses keyboard focus,\\nand resumed when the window regains keyboard focus. If True, keyboard focus\\nwill have no effect on audio.\\nThe equivalent of the \\"audio when unfocused\\" preference.\\n\\n"],"preferences.desktop_rollback_side":["renpy","var","= \\"disable\\"","","var","When on a desktop platform, touches or clicks to this side of the window\\ncause rollback to occur. One of \\"left\\", \\"right\\", or \\"disable\\". This is\\nthe equivalend of the \\"rollback side\\" preference when on a desktop\\nplatform.\\n\\n"],"preferences.emphasize_audio":["renpy","var","= False","","var","If True, Ren\'Py will emphasize the audio channels found in config.emphasize_audio_channels\\nby reducing the volume of other channels. (For example, reducing the music volume when voice\\nis playing.) If False, this doesn\'t happen.\\n\\n"],"preferences.fullscreen":["renpy","var","= False","","var","This is True when Ren\'Py is in fullscreen mode, and False when it\\nis running in a window. The equivalent of the \\"display\\" preference.\\n\\n"],"preferences.get_mixer":["renpy","function","(mixer)","","function","Gets the volume for `mixer`. If the mixer is muted, this returns\\n0.0. The is returns a number between 0.0 and 1.0, where 0.0 is -40 dB\\n(power) and 1.0 is 0 dB (power).\\n\\n"],"preferences.get_mute":["renpy","function","(mixer)","","function","Gets the mute setting for `mixer`.\\n"],"preferences.gl_framerate":["renpy","var","= None","","var","This is either an integer, or None. If not None, it\'s a target framerate\\nthat Ren\'Py will attempt to achieve. If this is set low (for example, to\\n30), on a monitor with a high framerate (say, 60 frames per second),\\nRen\'Py will only draw on every other frame.\\n\\nIf None, Ren\'Py will attempt to draw at the monitor\'s full framerate.\\n\\n"],"preferences.gl_powersave":["renpy","var","= True","","var","This determines how often Ren\'Py will redraw an unchanging screen. If True,\\nRen\'Py will only draw the screen 5 times a second. If False, it will always\\ndraw at the full framerate possible.\\n\\n"],"preferences.gl_tearing":["renpy","var","= False","","var","This determines if tearing (True) or frameskip (False) is the preferred\\nbehavior when the game can\'t keep up with its intended framerate.\\n\\n"],"preferences.language":["renpy","var","= None","","var","The language that the player has selected to use when running the game.\\nThis is None for the default language or a string containing a language\\nthe game is translated to.\\n\\nThis can be used to set the default language, and can be read to determine\\nthe current language. The Language action can be used to change\\nthe language.\\n\\nSee translation for more information.\\n\\n"],"preferences.mobile_rollback_side":["renpy","var","= \\"disable\\"","","var","When on a mobile platform, touches or clicks to this side of the window\\ncause rollback to occur. One of \\"left\\", \\"right\\", or \\"disable\\". This is\\nthe equivalend of the \\"rollback side\\" preference when on a mobile\\nplatform.\\n\\n"],"preferences.mouse_move":["renpy","var","= True","","var","If True, the mouse will automatically move to a selected button. If False,\\nit will not. The equivalent of the \\"automatic move\\" preference.\\n\\n"],"preferences.restore_window_position":["renpy","var","= True","","var","If True, Ren\'Py will attempt to restore the window position when the game\\nis restarted. If False, Ren\'Py will not attempt to restore the window\\nposition. The equivalent of the \\"restore window position\\" preference.\\n\\n"],"preferences.set_mixer":["renpy","function","(mixer, volume)","","function","Sets `mixer` to `volume`.\\n\\n`mixer`\\nA string giving the name of the mixer. By default, the mixers\\nare \\"main\\", \\"music\\", \\"sfx\\", and \\"voice\\" (\\"main\\" being a special mixer).\\n\\n`volume`\\nA number between 0.0 and 1.0, where 0.0 is -40 dB (power), and 1.0 is 0 dB\\n(power).\\n\\n"],"preferences.set_mute":["renpy","function","(mixer, mute)","","function","Sets the mute setting for `mixer`. If `mute` is true, the mixer is muted.\\nIf `mute` is false, the mixer\'s volume is reverted to its value before\\nit was muted.\\n\\n"],"preferences.show_empty_window":["renpy","var","= True","","var","If True, the window show and window auto statements will function. If\\nFalse, those statements are disabled. The equivalent of the \\"show empty window\\"\\npreference.\\n\\n"],"preferences.skip_after_choices":["renpy","var","= False","","var","If True, skipping will resume after a choice. If False, a choice will\\nprevent Ren\'Py from skipping. The equivalent of the \\"after choices\\"\\npreference.\\n\\n"],"preferences.skip_unseen":["renpy","var","= False","","var","When True, Ren\'Py will skip all text. When False, Ren\'Py will\\nonly skip text that has been read by the player in any session.\\nThe equivalent of the \\"skip\\" preference.\\n\\n"],"preferences.system_cursor":["renpy","var","= False","","var","If True, the system cursor is forced to be used, ignoring the value of\\nconfig.mouse and config.mouse_displayable. If False, it\\nwill not. The equivalent of the \\"system cursor\\" preference.\\n\\n"],"preferences.text_cps":["renpy","var","= 0","","var","The speed of text display. 0 is infinite, otherwise this is the number\\nof characters per second to show. The equivalent of the \\"text speed\\"\\npreference.\\n\\n"],"preferences.transitions":["renpy","var","= 2","","var","Determines which transitions should be shown. 2 shows all transitions,\\n0 shows no transitions. (1 is reserved.) The equivalent of the\\n\\"transitions\\" preference.\\n\\n"],"preferences.video_image_fallback":["renpy","var","= False","","var","If True, images are displayed instead of videosprites. If False,\\nvideo sprites are displayed normally. The equivalent (inverted) of the\\n\\"video sprites\\" preference.\\n\\n"],"preferences.voice_after_game_menu":["renpy","var","= False","","var","If True, voice will continue playing after the game menu is shown. If False,\\nvoice will be stopped when the game menu is shown. The equivalent of the\\n\\"voice after menu\\" preference.\\n\\n"],"preferences.voice_sustain":["renpy","var","= False","","var","If True, voice keeps playing until finished, or another voice line\\nreplaces it. If False, the voice line ends when the line of dialogue\\nadvances. The equivalent of the \\"voice sustain\\" preference.\\n\\n"],"preferences.volume":["renpy","var","","","var","The preferences namespace contains variables that set the default volumes for each mixer. These should\\nbe set using the ``default`` statement, like\\n\\n```\\ndefault preferences.volume.music = 0.5\\n\\n```\\n\\n"],"preferences.volume.main":["renpy","var","= 1.0","","var","The default volume of the main mixer, which is applied to all channels in\\naddition to the per-channel mixer.This should be a number between 0.0 and 1.0, with 1.0 being full volume.\\n\\n"],"preferences.volume.music":["renpy","var","= 1.0","","var","The default volume of the music mixer, which is used for the music and\\nmovie channels. This should be a number between 0.0 and 1.0,\\nwith 1.0 being full volume.\\n\\n"],"preferences.volume.sfx":["renpy","var","= 1.0","","var","The default volume of the sfx mixer, which is used for the sound and\\naudio channels. This should be a number between 0.0 and 1.0,\\nwith 1.0 being full volume.\\n\\n"],"preferences.volume.voice":["renpy","var","= 1.0","","var","The default volume of the voice mixer, which is used for the voice\\nchannel (and hence the voice statement, auto-voice, etc.).\\nThis should be a number between 0.0 and 1.0, with 1.0 being full volume.\\n\\n"],"preferences.wait_voice":["renpy","var","= True","","var","If True, auto-forward mode will wait for voice files and self-voicing to\\nfinish before advancing. If False, it will not. The equivalent of the\\n\\"wait for voice\\" preference.\\n\\n"],"preferences.web_cache_preload":["renpy","var","= False","","var","If True the game files will be loaded into the web browser\'s cache,\\nallowing the game to be played offline. If False, the game files will\\nnot be loaded into the web browser\'s cache, and the game will require\\ninternet access to play.\\nThe equivalent of the \\"web cache preload\\" preference.\\n\\n"],"pushright":["renpy","var","","","var","Also: **pushleft, pushup, pushdown**\\n\\nThese use the new scene to slide the old scene out the named\\nside. Instances of the PushMove transition class.\\n\\n"],"renpy":["renpy","var","","","var","The renpy namespace contains function and classes that are part of the Ren\'Py engine itself. These can be the\\nequivalent of Ren\'Py language statements, or can introduce functionality that does not merit a dedicated statement.\\n\\n"],"renpy.Displayable":["renpy","class","","","class","Base class for creator-defined displayables.\\n\\n.. method:: __init__(**properties)\\n\\nA subclass may override the constructor, perhaps adding new\\nparameters. If it does, it should pass all unknown keyword\\narguments to the renpy.Displayable constructor, with the\\ncall\\n\\n```\\nsuper(MyDisplayable, self).__init__(**properties)\\n\\n```\\n\\n.. method:: render(self, width, height, st, at)\\n\\nSubclasses must override this, to return a renpy.Render\\nobject. The render object determines what, if anything, is\\nshown on the screen.\\n\\n`width`, `height`\\nThe amount of space available to this displayable, in\\npixels.\\n\\n`st`\\nA float, the shown timebase, in seconds. The shown\\ntimebase begins when this displayable is first shown\\non the screen.\\n\\n`at`\\nA float, the animation timebase, in seconds. The animation\\ntimebase begins when an image with the same tag was shown,\\nwithout being hidden. (When the displayable is shown\\nwithout a tag, this is the same as the shown timebase.)\\n\\nThe render method is called when the displayable is first\\nshown. It can be called again if renpy.redraw\\nis called on this object.\\n\\n.. method:: event(self, ev, x, y, st)\\n\\nThe event method is called to pass a pygame event to\\nthe creator-defined displayable. If the event method returns\\na value other than None, that value is returned as the result\\nof the interaction. If the event method returns None, the event\\nis passed on to other displayables.\\n\\nTo ignore the event without returning None, raise renpy.IgnoreEvent.\\n\\nThe event method exists on other displayables, allowing the\\ncreator-defined displayable to pass on the event.\\n\\n`ev`\\nAn `event object <http://www.pygame.org/docs/ref/event.html>`_\\n\\n`x`, `y`\\nThe x and y coordinates of the event, relative to the\\nupper-left corner of the displayable. These should\\nbe used in preference to position information\\nfound in the pygame event objects.\\n\\n`st`\\nA float, the shown timebase, in seconds.\\n\\nAn event is generated at the start of each interaction, and\\nrenpy.timeout can be used to cause another event to\\noccur.\\n\\n.. method:: per_interact(self)\\n\\nThis method is called at the start of each interaction. It\\ncan be used to trigger a redraw, and probably should be used\\nto trigger a redraw if the object participates in rollback.\\n\\n.. method:: visit(self)\\n\\nIf the displayable has child displayables, this method should\\nbe overridden to return a list of those displayables. This\\nensures that the per_interact methods of those displayables\\nare called, and also allows images used by those displayables\\nto be predicted.\\n\\n.. method:: place(self, dest, x, y, width, height, surf, main=True)\\n\\nThis places a render (which must be of this displayable)\\nwithin a bounding area. Returns an (x, y) tuple giving the location\\nthe displayable was placed at.\\n\\n`dest`\\nIf not None, the `surf` will be blitted to `dest` at the\\ncomputed coordinates.\\n\\n`x`, `y`, `width`, `height`\\nThe bounding area.\\n\\n`surf`\\nThe render to place.\\n\\n`main`\\nThis is passed to Render.blit().\\n\\n"],"renpy.Render":["renpy","class","(width, height)","","class","Creates a new Render object.\\n\\n`width`, `height`\\nThe width and height of the render object, in pixels.\\n\\n\\n.. method:: blit(source, pos, main=True)\\n\\nDraws another render object into this render object.\\n\\n`source`\\nThe render object to draw.\\n\\n`pos`\\nThe location to draw into. This is an (x, y) tuple\\nwith the coordinates being pixels relative to the\\nupper-left corner of the target render.\\n\\n`main`\\nA keyword-only parameter. If true, `source` will be displayed\\nin the style inspector.\\n\\n.. method:: place(d, x=0, y=0, width=None, height=None, st=None, at=None, render=None, main=True)\\n\\nRenders `d`, a displayable, and places it into the rectangle defined by the `x`, `y`,\\n`width`, and `height`, using Ren\'Py\'s standard placement algorithm.\\nReturns an (x, y) tuple giving the location\\nthe displayable was placed at. Location is computed\\nby calling Displayable.place() method.\\n\\n`x`, `y`, `width`, `height`\\nThe rectangle to place in. If `width` or `height`, when None,\\nare the width and height of this render, respectively.\\n\\n`st`, `at`\\nThe times passed to Render. If None, defaults to the times\\npassed to the render method calling this method.\\n\\n`render`\\nIf not None, this is used instead of rendering `d`.\\n\\n`main`\\nAs for .blit().\\n\\n.. method:: canvas()\\n\\nReturns a canvas object. A canvas object has methods\\ncorresponding to the\\n`pygame.draw <http://www.pygame.org/docs/ref/draw.html>`_\\nfunctions, with the first parameter (the surface) omitted.\\n\\nIn Ren\'Py, the arc and ellipse functions aren\'t implemented.\\n\\nCanvas objects also have a get_surface() method that returns the\\npygame Surface underlying the canvas.\\n\\n.. method:: get_size()\\n\\nReturns a (width, height) tuple giving the size of\\nthis render.\\n\\n.. method:: subsurface(rect)\\n\\nReturns a render consisting of a rectangle cut out of this\\nrender.\\n\\n`rect`\\nA (x, y, width, height) tuple.\\n\\n.. method:: zoom(xzoom, yzoom)\\n\\nSets the zoom level of the children of this displayable in the\\nhorizontal and vertical axes. Only the children of the displayable\\nare zoomed – the width, height, and blit coordinates are not zoomed.\\n\\nThe following attributes and methods are only used when model-based rendering\\nis enabled:\\n\\nattribute mesh\\n\\nThis field enables model-based rendering for this Render. If true:\\n\\nIf set to True:\\n\\n* All of the children of this displayable are rendered to textures.\\n* A mesh the size of the first child is assocated with this displayable.\\n* A model is created with the mesh, shaders, uniforms, and properties\\nassociated with this Render.\\n\\nThe model will then be drawn in a single operation.\\n\\n.. method:: add_shader(shader)\\n\\nThis causes the shader part `shader` to be used when this Render\\nor its children are drawn. The part should be a string, or can be a\\nstring beginning with \\"-\\" to prevent a shader from being drawn.\\n\\n.. method:: add_uniform(name, value)\\n\\nCauses the uniform `name` to have `value` when this Render or\\nits children are drawn.\\n\\n.. method:: add_property(name, value)\\n\\nCauses the GL property `name` to have `value` when this Render or\\none of its children are drawn.\\n\\n\\n\\n"],"renpy.add_layer":["renpy","function","(layer, above=None, below=None, menu_clear=True, sticky=None)","","function","Adds a new layer to the screen. If the layer already exists, this\\nfunction does nothing.\\n\\nOne of `behind` or `above` must be given.\\n\\n`layer`\\nA string giving the name of the new layer to add.\\n\\n`above`\\nIf not None, a string giving the name of a layer the new layer will\\nbe placed above.\\n\\n`below`\\nIf not None, a string giving the name of a layer the new layer will\\nbe placed below.\\n\\n`menu_clear`\\nIf true, this layer will be cleared when entering the game menu\\ncontext, and restored when leaving it.\\n\\n`sticky`\\nIf true, any tags added to this layer will have it become their\\ndefault layer until they are hidden. If None, this layer will be\\nsticky only if other sticky layers already exist.\\n\\n"],"renpy.add_python_directory":["renpy","function","(path)","","function","Adds `path` to the list of paths searched for Python modules and packages.\\nThe path should be a string relative to the game directory. This must be\\ncalled before an import statement.\\n\\n"],"renpy.add_to_all_stores":["renpy","function","(name, value)","","function","Adds the `value` by the `name` to all creator defined namespaces. If the name\\nalready exist in that namespace - do nothing for it.\\n\\nThis function may only be run from inside an init block. It is an\\nerror to run this function once the game has started.\\n\\n"],"renpy.alt":["renpy","function","(s, translate=True, force=False)","","function","This queues `s` to be spoken. If `translate` is true, then the string\\nwill be translated before it is spoken. If `force` is true, then the\\nstring will be spoken even if self-voicing is disabled.\\n\\nThis is intended for accessibility purposes, and should not be used\\nfor gameplay purposes.\\n\\n"],"renpy.android":["renpy","var","","","var","Has a true value when running on Android.\\n\\n"],"renpy.audio.filter":["renpy","var","","","var","The renpy.audio.filter namespace contains classes and functions that create audio filters.\\n\\n"],"renpy.audio.filter.Allpass":["renpy","function","(frequency=350, q=1.0)","","function","An allpass filter allows all frequencies through, but changes the phase\\nrelationship between the various frequencies.\\n\\n\\n`frequency`\\nThe frequency at the center of the phase change.\\n\\n`q`\\nControls the sharpness of the phase shift. The higher the value, the\\nsharper the phase shift.\\n\\n"],"renpy.audio.filter.Bandpass":["renpy","function","(frequency=350, q=1.0)","","function","A bandpass filter.\\n\\n\\n`frequency`\\nThe center frequency.\\n\\n`q`\\nControls the width of the band. The width becomes narrower as the\\nvalue of Q increases.\\n\\n"],"renpy.audio.filter.Comb":["renpy","class","(delay, filter=None, multiplier=1.0, wet=True)","","class","A comb filter. A comb filter consists of a delay that is filtered and\\nmutiplied, mixed with its input, and then fed back into the delay,\\ncausing the filter to be applied multiple times.\\n\\n`delay`\\nThe delay, in seconds. If a list of delays is provided, each subchannel\\nwill be delayed by the corresponding amount. Each delay must be at least\\n0.01 seconds.\\n\\n`filter`\\nThe filter to apply to the delayed signal. If None, the Null filter\\nis used.\\n\\n`multiplier`\\nThe amount to multiply the filtered signal by.\\n\\n`wet`\\nIf True, the output of the filter is the sum of the input and the\\nfiltered and multiplied signal.  If False, the output is just the filtered\\nand muliplied signal.\\n\\n"],"renpy.audio.filter.Delay":["renpy","class","(delay)","","class","This filter implements a delay. Samples that are provided to the input\\nemerge from the output after `delay` seconds.\\n\\n`delay`\\nThe delay, in seconds. If a list of delays is provided, each subchannel\\nwill be delayed by the corresponding amount. Each delay must be at least\\n0.01 seconds.\\n\\n"],"renpy.audio.filter.Highpass":["renpy","function","(frequency=350, q=1.0)","","function","A highpass filter with 12/dB octave rolloff.\\n\\n`frequency`\\nThe cutoff frequency.\\n\\n`q`\\nControls how peaked the response will be in decibels. For this filter\\ntype, this value is not a traditional Q, but is a resonance value in decibels.\\n\\n"],"renpy.audio.filter.Highshelf":["renpy","function","(frequency=350, gain=0)","","function","A highshelf filter that allows all frequencies through, but boosts those\\nabove a certain frequency by a certain amount.\\n\\n`frequency`\\nThe lower frequency.\\n\\n`gain`\\nThe amount to boost the frequencies above the lower frequency,\\nin decibels.\\n\\n"],"renpy.audio.filter.Lowpass":["renpy","function","(frequency=350, q=1.0)","","function","A lowpass filter with 12/dB octave rolloff.\\n\\n`frequency`\\nThe cutoff frequency.\\n\\n`q`\\nControls how peaked the response will be in decibels. For this filter\\ntype, this value is not a traditional Q, but is a resonance value in decibels.\\n\\n"],"renpy.audio.filter.Lowshelf":["renpy","function","(frequency=350, gain=0)","","function","A lowshelf filter that allows all frequencies through, but boosts those\\nbelow a certain frequency by a certain amount.\\n\\n`frequency`\\nThe upper frequency.\\n\\n`gain`\\nThe amount to boost the frequencies below the upper frequency,\\nin decibels.\\n\\n"],"renpy.audio.filter.Mix":["renpy","class","(*filters)","","class","An audio filter that splits its input into multiple streams, applies\\neach of its arguments to a stream, and mixes those streams by summing\\nthem together.\\n\\nFor example\\n\\n```\\ninit python:\\n\\n    import renpy.audio.filter as af\\n    \\n    # This mixes the the unchanged input with a delay.\\n    $ echo = af.Mix(af.Null(), af.Delay(.3))\\n    \\n```\\n\\n"],"renpy.audio.filter.Multiply":["renpy","class","(multiplier)","","class","An audio filter that multiplies its input by `multiplier`.\\n\\n"],"renpy.audio.filter.Notch":["renpy","function","(frequency=350, q=1.0)","","function","The opposite of a bandpass filter. Frequencies inside a range surrounding\\n`frequency` are suppressed, while other frequences are passed through.\\n\\n`frequency`\\nThe center frequency.\\n\\n`q`\\nControls the width of the notch. The width becomes narrower as the\\nvalue of q increases.\\n\\n"],"renpy.audio.filter.Null":["renpy","class","()","","class","An audio filter that passes it\'s input through to its output unchanged.\\n\\n"],"renpy.audio.filter.Peaking":["renpy","function","(frequency=350, q=1.0, gain=0)","","function","A peaking filter that allows all frequencies through, but boosts those\\naround a certain frequency by a certain amount.\\n\\n`frequency`\\nThe center frequency.\\n\\n`q`\\nControls the sharpness of the peak. The higher the value, the sharper\\nthe peak.\\n\\n`gain`\\nThe amount to boost the frequencies around the center frequency,\\nin decibels.\\n\\n"],"renpy.audio.filter.Reverb":["renpy","function","(resonance=.5, dampening=880, wet=1.0, dry=1.0, delay_multiplier=1.0, delay_times=[0.0253, 0.0269, 0.029, 0.0307, 0.0322, 0.0338, 0.0353, 0.0367], delay_subchannel=0.001, allpass_frequences=[225, 556, 441, 341])","","function","An artificial reverb filter that simulates the sound of a room or hall,\\nsomewhat inspired by Freeverb.\\n\\n`resonance`\\nThe amount of feedback in the reverb. This should be between 0 and 1.\\nLarger numbers make the reverb last longer. Too large values will\\ncause the reverb to go out of control.\\n\\n`dampening`\\nThis applies a lowpass filter to each reverberation, simulating\\nthe lost of high frequences as sound passes through the air.\\n\\n`wet`\\nA multiplier that is applied to the reverb signal before it is passed\\nto the output.\\n\\n`dry`\\nA multiplier that is applied to the input signal before it is passed\\nto the output. Set this to 0.0 to only hear the reverb, not the original\\nsound.\\n\\n`delay_multiplier`\\nA multiplier that is applied to the delay times. This can be used to\\nadjust the length of the reverb.\\n\\n`delay_times`\\nA list of delay times, in seconds, that are used to create the early\\nreflections. These are used to create comb filters.\\n\\n`delay_subchannel`\\nThe amount of time, in seconds, that is added to each delay time to\\ncreate a second subchannel. This is used to create a stereo effect.\\n\\n`allpass_frequences`\\nA list of frequences, in hertz, that are used to create allpass filters\\nthat simulate late reflections.\\n\\n"],"renpy.audio.filter.Sequence":["renpy","class","(*filters)","","class","An AudioFilter that applies its input to a sequence of filters, in order.\\nThis is used internally when a list of audiofilters is given, so it should\\nbe rare to use this directly.\\n\\n"],"renpy.audio.filter.WetDry":["renpy","class","(filter, wet=1.0, dry=1.0)","","class","A filter that mixes its input with the output of a filter.\\n\\n`filter`\\nThe filter to apply to the input.\\n\\n`wet`\\nA multiplier, generally between 0.0 and 1.0, that controls the amount\\nof the filter that is mixed in.\\n\\n`dry`\\nA multiplier, generally between 0.0 and 1.0, that controls the amount\\nof the input that is mixed in.\\n\\n"],"renpy.block_rollback":["renpy","function","()","","function","Prevents the game from rolling back to before the current\\nstatement.\\n\\n"],"renpy.call":["renpy","function","(label, *args, from_current=False, **kwargs)","","function","Causes the current Ren\'Py statement to terminate, and a jump to a\\n`label` to occur. When the jump returns, control will be passed\\nto the statement following the current statement.\\n\\nThe label must be either of the form \\"global_name\\" or \\"global_name.local_name\\".\\nThe form \\".local_name\\" is not allowed.\\n\\n`from_current`\\nIf true, control will return to the current statement, rather than\\nthe statement following the current statement. (This will lead to\\nthe current statement being run twice. This must be passed as a\\nkeyword argument.)\\n\\n"],"renpy.call_in_new_context":["renpy","function","(label, *args, **kwargs)","","function","This creates a new context, and then starts executing Ren\'Py script\\nfrom the given label in that context. Rollback is disabled in the\\nnew context, and saving/loading will occur in the top level\\ncontext.\\n\\nUse this to begin a second interaction with the user while\\ninside an interaction.\\n\\nThis takes an optional  keyword argument:\\n\\n`_clear_layers`\\nIf True (the default), the layers are cleared before the new\\ninteraction starts. If False, the layers are not cleared. If a\\nlist, only the layers in the list are cleared.\\n\\n"],"renpy.call_replay":["renpy","function","(label, scope={})","","function","Calls a label as a memory.\\n\\nThe `scope` argument is used to set the initial values of variables in the\\nmemory context.\\n\\n"],"renpy.call_screen":["renpy","function","(_screen_name, *args, _with_none=True, _mode=\\"screen\\", **kwargs)","","function","The programmatic equivalent of the call screen statement.\\n\\nThis shows `_screen_name` as a screen, then causes an interaction\\nto occur. The screen is hidden at the end of the interaction, and\\nthe result of the interaction is returned.\\n\\nPositional arguments, and keyword arguments that do not begin with\\n_ are passed to the screen.\\n\\nIf `_with_none` is false, \\"with None\\" is not run at the end of end\\nof the interaction.\\n\\nIf `_mode` is passed, it will be the mode of this interaction,\\notherwise the mode will be \\"screen\\".\\n\\n"],"renpy.call_stack_depth":["renpy","function","()","","function","Returns the depth of the call stack of the current context - the number\\nof calls that have run without being returned from or popped from the\\ncall stack.\\n\\n"],"renpy.can_fullscreen":["renpy","function","()","","function","Returns True if the current platform supports fullscreen mode, False\\notherwise.\\n\\n"],"renpy.can_load":["renpy","function","(filename, test=False)","","function","Returns true if `filename` exists as a save slot, and False otherwise.\\n\\n"],"renpy.can_rollback":["renpy","function","()","","function","Returns true if we can rollback.\\n\\n"],"renpy.can_show":["renpy","function","(name, layer=None, tag=None)","","function","Determines if `name` can be used to show an image. This interprets `name`\\nas a tag and attributes. This is combined with the attributes of the\\ncurrently-showing image with `tag` on `layer` to try to determine a unique image\\nto show. If a unique image can be show, returns the name of that image as\\na tuple. Otherwise, returns None.\\n\\n`tag`\\nThe image tag to get attributes from. If not given, defaults to the first\\ncomponent of `name`.\\n\\n`layer`\\nThe layer to check. If None, uses the default layer for `tag`.\\n\\n"],"renpy.cancel_gesture":["renpy","function","()","","function","Cancels the current gesture, preventing the gesture from being recognized.\\nThis should be called by displayables that have gesture-like behavior.\\n\\n"],"renpy.capture_focus":["renpy","function","(name=\'default\')","","function","If a displayable is currently focused, captured the rectangular bounding\\nbox of that displayable, and stores it with `name`. If not, removes any\\nfocus stored with `name`.\\n\\nCaptured focuses are not saved when the game is saveed.\\n\\n`name`\\nShould be a string. The name \\"tooltip\\" is special, as it\'s\\nautomatically captured when a displayable with a tooltip gains focus.\\n\\n"],"renpy.change_language":["renpy","function","(language, force=False)","","function","Changes the current language to `language`, which can be a string or\\nNone to use the default language.\\n\\n"],"renpy.change_zorder":["renpy","function","(layer, tag, zorder)","","function","Changes the zorder of `tag` on `layer` to `zorder`.\\n\\n"],"renpy.check_image_attributes":["renpy","function","(tag, attributes)","","function","Checks to see if there is a unique image with the given tag and\\nattributes. If there is, returns the attributes in order.\\nOtherwise, returns None.\\n\\n"],"renpy.check_permission":["renpy","function","(permission)","","function","Checks to see if an Android permission has been granted to this application.\\n\\n`permission`\\nA string giving the name of the permission, for example, \\"android.permission.WRITE_EXTERNAL_STORAGE\\".\\n\\nReturns true if the permission has been granted, false if it has not or if called on\\na non-Android platform.\\n\\n"],"renpy.check_text_tags":["renpy","function","(s, check_unclosed=False)","","function","Checks the text tags in s for correctness. Returns an error string if there is\\nan error, or None if there is no error.\\n\\n"],"renpy.checkpoint":["renpy","function","(data=None, *, hard=True)","","function","Makes the current statement a checkpoint that the user can rollback to. Once\\nthis function has been called, there should be no more interaction with the\\nuser in the current statement.\\n\\nThis will also clear the current screenshot used by saved games.\\n\\n`data`\\nThis data is returned by renpy.roll_forward_info when the\\ngame is being rolled back.\\n\\n`hard`\\nIf true, this is a hard checkpoint that rollback will stop at. If false,\\nthis is a soft checkpoint that will not stop rollback.\\n\\n"],"renpy.choice_for_skipping":["renpy","function","()","","function","Tells Ren\'Py that a choice is coming up soon. This currently has\\ntwo effects:\\n\\n* If Ren\'Py is skipping, and the Skip After Choices preferences is set\\nto stop skipping, skipping is terminated.\\n\\n* An auto-save is triggered.\\n\\n"],"renpy.clear_attributes":["renpy","function","(tag, layer=None)","","function","Clears all image attributes for the `tag` image.\\nIf the tag had no attached image attributes, this does nothing.\\n\\n`layer`\\nThe layer to check. If None, uses the default layer for `tag`.\\n\\n"],"renpy.clear_capture_focus":["renpy","function","(name=\'default\')","","function","Clear the captured focus with `name`.\\nIf `name` is None, clear all captured focuses.\\n\\n"],"renpy.clear_game_runtime":["renpy","function","()","","function","Resets the game runtime counter.\\n\\n"],"renpy.clear_keymap_cache":["renpy","function","()","","function","Clears the keymap cache. This allows changes to config.keymap to\\ntake effect without restarting Ren\'Py.\\n\\n"],"renpy.clear_retain":["renpy","function","(layer=\'screens\', prefix=\'_retain\')","","function","Clears all retained screens\\n\\n"],"renpy.confirm":["renpy","function","(message)","","function","This causes the a yes/no prompt screen with the given message\\nto be displayed, and dismissed when the player hits yes or no.\\n\\nReturns True if the player hits yes, and False if the player hits no.\\n\\n`message`\\nThe message that will be displayed.\\n\\nSee Confirm for a similar Action.\\n\\n"],"renpy.const":["renpy","function","(name)","","function","Declares a variable in the store to be constant.\\n\\nA variable is constant if nothing can change its value, or any value\\nreached by indexing it or accessing its attributes. Variables must\\nremain constant out of define, init, and translate python blocks.\\n\\n`name`\\nA string giving the name of the variable to declare constant.\\n\\n"],"renpy.context":["renpy","function","()","","function","Returns an object that is unique to the current context. The object\\nis copied when entering a new context, but changes to the copy do\\nnot change the original.\\n\\nThe object is saved and participates in rollback.\\n\\n"],"renpy.context_dynamic":["renpy","function","(*variables)","","function","This can be given one or more variable names as arguments. This makes the\\nvariables dynamically scoped to the current context. When returning to the\\nprior context, the variables will be reset to the value they had when this\\nfunction was called.\\n\\nVariables in named stores are supported.\\n\\nExample calls are\\n\\n```\\n$ renpy.context_dynamic(\\"x\\", \\"y\\", \\"z\\")\\n$ renpy.context_dynamic(\\"mystore.serial_number\\")\\n\\n```\\n\\n"],"renpy.context_nesting_level":["renpy","function","()","","function","Returns the nesting level of the current context. This is 0 for the\\noutermost context (the context that is saved, loaded, and rolled-back),\\nand is non-zero in other contexts, such as menu and replay contexts.\\n\\n"],"renpy.copy_images":["renpy","function","(old, new)","","function","Copies images beginning with one prefix to images beginning with\\nanother. For example\\n\\n```\\nrenpy.copy_images(\\"eileen\\", \\"eileen2\\")\\n\\n```\\n\\nwill create an image beginning with \\"eileen2\\" for every image beginning\\nwith \\"eileen\\". If \\"eileen happy\\" exists, \\"eileen2 happy\\" will be\\ncreated.\\n\\n`old`\\nA space-separated string giving the components of the old image\\nname.\\n\\n`new`\\nA space-separated string giving the components of the new image\\nname.\\n\\n"],"renpy.copy_save":["renpy","function","(old, new)","","function","Copies the save at `old` to `new`. (Does nothing if `old` does not\\nexist.)\\n\\n"],"renpy.count_dialogue_blocks":["renpy","function","()","","function","Returns the number of dialogue blocks in the game\'s original language.\\n\\n"],"renpy.count_newly_seen_dialogue_blocks":["renpy","function","()","","function","Returns the number of dialogue blocks the user has seen for the first time\\nduring this session.\\n\\n"],"renpy.count_seen_dialogue_blocks":["renpy","function","()","","function","Returns the number of dialogue blocks the user has seen in any play-through\\nof the current game.\\n\\n"],"renpy.current_screen":["renpy","function","()","","function","Returns information about the screen currently being\\nupdated, rendered, or processed.\\n\\nSee get_screen for documented fields on the returned object.\\n\\n"],"renpy.diff_memory":["renpy","function","(update=True, skip_constants=False)","","function","Profiles objects, surface, and texture memory use by Ren\'Py and the game.\\nWrites (to memory.txt and stdout) the difference in memory usage from the\\nlast time this function was called with `update` true.\\n\\nThe accounting is by names in the store and in the Ren\'Py implementation\\nthat the memory is reachable from. If an object is reachable from more\\nthan one name, it\'s assigned to the name it\'s most directly reachable\\nfrom.\\n\\n`skip_constants`\\nIf True, the profiler will skip scanning of large Ren\'Py\'s containers,\\nthat are intended to be immutable after startup.\\n\\nAs it has to scan all memory used by Ren\'Py, this function may take a\\nlong time to complete.\\n\\n"],"renpy.display_menu":["renpy","function","(items, *, interact=True, screen=\\"choice\\", type=\\"menu\\", _layer=None, args=None, kwargs=None)","","function","This displays a menu to the user. `items` should be a list of 2-item tuples.\\nIn each tuple, the first item is a textual label, and the second item is\\nthe value to be returned if that item is selected. If the value is None,\\nthe first item is used as a menu caption.\\n\\nThis function takes many optional arguments, of which only a few are documented.\\nExcept for `items`, all arguments should be given as keyword arguments.\\n\\n`interact`\\nIf false, the menu is displayed, but no interaction is performed.\\n\\n`screen`\\nThe name of the screen used to display the menu.\\n\\n`type`\\nMay be \\"menu\\" or \\"nvl\\". If \\"nvl\\", the menu is displayed in NVL mode.\\nOtherwise, it is displayed in ADV mode.\\n\\n`_layer`\\nThe layer to display the menu on. If not given, defaults to config.choice_layer\\nfor normal choice menus, and config.nvl_choice_layer for NVL choice menus.\\n\\n`_args`\\nIf not None, this should be a tuple containing the positional menu arguments\\nsupplied to this menu.\\n\\n`_kwargs`\\nIf not None, this should be a dict containing the keyword menu arguments\\nsupplied to this menu.\\n\\nNote that most Ren\'Py games do not use menu captions, but use narration\\ninstead. To display a menu using narration, write\\n\\n```\\n$ narrator(\\"Which direction would you like to go?\\", interact=False)\\n$ result = renpy.display_menu([ (\\"East\\", \\"east\\"), (\\"West\\", \\"west\\") ])\\n\\n```\\n\\n"],"renpy.display_notify":["renpy","function","(message)","","function","The default implementation of renpy.notify.\\n\\n"],"renpy.displayable":["renpy","function","(d, scope=None)","","function","This takes `d`, which may be a displayable object or a string. If it\'s\\na string, it converts that string into a displayable using the usual\\nrules.\\n\\n"],"renpy.dynamic":["renpy","function","(*variables, **kwargs)","","function","This can be given one or more variable names as arguments. This makes the\\nvariables dynamically scoped to the current call. When the call returns, the\\nvariables will be reset to the value they had when this function was called.\\n\\nVariables in named stores are supported.\\n\\nIf the variables are given as keyword arguments, the value of the argument\\nis assigned to the variable name.\\n\\nExample calls are\\n\\n```\\n$ renpy.dynamic(\\"x\\", \\"y\\", \\"z\\")\\n$ renpy.dynamic(\\"mystore.serial_number\\")\\n$ renpy.dynamic(players=2, score=0)\\n\\n```\\n\\n"],"renpy.emscripten":["renpy","var","","","var","Has a true value when running in the browser.\\n\\n"],"renpy.end_interaction":["renpy","function","(value)","","function","If `value` is not None, immediately ends the current interaction, causing\\nthe interaction to return `value`. If `value` is None, does nothing.\\n\\nThis can be called from inside the render and event methods of a\\ncreator-defined displayable.\\n\\n"],"renpy.end_replay":["renpy","function","()","","function","If we\'re in a replay, ends the replay immediately. Otherwise, does\\nnothing.\\n\\n"],"renpy.error":["renpy","function","(msg)","","function","Reports `msg`, a string, as as error for the user. This is logged as a\\nparse or lint error when approprate, and otherwise it is raised as an\\nexception.\\n\\n"],"renpy.exists":["renpy","function","(filename)","","function","Returns true if the given filename can be found in the\\nsearchpath. This only works if a physical file exists on disk. It\\nwon\'t find the file if it\'s inside of an archive.\\n\\nYou almost certainly want to use renpy.loadable in preference\\nto this function.\\n\\n"],"renpy.fetch":["renpy","function","(url, method=None, data=None, json=None, content_type=None, timeout=5, result=\'bytes\', params=None, headers={})","","function","This performs an HTTP (or HTTPS) request to the given URL, and returns\\nthe content of that request. If it fails, raises a FetchError exception,\\nwith text that describes the failure. (But may not be suitable for\\npresentation to the user.)\\n\\n`url`\\nThe URL to fetch.\\n\\n`method`\\nThe method to use. Generally one of \\"GET\\", \\"POST\\", or \\"PUT\\", but other\\nHTTP methods are possible. If `data` or `json` are not None, defaults to\\n\\"POST\\", otherwise defaults to GET.\\n\\n`data`\\nIf not None, a byte string of data to send with the request.\\n\\n`json`\\nIf not None, a JSON object to send with the request. This takes precendence\\nover `data`.\\n\\n`content_type`\\nThe content type of the data. If not given, defaults to \\"application/json\\"\\nif `json` is not None, or \\"application/octet-stream\\" otherwise. Only\\nused on a POST or PUT request.\\n\\n`timeout`\\nThe number of seconds to wait for the request to complete.\\n\\n`result`\\nHow to process the result. If \\"bytes\\", returns the raw bytes of the result.\\nIf \\"text\\", decodes the result using UTF-8 and returns a unicode string. If \\"json\\",\\ndecodes the result as JSON. (Other exceptions may be generated by the decoding\\nprocess.)\\n\\n`params`\\nA dictionary of parameters that are added to the URL as a query string.\\n\\n`headers`\\nA dictionary of headers to send with the request.\\n\\nThis may be called from inside or outside of an interaction.\\n\\n* Outside of an interation, while waiting for `timeout` to pass, this will\\nrepeatedly call renpy.pause\\\\ (0),  so Ren\'Py doesn\'t lock up. It\\nmay make sense to display a screen to the user to let them know what is going on.\\n\\n* Inside of an interaction (for example, inside an Action), this will block\\nthe display system until the fetch request finishes or times out. It will try\\nto service the audio system, so audio will continue to play.\\n\\nThis function should work on all platforms. However, on the web platform,\\nrequests going to a different origin than the game will fail unless allowed\\nby CORS.\\n\\n"],"renpy.file":["renpy","function","(fn, encoding=None)","","function","An alias for renpy.open_file, for compatibility with older\\nversions of Ren\'Py.\\n\\n"],"renpy.filter_text_tags":["renpy","function","(s, allow=None, deny=None)","","function","Returns a copy of `s` with the text tags filtered. Exactly one of the `allow` and `deny` keyword\\narguments must be given.\\n\\n`allow`\\nA set of tags that are allowed. If a tag is not in this list, it is removed.\\n\\n`deny`\\nA set of tags that are denied. If a tag is not in this list, it is kept in the string.\\n\\n"],"renpy.fix_rollback":["renpy","function","()","","function","Prevents the user from changing decisions made before the current\\nstatement.\\n\\n"],"renpy.flush_cache_file":["renpy","function","(fn)","","function","This flushes all image cache entries that refer to the file `fn`.  This\\nmay be called when an image file changes on disk to force Ren\'Py to\\nuse the new version.\\n\\n"],"renpy.focus_coordinates":["renpy","function","()","","function","This attempts to find the coordinates of the currently-focused\\ndisplayable. If it can, it will return them as a (x, y, w, h)\\ntuple. If not, it will return a (None, None, None, None) tuple.\\n\\n"],"renpy.force_autosave":["renpy","function","(take_screenshot=False, block=False)","","function","Forces a background autosave to occur.\\n\\n`take_screenshot`\\nIf True, a new screenshot will be taken. If False, the existing\\nscreenshot will be used.\\n\\n`block`\\nIf True, blocks until the autosave completes.\\n\\n"],"renpy.free_memory":["renpy","function","()","","function","Attempts to free some memory. Useful before running a renpygame-based\\nminigame.\\n\\n"],"renpy.fsdecode":["renpy","function","(s)","","function","Converts s from filesystem encoding to unicode.\\n\\n"],"renpy.fsencode":["renpy","function","(s, force=False)","","function","Converts s from unicode to the filesystem encoding.\\n\\n"],"renpy.full_restart":["renpy","function","(transition=False, *, save=False)","","function","Causes Ren\'Py to restart, returning the user to the main menu.\\n\\n`transition`\\nIf given, the transition to run, or None to not run a transition.\\nFalse uses config.end_game_transition.\\n\\n`save`\\nIf true, the game is saved in _quit_slot before Ren\'Py\\nrestarts and returns the user to the main menu.\\n\\n"],"renpy.get_adjustment":["renpy","function","(bar_value)","","function","Given `bar_value`, a BarValue, returns the ui.adjustment\\nit uses. The adjustment has the following attributes defined:\\n\\nattribute value\\n\\nThe current value of the bar.\\n\\nattribute range\\n\\nThe current range of the bar.\\n\\n"],"renpy.get_all_labels":["renpy","function","()","","function","Returns the set of all labels defined in the program, including labels\\ndefined for internal use in the libraries.\\n\\n"],"renpy.get_at_list":["renpy","function","(name, layer=None)","","function","Returns the list of transforms being applied to the image with tag `name`\\non `layer`. Returns an empty list if no transforms are being applied, or\\nNone if the image is not shown.\\n\\nIf `layer` is None, uses the default layer for the given tag.\\n\\n"],"renpy.get_attributes":["renpy","function","(tag, layer=None, if_hidden=None)","","function","Return a tuple giving the image attributes for the image `tag`. If\\nthe image tag has not had any attributes associated since the last\\ntime it was hidden, returns `if_hidden`.\\n\\n`layer`\\nThe layer to check. If None, uses the default layer for `tag`.\\n\\n"],"renpy.get_autoreload":["renpy","function","()","","function","Gets the autoreload flag.\\n\\n"],"renpy.get_available_image_tags":["renpy","function","()","","function","Returns a list of image tags that have been defined.\\n\\n"],"renpy.get_displayable":["renpy","function","(screen, id, layer=None, base=False)","","function","From the `screen` on `layer`, returns the displayable with\\n`id`. Returns None if the screen doesn\'t exist, or there is no\\nwidget with that id on the screen.\\n\\n"],"renpy.get_displayable_properties":["renpy","function","(id, screen=None, layer=None)","","function","Returns the properties for the displayable with `id` in the `screen`\\non `layer`. If `screen` is None, returns the properties for the\\ncurrent screen. This can be used from Python or property code inside\\na screen.\\n\\nNote that this returns a dictionary containing the widget properties,\\nand so to get an individual property, the dictionary must be accessed.\\n\\n"],"renpy.get_filename_line":["renpy","function","()","","function","Returns a pair giving the filename and line number of the current\\nstatement.\\n\\n"],"renpy.get_game_runtime":["renpy","function","()","","function","Returns the game runtime counter.\\n\\nThe game runtime counter counts the number of seconds that have\\nelapsed while waiting for user input in the top-level context.\\n(It does not count time spent in the main or game menus.)\\n\\n"],"renpy.get_hidden_tags":["renpy","function","(layer=\'master\')","","function","Returns the set of image tags on `layer` that are currently hidden, but\\nstill have attribute information associated with them.\\n\\n"],"renpy.get_identifier_checkpoints":["renpy","function","(identifier)","","function","Given a rollback_identifier from a HistoryEntry object, returns the number\\nof checkpoints that need to be passed to renpy.rollback to reach\\nthat identifier. Returns None of the identifier is not in the rollback\\nhistory.\\n\\n"],"renpy.get_image_bounds":["renpy","function","(tag, width=None, height=None, layer=None)","","function","If an image with `tag` exists on `layer`, returns the bounding box of\\nthat image. Returns None if the image is not found.\\n\\nThe bounding box is an (x, y, width, height) tuple. The components of\\nthe tuples are expressed in pixels, and may be floating point numbers.\\n\\n`width`, `height`\\nThe width and height of the area that contains the image. If None,\\ndefaults the width and height of the screen, respectively.\\n\\n`layer`\\nIf None, uses the default layer for `tag`.\\n\\n"],"renpy.get_image_load_log":["renpy","function","(age=None)","","function","A generator that yields a log of image loading activity. For the last 100\\nimage loads, this returns:\\n\\n* The time the image was loaded (in seconds since the epoch).\\n* The filename of the image that was loaded.\\n* A boolean that is true if the image was preloaded, and false if the\\ngame stalled to load it.\\n\\nThe entries are ordered from newest to oldest.\\n\\n`age`\\nIf not None, only images that have been loaded in the past `age`\\nseconds are included.\\n\\nThe image load log is only kept if config.developer = True.\\n\\n"],"renpy.get_menu_args":["renpy","function","()","","function","Returns a tuple giving the arguments (as a tuple) and the keyword arguments\\n(as a dict) passed to the current menu statement.\\n\\n"],"renpy.get_mouse_name":["renpy","function","(interaction=False)","","function","Returns the name of the mouse that should be shown.\\n\\n\\n`interaction`\\nIf true, get a mouse name that is based on the type of interaction\\noccuring. (This is rarely useful.)\\n\\n"],"renpy.get_mouse_pos":["renpy","function","()","","function","Returns an (x, y) tuple giving the location of the mouse pointer or the\\ncurrent touch location. If the device does not support a mouse and is not\\ncurrently being touched, x and y are numbers, but not meaningful.\\n\\n"],"renpy.get_on_battery":["renpy","function","()","","function","Returns True if Ren\'Py is running on a device that is powered by an internal\\nbattery, or False if the device is being charged by some external source.\\n\\n"],"renpy.get_ongoing_transition":["renpy","function","(layer=None)","","function","Returns the transition that is currently ongoing.\\n\\n`layer`\\nIf None, the top-level transition is returned. Otherwise, this should be a string giving a layer name,\\nin which case the transition for that layer is returned.\\n\\n"],"renpy.get_ordered_image_attributes":["renpy","function","(tag, attributes=(), sort=None)","","function","Returns a list of image attributes, ordered in a way that makes sense to\\npresent to the user.\\n\\n`attributes`\\nIf present, only attributes that are compatible with the given\\nattributes are considered. (Compatible means that the attributes\\ncan be in a single image at the same time.)\\n\\n`sort`\\nIf not None, the returned list of attributes is sorted. This is a\\none-argument function that should be used as a tiebreaker - see\\n`this tutorial <https://docs.python.org/3/howto/sorting.html#key-functions>`_\\nfor more information.\\n\\n"],"renpy.get_physical_size":["renpy","function","()","","function","Returns the size of the physical window.\\n\\n"],"renpy.get_placement":["renpy","function","(d)","","function","This gets the placement of displayable d. There\'s very little warranty on this\\ninformation, as it might change when the displayable is rendered, and might not\\nexist until the displayable is first rendered.\\n\\nThis returns an object with the following fields, each corresponding to a style\\nproperty:\\n\\n* pos\\n* xpos\\n* ypos\\n* anchor\\n* xanchor\\n* yanchor\\n* offset\\n* xoffset\\n* yoffset\\n* subpixel\\n\\n"],"renpy.get_refresh_rate":["renpy","function","(precision=5)","","function","Returns the refresh rate of the current screen, as a floating-point\\nnumber of frames per second.\\n\\n`precision`\\nThe raw data Ren\'Py gets is the number of frames per second rounded down\\nto the nearest integer. This means that a monitor that runs at 59.95\\nframes per second will be reported at 59 fps. The precision argument\\nthen further reduces the precision of this reading, such that the only valid\\nreadings are multiples of the precision.\\n\\nSince all monitor framerates tend to be multiples of 5 (25, 30, 60,\\n75, and 120), this likely will improve accuracy. Setting precision\\nto 1 disables this.\\n\\n"],"renpy.get_registered_image":["renpy","function","(name)","","function","If an image with the same name has been registered,\\nreturns it. Otherwise, returns None.\\n\\n"],"renpy.get_renderer_info":["renpy","function","()","","function","Returns a dictionary, giving information about the renderer Ren\'Py is\\ncurrently using. Defined keys are:\\n\\n``\\"renderer\\"``\\nA string giving the name of the renderer that is in use.\\n\\n``\\"resizable\\"``\\nTrue if and only if the window is resizable.\\n\\n``\\"additive\\"``\\nTrue if and only if the renderer supports additive blending.\\n\\n``\\"model\\"``\\nPresent and true if model-based rendering is supported.\\n\\nOther, renderer-specific, keys may also exist. The dictionary should\\nbe treated as immutable. This should only be called once the display\\nhas been started (that is, after the init phase has finished).\\n\\n"],"renpy.get_return_stack":["renpy","function","()","","function","Returns a list giving the current return stack. The return stack is a\\nlist of statement names.\\n\\nThe statement names will be strings (for labels), or opaque tuples (for\\nnon-label statements).\\n\\n"],"renpy.get_say_attributes":["renpy","function","()","","function","Gets the attributes associated with the current say statement, or\\nNone if no attributes are associated with this statement.\\n\\nThis is only valid when executing or predicting a say statement.\\n\\n"],"renpy.get_say_image_tag":["renpy","function","()","","function","Returns the tag corresponding to the currently speaking character (the\\n`image` argument given to that character). Returns None if no character\\nis speaking or the current speaking character does not have a corresponding\\nimage tag.\\n\\n"],"renpy.get_screen":["renpy","function","(name, layer=None)","","function","Returns information about the screen with the given `name` on `layer`.\\n`name` is first interpreted as a tag name, and then as a screen name.\\nIf the screen is not showing, returns None.\\n\\nThis can also take a list of names, in which case the first screen\\nthat is showing is returned.\\n\\nThis function can be used to check whether a screen is showing\\n\\n```\\nif renpy.get_screen(\\"say\\"):\\n    text \\"The say screen is showing.\\"\\nelse:\\n    text \\"The say screen is hidden.\\"\\n    \\n```\\n\\nThe objects returned by this function have the\\nfollowing documented fields:\\n\\nattribute layer\\n\\nThe layer the screen is being displayed on.\\n\\nattribute name\\n\\nThe name of the screen.\\n\\nattribute zorder\\n\\nThe zorder the screen is being displayed at.\\n\\n**Warning:**\\n\\nLike other similar functions, the object this returns is meant to be used\\nin the short term after the function is called. Including it in save data\\nor making it participate in rollback is not advised.\\n\\n"],"renpy.get_screen_variable":["renpy","function","(name, *, screen=None, layer=None)","","function","Returns the value of a variable in the scope of a screen.\\n\\n`name`\\nThe name of the variable to return.\\n\\n`screen`\\nThe name of the screen to return the variable from. If None,\\nthe current screen is used. (The current screen is only defined\\nwhen updating a screen, and in actions that are run inside the\\nscreen.)\\n\\n`layer`\\nThe layer to find the screen on, if `screen` is not None.\\n\\n"],"renpy.get_sdl_dll":["renpy","function","()","","function","Returns a ctypes.cdll object that refers to the library that contains\\nthe instance of SDL2 that Ren\'Py is using. If this fails, None is returned.\\n\\n"],"renpy.get_sdl_window_pointer":["renpy","function","()","","function",":rtype: ctypes.c_void_p | None\\n\\nReturns a pointer to the main window, or None if the main window is not\\ndisplayed (or some other problem occurs).\\n\\n\\n"],"renpy.get_showing_tags":["renpy","function","(layer=\'master\', sort=False)","","function","Returns the set of image tags that are currently being shown on `layer`. If\\nsort is true, returns a list of the tags from back to front.\\n\\n"],"renpy.get_skipping":["renpy","function","()","","function","Returns \\"slow\\" if the Ren\'Py is skipping, \\"fast\\" if Ren\'Py is fast skipping,\\nand None if it is not skipping.\\n\\n"],"renpy.get_style_preference":["renpy","function","(preference)","","function","Returns a string giving the name of the selected alternative for the named style preference.\\n\\n`preference`\\nA string giving the name of the style preference.\\n\\n"],"renpy.get_transition":["renpy","function","(layer=None)","","function","Gets the transition for `layer`, or the entire scene if\\n`layer` is None. This returns the transition that is queued up\\nto run during the next interaction, or None if no such\\ntransition exists.\\n\\nUse renpy.get_ongoing_transition to get the transition that is\\nin progress.\\n\\n"],"renpy.get_translation_identifier":["renpy","function","()","","function","Returns the translation identifier for the current statement.\\n\\n"],"renpy.get_zorder_list":["renpy","function","(layer)","","function","Returns a list of (tag, zorder) pairs for `layer`.\\n\\n"],"renpy.has_image":["renpy","function","(name, exact=False)","","function","Return true if an image with `name` exists, and false if no such image\\nexists.\\n\\n`name`\\nEither a string giving an image name, or a tuple of strings giving\\nthe name components.\\n\\n`exact`\\nReturns true if and only if an image with the exact name exists -\\nparameterized matches are not included.\\n\\n"],"renpy.has_label":["renpy","function","(name)","","function","Returns true if `name` is a valid label in the program, or false\\notherwise.\\n\\n`name`\\nShould be a string to check for the existence of a label. It can\\nalso be an opaque tuple giving the name of a non-label statement.\\n\\n"],"renpy.has_live2d":["renpy","function","()","","function","Returns True if Live2d is supported on the current platform, and\\nFalse otherwise.\\n\\n"],"renpy.hide":["renpy","function","(name, layer=None)","","function","Hides an image from a layer. The Python equivalent of the hide statement.\\n\\n`name`\\nThe name of the image to hide. Only the image tag is used, and\\nany image with the tag is hidden (the precise name does not matter).\\n\\n`layer`\\nThe layer on which this function operates. If None, uses the default\\nlayer associated with the tag.\\n\\n"],"renpy.hide_screen":["renpy","function","(tag, layer=None, immediately=False)","","function","The programmatic equivalent of the hide screen statement.\\n\\nHides the screen with `tag` on `layer`.\\n\\nIf `immediately` is true, the screen is hidden immediately, without the \'on hide\' event.\\n\\n"],"renpy.iconify":["renpy","function","()","","function","Iconifies the game.\\n\\n"],"renpy.image":["renpy","function","(name, d)","","function","Defines an image. This function is the Python equivalent of the\\nimage statement.\\n\\n`name`\\nThe name of the image to display, a string.\\n\\n`d`\\nThe displayable to associate with that image name.\\n\\nThis function may only be run from inside an init block. It is an\\nerror to run this function once the game has started.\\n\\n"],"renpy.image_size":["renpy","function","(im)","","function","Given an image manipulator, loads it and returns a (``width``,\\n``height``) tuple giving its size.\\n\\nThis reads the image in from disk and decompresses it, without\\nusing the image cache. This can be slow.\\n\\n"],"renpy.in_fixed_rollback":["renpy","function","()","","function","Returns true if rollback is currently occurring and the current\\ncontext is before an executed renpy.fix_rollback() statement.\\n\\n"],"renpy.in_rollback":["renpy","function","()","","function","Returns true if the game has been rolled back.\\n\\n"],"renpy.include_module":["renpy","function","(name)","","function","Similar to renpy.load_module, but instead of loading the module right away,\\ninserts it into the init queue somewhere after the current AST node.\\n\\nThe module may not contain init blocks lower than the block that includes the module.\\nFor example, if your module contains an init 10 block, the latest you can load it is\\ninit 10.\\n\\nModule loading may only occur from inside an init block.\\n\\n"],"renpy.input":["renpy","function","(default=\'\', allow=None, exclude=\'{}\', length=None, pixel_width=None, screen=\\"input\\", mask=None, copypaste=True, multiline=False, **kwargs)","","function","Calling this function pops up a window asking the player to enter some\\ntext. It returns the entered text.\\n\\n`prompt`\\nA string giving a prompt to display to the player.\\n\\n`default`\\nA string giving the initial text that will be edited by the player.\\n\\n`allow`\\nIf not None, a string giving a list of characters that will\\nbe allowed in the text.\\n\\n`exclude`\\nIf not None, if a character is present in this string, it is not\\nallowed in the text.\\n\\n`length`\\nIf not None, this must be an integer giving the maximum length\\nof the input string.\\n\\n`pixel_width`\\nIf not None, the input is limited to being this many pixels wide,\\nin the font used by the input to display text.\\n\\n`screen`\\nThe name of the screen that takes input. If not given, the ``input``\\nscreen is used.\\n\\n`mask`\\nIf not None, a single-character string that replaces the input text that\\nis shown to the player, such as to conceal a password.\\n\\n`copypaste`\\nWhen true, copying from and pasting to this input is allowed.\\n\\n`multiline`\\nWhen true, move caret to next line is allowed.\\n\\nIf config.disable_input is True, this function only returns\\n`default`.\\n\\nKeywords prefixed with ``show_`` have the prefix stripped and\\nare passed to the screen.\\n\\nDue to limitations in supporting libraries, on Android and the web platform\\nthis function is limited to alphabetic characters.\\n\\n"],"renpy.invoke_in_main_thread":["renpy","function","(fn, *args, **kwargs)","","function","This runs the given function with the given arguments in the main\\nthread. The function runs in an interaction context similar to an\\nevent handler. This is meant to be called from a separate thread,\\nwhose creation is handled by renpy.invoke_in_thread.\\n\\nIf a single thread schedules multiple functions to be invoked, it is guaranteed\\nthat they will be run in the order in which they have been scheduled\\n\\n```\\ndef ran_in_a_thread():\\n    renpy.invoke_in_main_thread(a)\\n    renpy.invoke_in_main_thread(b)\\n    \\n```\\n\\nIn this example, it is guaranteed that ``a`` will return before\\n``b`` is called. The order of calls made from different threads is not\\nguaranteed.\\n\\nThis may not be called during the init phase.\\n\\n"],"renpy.invoke_in_new_context":["renpy","function","(callable, *args, **kwargs)","","function","This function creates a new context, and invokes the given Python\\ncallable (function) in that context. When the function returns\\nor raises an exception, control returns to the the original context.\\nIt\'s generally used to call a Python function that needs to display\\ninformation to the player (like a confirmation prompt) from inside\\nan event handler.\\n\\nAdditional arguments and keyword arguments are passed to the\\ncallable.\\n\\nA context created with this function cannot execute Ren\'Py script.\\nFunctions that would change the flow of Ren\'Py script, like\\nrenpy.jump, are handled by the outer context. If you want\\nto call Ren\'Py script rather than a Python function, use\\nrenpy.call_in_new_context instead.\\n\\nThis takes an optional  keyword argument:\\n\\n`_clear_layers`\\nIf True (the default), the layers are cleared before the new\\ninteraction starts. If False, the layers are not cleared. If a\\nlist, only the layers in the list are cleared.\\n\\n"],"renpy.invoke_in_thread":["renpy","function","(fn, *args, **kwargs)","","function","Invokes the function `fn` in a background thread, passing it the\\nprovided arguments and keyword arguments. Restarts the interaction\\nonce the thread returns.\\n\\nThis function creates a daemon thread, which will be automatically\\nstopped when Ren\'Py is shutting down.\\n\\nThis thread is very limited in what it can do with the Ren\'Py API.\\nChanging store variables is allowed, as are calling calling the following\\nfunctions:\\n\\n* renpy.restart_interaction\\n* renpy.invoke_in_main_thread\\n* renpy.queue_event\\n\\nMost other portions of the Ren\'Py API are expected to be called from\\nthe main thread.\\n\\nThis does not work on the web platform, except for immediately returning\\nwithout an error.\\n\\n"],"renpy.ios":["renpy","var","","","var","Has a true value when running on iOS.\\n\\n"],"renpy.is_init_phase":["renpy","function","()","","function","Returns True if Ren\'Py is currently executing init code, or False otherwise.\\n\\n"],"renpy.is_mouse_visible":["renpy","function","()","","function","Returns True if the mouse cursor is visible, False otherwise.\\n\\n"],"renpy.is_pixel_opaque":["renpy","function","(d, width, height, st, at, x, y)","","function","Returns whether the pixel at (x, y) is opaque when this displayable\\nis rendered by ``renpy.render(d, width, height, st, at)``.\\n\\n"],"renpy.is_seen":["renpy","function","(ever=True)","","function","Returns true if the current line has been seen by the player.\\n\\nIf `ever` is true, we check to see if the line has ever been seen by the\\nplayer. If false, we check if the line has been seen in the current\\nplay-through.\\n\\n"],"renpy.is_selected":["renpy","function","(action)","","function","Returns a true value if the provided action or list of actions\\nindicates it is selected, and false otherwise.\\n\\n"],"renpy.is_sensitive":["renpy","function","(action)","","function","Returns a true value if the provided action or list of actions\\nindicates it is sensitive, and false otherwise.\\n\\n"],"renpy.is_skipping":["renpy","function","()","","function","Returns True if Ren\'Py is currently skipping (in fast or slow skip mode),\\nor False otherwise.\\n\\n"],"renpy.is_start_interact":["renpy","function","()","","function","Returns true if restart_interaction has not been called during the current\\ninteraction. This can be used to determine if the interaction is just being\\nstarted, or has been restarted.\\n\\n"],"renpy.jump":["renpy","function","(label)","","function","Causes the current statement to end, and control to jump to the given\\nlabel.\\n\\n"],"renpy.jump_out_of_context":["renpy","function","(label)","","function","Causes control to leave the current context, and then to be\\ntransferred in the parent context to the given label.\\n\\n"],"renpy.known_languages":["renpy","function","()","","function","Returns the set of known languages. This does not include the default\\nlanguage, None.\\n\\n"],"renpy.language_tailor":["renpy","function","(chars, cls)","","function","This can be used to override the line breaking class of a unicode\\ncharacter. For\\nexample, the linebreaking class of a character can be set to ID to\\ntreat it as an ideograph, which allows breaks before and after that\\ncharacter.\\n\\n`chars`\\nA string containing each of the characters to tailor.\\n\\n`cls`\\nA string giving a character class. This should be one of the classes defined in Table\\n1 of `UAX #14: Unicode Line Breaking Algorithm <http://www.unicode.org/reports/tr14/tr14-30.html>`_.\\n\\n"],"renpy.last_say":["renpy","function","()","","function","Returns an object containing information about the last say statement.\\n\\nWhile this can be called during a say statement, if the say statement is using\\na normal Character, the information will be about the *current* say statement,\\ninstead of the preceding one.\\n\\n`who`\\nThe speaker. This is usually a Character object, but this\\nis not required.\\n\\n`what`\\nA string with the dialogue spoken. This may be None if dialogue\\nhasn\'t been shown yet, for example at the start of the game.\\n\\n`args`\\nA tuple of arguments passed to the last say statement.\\n\\n`kwargs`\\nA dictionary of keyword arguments passed to the last say statement.\\n\\n**Warning:**\\n\\nLike other similar functions, the object this returns is meant to be used\\nin the short term after the function is called. Including it in save data\\nor making it participate in rollback is not advised.\\n\\n"],"renpy.license":["renpy","var","","","var","A string giving license text that should be included in a game\'s\\nabout screen.\\n\\n"],"renpy.linux":["renpy","var","","","var","Has a true value when running on Linux or other POSIX-like operating systems.\\n\\n"],"renpy.list_files":["renpy","function","(common=False)","","function","Lists the files in the game directory and archive files. Returns\\na list of files, with / as the directory separator.\\n\\n`common`\\nIf true, files in the common directory are included in the\\nlisting.\\n\\n"],"renpy.list_images":["renpy","function","()","","function","Returns a list of images that have been added to Ren\'Py, as a list of\\nstrings with spaces between the name components.\\n\\n"],"renpy.list_saved_games":["renpy","function","(regexp=\'.\', fast=False)","","function","Lists the save games. For each save game, returns a tuple containing:\\n\\n* The filename of the save.\\n* The extra_info that was passed in.\\n* A displayable that, when displayed, shows the screenshot that was\\nused when saving the game.\\n* The time the game was stayed at, in seconds since the UNIX epoch.\\n\\n`regexp`\\nA regular expression that is matched against the start of the\\nfilename to filter the list.\\n\\n`fast`\\nIf fast is true, the filename is returned instead of the\\ntuple.\\n\\n"],"renpy.list_slots":["renpy","function","(regexp=None)","","function","Returns a list of non-empty save slots. If `regexp` exists, only slots\\nthat begin with `regexp` are returned. The slots are sorted in\\nstring-order.\\n\\n"],"renpy.load":["renpy","function","(filename)","","function","Loads the game state from the save slot `filename`. If the file is loaded\\nsuccessfully, this function never returns.\\n\\n"],"renpy.load_image":["renpy","function","(im)","","function","Loads the image manipulator `im` using the image cache, and returns a render.\\n\\n"],"renpy.load_module":["renpy","function","(name)","","function","This loads the Ren\'Py module named name. A Ren\'Py module consists of Ren\'Py script\\nthat is loaded into the usual (store) namespace, contained in a file named\\nname.rpym or name.rpymc. If a .rpym file exists, and is newer than the\\ncorresponding .rpymc file, it is loaded and a new .rpymc file is created.\\n\\nAll of the init blocks (and other init-phase code) in the module are run\\nbefore this function returns. An error is raised if the module name cannot\\nbe found, or is ambiguous.\\n\\nModule loading may only occur from inside an init block.\\n\\n"],"renpy.load_rgba":["renpy","function","(data, size)","","function","Loads the image data `bytes` into a texture of size `size`, and return it.\\n\\n`data`\\nShould be a bytes object containing the image data in RGBA8888 order.\\n\\n"],"renpy.load_string":["renpy","function","(s, filename=\'<string>\')","","function","Loads `s` as Ren\'Py script that can be called.\\n\\nReturns the name of the first statement in s.\\n\\n`filename` is the name of the filename that statements in the string will\\nappear to be from.\\n\\n"],"renpy.load_surface":["renpy","function","(im)","","function","Loads the image manipulator `im` using the image cache, and returns a pygame Surface.\\n\\n"],"renpy.loadable":["renpy","function","(filename, directory=None, tl=True)","","function","Returns True if the given filename is loadable, meaning that it\\ncan be loaded from the disk or from inside an archive. Returns\\nFalse if this is not the case.\\n\\n`directory`\\nIf not None, a directory to search in if the file is not found\\nin the game directory. This will be prepended to filename, and\\nthe search tried again.\\n`tl`\\nIf True, a translation subdirectory will be considered as well.\\n\\n"],"renpy.log":["renpy","function","(msg)","","function","If config.log is not set, this does nothing. Otherwise, it opens\\nthe logfile (if not already open), formats the message to config.log_width\\ncolumns, and prints it to the logfile.\\n\\n"],"renpy.macintosh":["renpy","var","","","var","Has a true value when running on macOS.\\n\\n"],"renpy.map_event":["renpy","function","(ev, keysym)","","function","Returns true if the pygame event `ev` matches `keysym`\\n\\n`keysym`\\nOne of:\\n\\n* The name of a keybinding in config.keymap.\\n* A keysym, as documented in the keymap section.\\n* A list containing one or more keysyms.\\n\\n"],"renpy.mark_audio_seen":["renpy","function","(filename)","","function","Marks the given filename as if it has been already played on the current user\'s\\nsystem.\\n\\n"],"renpy.mark_audio_unseen":["renpy","function","(filename)","","function","Marks the given filename as if it has not been played on the current user\'s\\nsystem yet.\\n\\n"],"renpy.mark_image_seen":["renpy","function","(name)","","function","Marks the named image as if it has been already displayed on the current user\'s\\nsystem.\\n\\n"],"renpy.mark_image_unseen":["renpy","function","(name)","","function","Marks the named image as if it has not been displayed on the current user\'s\\nsystem yet.\\n\\n"],"renpy.mark_label_seen":["renpy","function","(label)","","function","Marks the named label as if it has been already executed on the current user\'s\\nsystem.\\n\\n"],"renpy.mark_label_unseen":["renpy","function","(label)","","function","Marks the named label as if it has not been executed on the current user\'s\\nsystem yet.\\n\\n"],"renpy.maximum_framerate":["renpy","function","(t)","","function","Forces Ren\'Py to draw the screen at the maximum framerate for `t` seconds.\\nIf `t` is None, cancels the maximum framerate request.\\n\\n"],"renpy.mobile":["renpy","var","","","var","Has a true value when running on Android or iOS or in the browser.\\n\\n"],"renpy.movie_cutscene":["renpy","function","(filename, delay=None, loops=0, stop_music=True)","","function","This displays a movie cutscene for the specified number of\\nseconds. The user can click to interrupt the cutscene.\\nOverlays and Underlays are disabled for the duration of the cutscene.\\n\\n`filename`\\nThe name of a file containing any movie playable by Ren\'Py.\\n\\n`delay`\\nThe number of seconds to wait before ending the cutscene.\\nNormally the length of the movie, in seconds. If None, then the\\ndelay is computed from the number of loops (that is, loops + 1) *\\nthe length of the movie. If -1, we wait until the user clicks.\\n\\n`loops`\\nThe number of extra loops to show, -1 to loop forever.\\n\\nReturns True if the movie was terminated by the user, or False if the\\ngiven delay elapsed uninterrupted.\\n\\n"],"renpy.munge":["renpy","function","(name, filename=None)","","function","Munges `name`, which must begin with __.\\n\\n`filename`\\nThe filename the name is munged into. If None, the name is munged\\ninto the filename containing the call to this function.\\n\\n"],"renpy.music":["renpy","var","","","var","The renpy.audio.music namespace contains functions that control the audio system. These functions\\nwork with the music channel by default.\\n\\n"],"renpy.music.channel_defined":["renpy","function","(channel)","","function","Returns True if the channel exists, or False otherwise.\\n\\n"],"renpy.music.get_all_mixers":["renpy","function","()","","function","This gets all mixers in use.\\n\\n"],"renpy.music.get_duration":["renpy","function","(channel=\'music\')","","function","Returns the duration of the audio or video file on `channel`. Returns\\n0.0 if no file is playing on `channel`, or the duration is unknown.\\nSome formats - notably MP3 - do not include duration information in a\\nformat Ren\'Py can access.\\n\\n"],"renpy.music.get_loop":["renpy","function","(channel=\'music\')","","function","Return a list of filenames that are being looped on `channel`, or None\\nif no files are being looped. In the case where a loop is queued, but\\nis not yet playing, the loop is returned, not the currently playing\\nmusic.\\n\\n"],"renpy.music.get_pause":["renpy","function","(channel=\'music\')","","function","Returns the pause flag for `channel`.\\n\\n"],"renpy.music.get_playing":["renpy","function","(channel=\'music\')","","function","If the given channel is playing, returns the playing file name.\\nOtherwise, returns None.\\n\\n"],"renpy.music.get_pos":["renpy","function","(channel=\'music\')","","function","Returns the current position of the audio or video file on `channel`, in\\nseconds. Returns None if no audio is playing on `channel`.\\n\\nAs this may return None before a channel starts playing, or if the audio\\nchannel involved has been muted, callers of this function should\\nalways handle a None value.\\n\\n"],"renpy.music.is_playing":["renpy","function","(channel=\'music\')","","function","Returns True if the channel is currently playing a sound, False if\\nit is not, or if the sound system isn\'t working.\\n\\n"],"renpy.music.play":["renpy","function","(filenames, channel=\'music\', loop=None, fadeout=None, synchro_start=True, fadein=0, tight=None, if_changed=False, relative_volume=1.0)","","function","This stops the music currently playing on the numbered channel, dequeues\\nany queued music, and begins playing the specified file or files.\\n\\n`filenames`\\nThis may be a single file, or a list of files to be played.\\n\\n`channel`\\nThe channel to play the sound on.\\n\\n`loop`\\nIf this is True, the tracks will loop while they are the last thing\\nin the queue.\\n\\n`fadeout`\\nIf not None, this is a time in seconds to fade for. Otherwise the\\nfadeout time is taken from config.fadeout_audio. This is ignored if\\nthe channel is paused when the music is played.\\n\\n`synchro_start`\\nRen\'Py will ensure that all channels of with synchro_start set to true\\nwill start playing at exactly the same time. Synchro_start should be\\ntrue when playing two audio files that are meant to be synchronized\\nwith each other.\\n\\n`fadein`\\nThis is the number of seconds to fade the music in for, on the\\nfirst loop only.\\n\\n`tight`\\nIf this is True, then fadeouts will span into the next-queued sound. If\\nNone, this is true when loop is True, and false otherwise.\\n\\n`if_changed`\\nIf this is True, and the music file is currently playing,\\nthen it will not be stopped/faded out and faded back in again, but\\ninstead will be kept playing. (This will always queue up an additional\\nloop of the music.)\\n\\n`relative_volume`\\nThis is the volume relative to the current channel volume.\\nThe specified file will be played at that relative volume. If not\\nspecified, it will always default to 1.0, which plays the file at the\\noriginal volume as determined by the mixer, channel and secondary volume.\\n\\nThis clears the pause flag for `channel`.\\n\\n"],"renpy.music.pump":["renpy","function","()","","function","This \'pumps\' the audio system. Normally, the effects of the ``play``,\\n``queue``, and ``stop`` statements and the function equivalents take\\nplace at the start of the next interaction. In some cases, the effects\\nof multiple statements can cancel each other out - for example, a\\nplay followed by a stop causes the track to never be played.\\n\\nIf this function is called between the play and stop, the track will\\nbegin playing before this function returns, which then allows the track\\nto be faded out. \\n\\n```\\nplay music \\"mytrack.opus\\"\\n$ renpy.music.pump()\\nstop music fadeout 4\\n\\n```\\n\\n"],"renpy.music.queue":["renpy","function","(filenames, channel=\'music\', loop=None, clear_queue=True, fadein=0, tight=None, relative_volume=1.0)","","function","This queues the given filenames on the specified channel.\\n\\n`filenames`\\nThis may be a single file, or a list of files to be played.\\n\\n`channel`\\nThe channel to play the sound on.\\n\\n`loop`\\nIf this is True, the tracks will loop while they are the last thing\\nin the queue.\\n\\n`clear_queue`\\nIf True, then the queue is cleared, making these files the files that\\nare played when the currently playing file finishes. If it is False,\\nthen these files are placed at the back of the queue. In either case,\\nif no music is playing these files begin playing immediately.\\n\\n`fadein`\\nThis is the number of seconds to fade the music in for, on the\\nfirst loop only.\\n\\n`tight`\\nIf this is True, then fadeouts will span into the next-queued sound. If\\nNone, this is true when loop is True, and false otherwise.\\n\\n`relative_volume`\\nThis is the volume relative to the current channel volume.\\nThe specified file will be played at that relative volume. If not\\nspecified, it will always default to 1.0, which plays the file at the\\noriginal volume as determined by the mixer, channel and secondary volume.\\n\\nThis clears the pause flag for `channel`.\\n\\n"],"renpy.music.register_channel":["renpy","function","(name, mixer, loop=None, stop_on_mute=True, tight=False, file_prefix=\\"\\", file_suffix=\\"\\", buffer_queue=True, movie=False, framedrop=True)","","function","This registers a new audio channel named `name`. Audio can then be\\nplayed on the channel by supplying the channel name to the play or\\nqueue statements.\\n\\n`name`\\nThe name of the channel. It should not contain spaces, as this is reserved\\nfor Ren\'Py\'s internal use, and should be a\\n`valid identifier <https://docs.python.org/reference/lexical_analysis.html#identifiers>`__\\nfor the syntax of the play-statement to be usable.\\n\\n`mixer`\\nThe name of the mixer the channel uses. By default, Ren\'Py knows about\\nthe \\"music\\", \\"sfx\\", and \\"voice\\" mixers. Using other names is possible,\\nand will create the mixer if it doesn\'t already exist, but making new\\nmixers reachable by the player requires changing the preferences screens.\\n\\n`loop`\\nIf true, sounds on this channel loop by default.\\n\\n`stop_on_mute`\\nIf true, music on the channel is stopped when the channel is muted.\\n\\n`tight`\\nIf true, sounds will loop even when fadeout is occurring. This should\\nbe set to True for a sound effects or seamless music channel, and False\\nif the music fades out on its own.\\n\\n`file_prefix`\\nA prefix that is prepended to the filenames of the sound files being\\nplayed on this channel.\\n\\n`file_suffix`\\nA suffix that is appended to the filenames of the sound files being\\nplayed on this channel.\\n\\n`buffer_queue`\\nShould we buffer the first second or so of a queued file? This should\\nbe True for audio, and False for movie playback.\\n\\n`movie`\\nIf true, this channel will be set up to play back videos.\\n\\n`framedrop`\\nThis controls what a video does when lagging. If true, frames will\\nbe dropped to keep up with realtime and the soundtrack. If false,\\nRen\'Py will display frames late rather than dropping them.\\n\\n"],"renpy.music.set_audio_filter":["renpy","function","(channel, audio_filter, replace=False, duration=0.016)","","function","Sets the audio filter for sounds about to be queued to `audio_filter`.\\n\\n`audio_filter`\\nMust be a an audio filter or list of\\naudio filters, or None to remove the audio filter.\\n\\n`replace`\\nIf True, the audio filter replaces the current audio filter immediately,\\nchanging currently playing and queued sounds. If False, the audio\\nfilter will be used the next time a sound is played or queued.\\n\\n`duration`\\nThe duration to change from the current to the new filter, in seconds.\\nThis prevents a popping sound when changing filters.\\n\\n"],"renpy.music.set_mixer":["renpy","function","(channel, mixer, default=False)","","function","This sets the name of the mixer associated with a given\\nchannel. By default, there are two mixers, \'sfx\' and\\n\'music\'. \'sfx\' is on channels 0 to 3, and \'music\'\\non 3 to 7. The voice module calls this function to set channel 2 to voice.\\nYou can create your own mixer, but will need to add a preference if you\\nwish to allow the user to set it.\\n\\nThis function should only be called in an init block.\\n\\n"],"renpy.music.set_pan":["renpy","function","(pan, delay, channel=\'music\')","","function","Sets the pan of this channel.\\n\\n`pan`\\nA number between -1 and 1 that control the placement of the audio.\\nIf this is -1, then all audio is sent to the left channel.\\nIf it\'s 0, then the two channels are equally balanced. If it\'s 1,\\nthen all audio is sent to the right ear.\\n\\n`delay`\\nThe amount of time it takes for the panning to occur.\\n\\n`channel`\\nThe channel the panning takes place on, defaulting to the music channel.\\n\\n"],"renpy.music.set_pause":["renpy","function","(value, channel=\'music\')","","function","Sets the pause flag for `channel` to `value`. If True, the channel\\nwill pause, otherwise it will play normally.\\n\\n"],"renpy.music.set_queue_empty_callback":["renpy","function","(callback, channel=\'music\')","","function","This sets a callback that is called when the queue is empty. This\\ncallback is called when the queue first becomes empty, and at\\nleast once per interaction while the queue is empty.\\n\\nThe callback is called with no parameters. It can queue sounds by\\ncalling renpy.music.queue with the appropriate arguments. Please\\nnote that the callback may be called while a sound is playing, as\\nlong as a queue slot is empty.\\n\\n"],"renpy.music.set_volume":["renpy","function","(volume, delay=0, channel=\'music\')","","function","Sets the volume of this channel, as a fraction of the volume of the\\nmixer controlling the channel.\\n\\n`volume`\\nThis is a number between 0.0 and 1.0, and is interpreted as a fraction\\nof the mixer volume for the channel.\\n\\n`delay`\\nIt takes delay seconds to change/fade the volume from the old to\\nthe new value. This value is persisted into saves, and participates\\nin rollback.\\n\\n`channel`\\nThe channel to be set\\n\\n"],"renpy.music.stop":["renpy","function","(channel=\'music\', fadeout=None)","","function","This stops the music that is currently playing, and dequeues all\\nqueued music. If fadeout is None, the music is faded out for the\\ntime given in config.fadeout_audio, otherwise it is faded for fadeout\\nseconds.\\n\\nThis sets the last queued file to None.\\n\\n`channel`\\nThe channel to stop the sound on.\\n\\n`fadeout`\\nIf not None, this is a time in seconds to fade for. Otherwise the\\nfadeout time is taken from config.fadeout_audio. This is ignored if\\nthe channel is paused.\\n\\n"],"renpy.newest_slot":["renpy","function","(regexp=None)","","function","Returns the name of the newest save slot (the save slot with the most\\nrecent modification time), or None if there are no (matching) saves.\\n\\nIf `regexp` exists, only slots that begin with `regexp` are returned.\\n\\n"],"renpy.not_const":["renpy","function","(name)","","function","Declares a name in the store to be not constant.\\n\\nThis undoes the effect of calls to renpy.const and\\nrenpy.pure.\\n\\n`name`\\nThe name to declare not constant.\\n\\n"],"renpy.not_infinite_loop":["renpy","function","(delay)","","function","Resets the infinite loop detection timer to `delay` seconds.\\n\\n"],"renpy.notify":["renpy","function","(message)","","function","Causes Ren\'Py to display the `message` using the notify screen. By\\ndefault, this will cause the message to be dissolved in, displayed\\nfor two seconds, and dissolved out again.\\n\\nThis is useful for actions that otherwise wouldn\'t produce feedback,\\nlike screenshots or quicksaves.\\n\\nOnly one notification is displayed at a time. If a second notification\\nis displayed, the first notification is replaced.\\n\\nThis function just calls config.notify, allowing its implementation\\nto be replaced by assigning a new function to that variable.\\n\\n"],"renpy.open_file":["renpy","function","(fn, encoding=None, directory=None)","","function","Returns a read-only file-like object that accesses the file named `fn`. The file is\\naccessed using Ren\'Py\'s standard search method, and may reside in the game directory,\\nin an RPA archive, or as an Android asset.\\n\\nThe object supports a wide subset of the fields and methods found on Python\'s\\nstandard file object, opened in binary mode. (Basically, all of the methods that\\nare sensible for a read-only file.)\\n\\n`encoding`\\nIf given, the file is open in text mode with the given encoding.\\nIf None, the default, the encoding is taken from config.open_file_encoding.\\nIf False, the file is opened in binary mode.\\n\\n`directory`\\nIf not None, a directory to search in if the file is not found\\nin the game directory. This will be prepended to filename, and\\nthe search tried again.\\n\\n"],"renpy.pause":["renpy","function","(delay=None, *, predict=False, modal=True, hard=False)","","function","Causes Ren\'Py to pause. Returns true if the user clicked to end the pause,\\nor false if the pause timed out or was skipped.\\n\\n`delay`\\nIf given, the number of seconds Ren\'Py should pause for.\\n\\nThe following should be given as keyword arguments:\\n\\n`predict`\\nIf True, when all prediction - including prediction scheduled with\\nrenpy.start_predict and renpy.start_predict_screen - has\\nbeen finished, the pause will be ended.\\n\\nThis also causes Ren\'Py to prioritize prediction over display smoothness\\nfor the duration of the pause. Because of that, it\'s recommended to not\\ndisplay animations during prediction.\\n\\nThe pause will still end by other means - when the user clicks or skips,\\nor when the delay expires (if any).\\n\\n`modal`\\nIf True, a timed pause will not end (it will hold) when a modal screen\\nis being displayed.\\nIf False, the pause will end while a modal screen is being displayed.\\n\\n`hard`\\nWhen True, Ren\'Py may prevent the user from clicking to interrupt the\\npause. If the player enables skipping, the hard pause will be skipped.\\nThere may be other circumstances where the hard pause ends early or\\nprevents Ren\'Py from operating properly, these will not be treated as\\nbugs.\\n\\nIn general, using hard pauses is rude. When the user clicks to advance\\nthe game, it\'s an explicit request - the user wishes the game to\\nadvance. To override that request is to assume you understand what the\\nplayer wants more than the player does.\\n\\ntl;dr - Don\'t use renpy.pause with hard=True.\\n\\nCalling renpy.pause guarantees that whatever is on the screen will be\\ndisplayed for at least one frame, and hence has been shown to the\\nplayer.\\n\\n"],"renpy.play":["renpy","function","(filename, channel=None, **kwargs)","","function","Plays a sound effect. If `channel` is None, it defaults to\\nconfig.play_channel. This is used to play sounds defined in\\nstyles, hover_sound and activate_sound.\\n\\n"],"renpy.pop_call":["renpy","function","()","","function","Pops the current call from the call stack, without returning to the\\nlocation. Also reverts the values of dynamic\\nvariables, the same way the Ren\'Py return statement would.\\n\\nThis can be used if a label that is called decides not to return\\nto its caller.\\n\\n"],"renpy.predicting":["renpy","function","()","","function","Returns true if Ren\'Py is currently in a predicting phase.\\n\\n"],"renpy.profile_memory":["renpy","function","(fraction=1.0, minimum=0, skip_constants=False)","","function","Profiles object, surface, and texture memory use by Ren\'Py and the\\ngame. Writes an accounting of memory use by to the memory.txt file and\\nstdout.\\n\\nThe accounting is by names in the store and in the Ren\'Py implementation\\nthat the memory is reachable from. If an object is reachable from more\\nthan one name, it\'s assigned to the name it\'s most directly reachable\\nfrom.\\n\\n`fraction`\\nThe fraction of the total memory usage to show. 1.0 will show all\\nmemory usage, .9 will show the top 90%.\\n\\n`minimum`\\nIf a name is accounted less than `minimum` bytes of memory, it will\\nnot be printed.\\n\\n`skip_constants`\\nIf True, the profiler will skip scanning of large Ren\'Py\'s containers,\\nthat are intended to be immutable after startup.\\n\\nAs it has to scan all memory used by Ren\'Py, this function may take a\\nlong time to complete.\\n\\n"],"renpy.profile_rollback":["renpy","function","()","","function","Profiles memory used by the rollback system. Writes (to memory.txt and\\nstdout) the memory used by the rollback system. This tries to account\\nfor rollback memory used by various store variables, as well as by\\ninternal aspects of the rollback system.\\n\\n"],"renpy.profile_screen":["renpy","class","(name, predict=False, show=False, update=False, request=False, time=False, debug=False, const=False)","","class","Requests screen profiling for the screen named `name`, which\\nmust be a string.\\n\\nApart from `name`, all arguments must be supplied as keyword\\narguments. This function takes three groups of arguments.\\n\\n\\nThe first group of arguments determines when profiling occurs.\\n\\n`predict`\\nIf true, profiling occurs when the screen is being predicted.\\n\\n`show`\\nIf true, profiling occurs when the screen is first shown.\\n\\n`update`\\nIf true, profiling occurs when the screen is updated.\\n\\n`request`\\nIf true, profiling occurs when requested by pressing F8.\\n\\nThe second group of arguments controls what profiling output is\\nproduced when profiling occurs.\\n\\n`time`\\nIf true, Ren\'Py will log the amount of time it takes to evaluate\\nthe screen.\\n\\n`debug`\\nIf true, Ren\'Py will log information as to how screens are\\nevaluated, including:\\n\\n* Which displayables Ren\'Py considers constant.\\n* Which arguments, if any, needed to be evaluated.\\n* Which displayables were reused.\\n\\nProducing and saving this debug information takes a noticeable\\namount of time, and so the `time` output should not be considered\\nreliable if `debug` is set.\\n\\nThe last group of arguments controls what output is produced once\\nper Ren\'Py run.\\n\\n`const`\\nDisplays the variables in the screen that are marked as const and\\nnot-const.\\n\\nAll profiling output will be logged to profile_screen.txt in the game\\ndirectory.\\n\\n"],"renpy.pure":["renpy","function","(fn)","","function","Declares a function as pure. A pure function must always return the\\nsame value when it is called with the same arguments, outside of\\ndefine, init, and translate python blocks.\\n\\n`fn`\\nThe name of the function to declare pure. This may either be a string\\ncontaining the name of the function, or the function itself.\\nIf a string is passed and the function is inside a module,\\nthis string should contain the module name with the dot.\\n\\nReturns `fn`, allowing this function to be used as a decorator.\\n\\n"],"renpy.queue_event":["renpy","function","(name, up=False, **kwargs)","","function","Queues an event with the given name. `Name` should be one of the event\\nnames in config.keymap, or a list of such names.\\n\\n`up`\\nThis should be false when the event begins (for example, when a keyboard\\nbutton is pressed.) It should be true when the event ends (when the\\nbutton is released.)\\n\\nThe event is queued at the time this function is called. This function will\\nnot work to replace an event with another - doing so will change event order.\\n(Use config.keymap instead.)\\n\\nThis method is threadsafe.\\n\\n"],"renpy.quit":["renpy","function","(relaunch=False, status=0, save=False)","","function","This causes Ren\'Py to exit entirely.\\n\\n`relaunch`\\nIf true, Ren\'Py will run a second copy of itself before quitting.\\n\\n`status`\\nThe status code Ren\'Py will return to the operating system.\\nGenerally, 0 is success, and positive integers are failure.\\n\\n`save`\\nIf true, the game is saved in _quit_slot before Ren\'Py\\nterminates.\\n\\n"],"renpy.quit_event":["renpy","function","()","","function","Triggers a quit event, as if the player clicked the quit button in the\\nwindow chrome.\\n\\n"],"renpy.redraw":["renpy","function","(d, when)","","function","Causes the displayable `d` to be redrawn (the render method called)\\nwhen `when` seconds have elapsed. The displayable may be redrawn before\\nthat time (for example, when a child is redrawn), in which case a pending\\nredraw is forgotten.\\n\\n"],"renpy.register_bmfont":["renpy","function","(name=None, size=None, bold=False, italics=False, underline=False, filename=None)","","function","This registers a BMFont with the given details. Please note that size, bold,\\nitalic, and underline are all advisory (used for matching), and do not\\nchange the appearance of the font.\\n\\nPlease see the `BMFont home page <http://www.angelcode.com/products/bmfont/>`_\\nfor the tool that creates BMFonts. Ren\'Py expects that the filename\\nparameter will be to a file in the BMFont text format, that describes a\\n32-bit font. The Alpha channel should contain the font information, while\\nthe Red, Green, and Blue channels should be set to one. The image files,\\nkerning, and other control information is read out of the BMFont file.\\n\\nWe recommend including Latin and General Punctuation as part of your BMFont,\\nto ensure all of the Ren\'Py interface can render.\\n\\n`name`\\nThe name of the font being registered, a string.\\n\\n`size`\\nThe size of the font being registered, an integer.\\n\\n`bold`\\nThe boldness of the font being registered, a boolean.\\n\\n`italics`\\nThe italicness of the font being registered, a boolean.\\n\\n`underline`\\nAn ignored parameter.\\n\\n`filename`\\nThe file containing BMFont control information.\\n\\n"],"renpy.register_mudgefont":["renpy","function","(name=None, size=None, bold=False, italics=False, underline=False, filename=None, xml=None, spacewidth=10, default_kern=0, kerns={})","","function","This registers a MudgeFont with the given details. Please note that size,\\nbold, italic, and underline are all advisory (used for matching), and do not\\nchange the appearance of the font.\\n\\nPlease see the `MudgeFont home page <http://www.larryhastings.com/programming/mudgefont/>`_\\nfor the tool that creates MudgeFonts. Ren\'Py assumes that character codes\\nfound in the MudgeFont xml file are unicode character numbers, and ignores\\nnegative character codes.\\n\\n`name`\\nThe name of the font being registered, a string.\\n\\n`size`\\nThe size of the font being registered, an integer.\\n\\n`bold`\\nThe boldness of the font being registered, a boolean.\\n\\n`italics`\\nThe italicness of the font being registered, a boolean.\\n\\n`underline`\\nAn ignored parameter.\\n\\n`filename`\\nThe file containing the MudgeFont image, a string. The image is usually\\na TGA file, but could be a PNG or other format that Ren\'Py supports.\\n\\n`xml`\\nThe xml file containing information generated by the MudgeFont tool.\\n\\n`spacewidth`\\nThe width of a space character, an integer in pixels.\\n\\n`default_kern`\\nThe default kern spacing between characters, in pixels.\\n\\n`kerns`\\nA map from two-character strings to the kern that should be used between\\nthose characters.\\n\\n"],"renpy.register_persistent":["renpy","function","(field, func)","","function","Registers a function that is used to merge values of a persistent field\\nloaded from disk with values of current persistent object.\\n\\n`field`\\nThe name of a field on the persistent object.\\n\\n`function`\\nA function that is called with three parameters, `old`, `new`, and\\n`current`:\\n\\n`old`\\nThe value of the field in the older object.\\n\\n`new`\\nThe value of the field in the newer object.\\n\\n`current`\\nThe value of the field in the current persistent object. This is\\nprovided for cases where the identity of the object referred to\\nby the field can\'t change.\\n\\nThe function is expected to return the new value of the field in the\\npersistent object.\\n\\n"],"renpy.register_sfont":["renpy","function","(name=None, size=None, bold=False, italics=False, underline=False, filename=None, spacewidth=10, baseline=None, default_kern=0, kerns={}, charset=\'!\\"#$%&\\\\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\')","","function","This registers an SFont with the given details. Please note that size, bold,\\nitalic, and underline are all advisory (used for matching), and do not\\nchange the appearance of the font.\\n\\n`More information about SFont. <http://www.linux-games.com/sfont/>`_\\n\\n`name`\\nThe name of the font being registered, a string.\\n\\n`size`\\nThe size of the font being registered, an integer.\\n\\n`bold`\\nThe boldness of the font being registered, a boolean.\\n\\n`italics`\\nThe italicness of the font being registered, a boolean.\\n\\n`underline`\\nAn ignored parameter.\\n\\n`filename`\\nThe file containing the sfont image, a string.\\n\\n`spacewidth`\\nThe width of a space character, an integer in pixels.\\n\\n`baseline`\\nThe distance from the top of the font to the baseline (the invisible\\nline letters sit on), an integer in pixels.  If this font is mixed with\\nother fonts, their baselines will be aligned.  Negative values indicate\\ndistance from the bottom of the font instead, and ``None`` means the\\nbaseline equals the height (i.e., is at the very bottom of the font).\\n\\n`default_kern`\\nThe default kern spacing between characters, in pixels.\\n\\n`kerns`\\nA map from two-character strings to the kern that should be used between\\nthose characters.\\n\\n`charset`\\nThe character set of the font. A string containing characters in\\nthe order in which they are found in the image. The default character\\nset for a SFont is\\n\\n.. code-block:: none\\n\\n! \\" # $ % & \' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ?\\n@ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \\\\ ] ^ _\\n` a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~\\n\\n"],"renpy.register_shader":["renpy","function","(name, **kwargs)","","function","This registers a shader part. This takes `name`, and then\\nkeyword arguments.\\n\\n`name`\\nA string giving the name of the shader part. Names starting with an\\nunderscore or \\"renpy.\\" are reserved for Ren\'Py.\\n\\n`variables`\\nThe variables used by the shader part. These should be listed one per\\nline, a storage (uniform, attribute, or varying) followed by a type,\\nname, and semicolon. For example\\n\\n```\\nvariables=\'\'\'\\nuniform sampler2D tex0;\\nattribute vec2 a_tex_coord;\\nvarying vec2 v_tex_coord;\\n\'\'\'\\n\\n```\\n\\n`vertex_functions`\\nIf given, a string containing functions that will be included in the\\nvertex shader.\\n\\n`fragment_functions`\\nIf given, a string containing functions that will be included in the\\nfragment shader.\\n\\nOther keyword arguments should start with ``vertex_`` or ``fragment_``,\\nand end with an integer priority. So \\"fragment_200\\" or \\"vertex_300\\". These\\ngive text that\'s placed in the appropriate shader at the given priority,\\nwith lower priority numbers inserted before higher priority numbers.\\n\\n"],"renpy.register_sl_displayable":["renpy","class","(name, displayable, style, nchildren=0, scope=False, *, replaces=False, default_keywords={}, default_properties=True, unique=False)","","class","Registers a screen language statement that creates a displayable.\\n\\n`name`\\nThe name of the screen language statement, a string containing a Ren\'Py\\nkeyword. This keyword is used to introduce the new statement.\\n\\n`displayable`\\nThis is a function that, when called, returns a displayable\\nobject. All position arguments, properties, and style properties\\nare passed as arguments to this function. Other keyword arguments\\nare also given to this function, a described below.\\n\\nThis must return a Displayable. If it returns multiple displayables,\\nthe _main attribute of the outermost displayable should be set to\\nthe \\"main\\" displayable - the one that children should be added\\nto.\\n\\n`style`\\nThe base name of the style of this displayable. If the style property\\nis not given, this will have the style prefix added to it. The\\ncomputed style is passed to the `displayable` function as the\\n``style`` keyword argument.\\n\\n`nchildren`\\nThe number of children of this displayable. One of:\\n\\n0\\nThe displayable takes no children.\\n1\\nThe displayable takes 1 child. If more than one child is given,\\nthe children are placed in a Fixed.\\n\\"many\\"\\nThe displayable takes more than one child.\\n\\n\\n`unique`\\nThis should be set to true if the function returns a  displayable with\\nno other references to it.\\n\\nThe following arguments should be passed in using keyword arguments:\\n\\n`replaces`\\nIf true, and the displayable replaces a prior displayable, that displayable\\nis passed as a parameter to the new displayable.\\n\\n`default_keywords`\\nThe default set of keyword arguments to supply to the displayable.\\n\\n`default_properties`\\nIf true, the ui and position properties are added by default.\\n\\nReturns an object that can have positional arguments and properties\\nadded to it by calling the following methods. Each of these methods\\nreturns the object it is called on, allowing methods to be chained\\ntogether.\\n\\n.. method:: add_positional(name)\\n\\nAdds a positional argument with `name`\\n\\n.. method:: add_property(name)\\n\\nAdds a property with `name`. Properties are passed as keyword\\narguments.\\n\\n.. method:: add_style_property(name)\\n\\nAdds a family of properties, ending with `name` and prefixed with\\nthe various style property prefixes. For example, if called with\\n(\\"size\\"), this will define size, idle_size, hover_size, etc.\\n\\n.. method:: add_prefix_style_property(prefix, name)\\n\\nAdds a family of properties with names consisting of `prefix`,\\na style property prefix, and `name`. For example, if called\\nwith a prefix of `text_` and a name of `size`, this will\\ncreate text_size, text_idle_size, text_hover_size, etc.\\n\\n.. method:: add_property_group(group, prefix=\'\')\\n\\nAdds a group of properties, prefixed with `prefix`. `Group` may\\nbe one of the strings:\\n\\n* \\"bar\\"\\n* \\"box\\"\\n* \\"button\\"\\n* \\"position\\"\\n* \\"text\\"\\n* \\"window\\"\\n\\nThese correspond to groups of style_properties. Group can\\nalso be \\"ui\\", in which case it adds the common ui properties.\\n\\n.. method:: copy_properties(name)\\n\\nAdds all styles and positional/keyword arguments that can be passed to the `name` screen statement.\\n\\n"],"renpy.register_sl_statement":["renpy","class","(name, children=\'many\', screen=None)","","class","Registers a custom screen language statement with Ren\'Py.\\n\\n`name`\\nThis must be a word. It\'s the name of the custom screen language\\nstatement.\\n\\n`children`\\nThe number of children this custom statement takes. This should\\nbe 0, 1, or \\"many\\", which means zero or more.\\n\\n`screen`\\nThe screen to use. If not given, defaults to `name`.\\n\\nReturns an object that can have positional arguments and properties\\nadded to it. This object has the same .add_ methods as the objects\\nreturned by renpy.register_sl_displayable.\\n\\n"],"renpy.register_statement":["renpy","function","(name, parse=None, lint=None, execute=None, predict=None, next=None, scry=None, block=False, init=False, translatable=False, execute_init=None, init_priority=0, label=None, warp=None, translation_strings=None, force_begin_rollback=False, post_execute=None, post_label=None, predict_all=True, predict_next=None, execute_default=None, reachable=None)","","function","This registers a user-defined statement.\\n\\n`name`\\nThis is either a space-separated list of names that begin the statement, or the\\nempty string to define a new default statement (the default statement will\\nreplace the say statement).\\n\\n`block`\\nWhen this is False, the statement does not expect a block. When True, it\\nexpects a block, but leaves it up to the lexer to parse that block. If the\\nstring \\"script\\", the block is interpreted as containing one or more\\nRen\'Py script language statements. If the string \\"possible\\", the\\nblock expect condition is determined by the parse function.\\n\\n`parse`\\nThis is a function that takes a Lexer object. This function should parse the\\nstatement, and return an object. This object is passed as an argument to all the\\nother functions.\\n\\n`lint`\\nThis is called to check the statement. It is passed a single argument, the\\nobject returned from parse. It should call renpy.error to report errors.\\n\\n`execute`\\nThis is a function that is called when the statement executes. It is passed a\\nsingle argument, the object returned from parse.\\n\\n`execute_init`\\nThis is a function that is called at init time, at priority 0. It is passed a\\nsingle argument, the object returned from parse.\\n\\n`predict`\\nThis is a function that is called to predict the images used by the statement.\\nIt is passed a single argument, the object returned from parse. It should return\\na list of displayables used by the statement.\\n\\n`next`\\nThis is a function that is called to determine the next statement.\\n\\nIf `block` is not \\"script\\", this is passed a single argument, the object\\nreturned from the parse function. If `block` is \\"script\\", an additional\\nargument is passed, an object that names the first statement in the block.\\n\\nThe function should return either a string giving a label to jump to,\\nthe second argument to transfer control into the block, or None to\\ncontinue to the statement after this one. It can also return the result\\nof Lexer.renpy_statement or Lexer.renpy_block when\\ncalled in the `parse` function.\\n\\n`label`\\nThis is a function that is called to determine the label of this\\nstatement. If it returns a string, that string is used as the statement\\nlabel, which can be called and jumped to like any other label.\\n\\n`warp`\\nThis is a function that is called to determine if this statement\\nshould execute during warping. If the function exists and returns\\ntrue, it\'s run during warp, otherwise the statement is not run\\nduring warp.\\n\\n`scry`\\nUsed internally by Ren\'Py.\\n\\n`init`\\nTrue if this statement should be run at init-time. (If the statement\\nis not already inside an init block, it\'s automatically placed inside\\nan init block.)\\n\\nYou probably don\'t want this if you have an `execute_init` function,\\nas wrapping the statement in an init block will cause the `execute_init`\\nand `execute` functions to be called at the same time.\\n\\n`translatable`\\nIf set to true, the statement will be included in a translation\\nblock, generally the block containing the succeding say statement.\\nThis may only be set to true for one-line statements. It\'s used\\nfor statements like ``nvl clear`` and ``voice``, which may need\\nto be changed with dialogue.\\n\\n`init_priority`\\nAn integer that determines the priority of initialization of the\\ninit block created by `init` and `execute_init` function.\\n\\n`translation_strings`\\nA function that is called with the parsed block. It\'s expected to\\nreturn a list of strings, which are then reported as being available\\nto be translated.\\n\\n`force_begin_rollback`\\nThis should be set to true on statements that are likely to cause the\\nend of a fast skip, similar to ``menu`` or ``call screen``.\\n\\n`post_execute`\\nA function that is executed as part the next statement after this\\none. (Adding a post_execute function changes the contents of the RPYC\\nfile, meaning a Force Compile is necessary.)\\n\\n`post_label`\\nThis is a function that is called to determine the label of this\\nthe post execute statement. If it returns a string, that string is used\\nas the statement label, which can be called and jumped to like any other\\nlabel. This can be used to create a unique return point.\\n\\n`predict_all`\\nIf True, then this predicts all sub-parses of this statement and\\nthe statement after this statement.\\n\\n`predict_next`\\nThis is called with a single argument, the label of the statement\\nthat would run after this statement.\\n\\nThis should be called to predict the statements that can run after\\nthis one. It\'s expected to return a list of of labels or SubParse\\nobjects. This is not called if `predict_all` is true.\\n\\n`execute_default`\\nThis is a function that is called at the same time the default\\nstatements are run - after the init phase, but before the game starts; when the\\na save is loaded; after rollback; before lint; and potentially at\\nother times.\\n\\nThis is called with a single argument, the object returned from parse.\\n\\n`reachable`\\nThis is a function that is called to allow this statement to\\ncustomize how it participates in lint\'s reachability analysis.\\n\\nBy default, a statement\'s custom block, sub-parse blocks created\\nwith Lexer.renpy_block(), and the statement after the statement\\nare reachable if the statement itself is reachable. The statement\\nis also reachable if it has a label function.\\n\\nThis can be customized by providing a reachable function. This is\\na function that takes five arguments (in the following, a \\"label\\"\\nmay be a string or an opaque object):\\n\\n* The object returned by the parse function.\\n* A boolean that is true if the statement is reachable.\\n* The label of the statement.\\n* The label of the next statement, or None if there is no next statement.\\n* If `block` is set to \\"script\\", the label of the first statement in the block,\\nor None if there is no block.\\n\\nIt\'s expected to return a set that may contain:\\n\\n* A label or subparse object of a statement that is reachable.\\n* True, to indicate that this statement should not be reported by lint,\\nbut is not intrinsically reachable. (It will become reachable if it\\nis reported reachable by another statement.)\\n* None, which is ignored.\\n\\nThis function may be called multiple times with both value of is_reachable,\\nto allow the statement to customize its behavior based on whether it\'s\\nreachable or not. (For example, the next statement may only be reachable\\nif this statement is.)\\n\\n**Warning:**\\n\\nUsing the empty string as the name to redefine the say statement is\\nusually a bad idea. That is because when replacing a Ren\'Py native\\nstatement, its behavior depends on the statement_equivalents. In\\nthe case of the say statement, these equivalents do not support the `id`\\nand translation systems. As a result, a game redefining the default\\nstatement will not be able to use these features (short of\\nreimplementing them entirely).\\n\\n"],"renpy.register_style_preference":["renpy","function","(preference, alternative, style, property, value)","","function","Registers information about an alternative for a style preference.\\n\\n`preference`\\nA string, the name of the style preference.\\n\\n`alternative`\\nA string, the name of the alternative.\\n\\n`style`\\nThe style that will be updated. This may be a style object or a string giving the style name.\\n\\n`property`\\nA string giving the name of the style property that will be update.\\n\\n`value`\\nThe value that will be assigned to the style property.\\n\\n"],"renpy.register_textshader":["renpy","function","(name, shaders=(), extra_slow_time=0.0, extra_slow_duration=0.0, redraw=None, redraw_when_slow=0.0, include_default=True, adjust_function=None, doc=None, **kwargs)","","function","This creates a textshader and registers it with the name `name`.\\n\\nThis function takes the following arguments:\\n\\n`name`\\nThis is the name of the textshader. It\'s also used to register a shader\\npart named textshader.`name`.\\n\\n`shaders`\\nShader parts to apply to the text. This can be a string, or a list or tuple of strings.\\nThis should be a shader part registered with renpy.register_shader, or this\\nfunction. If a shader part begins with \'-\', then it is removed from the list of shader\\nparts. (For example, \'-textshader.typewriter\' will remove that part.)\\n\\nNote that the shader parts registered with this function are prefixed\\nwith textshader., which needs to be supplied when used with this function.\\n\\n`extra_slow_time`\\nExtra time to add to the slow time effect beyond what Ren\'Py will compute from\\nthe current characters per second. This is useful for shaders that\\nmight take more time to transition a character than the default time.\\nIf True, the shader is always updated.\\n\\n`extra_slow_duration`\\nAdded to `extra_slow_time`, but this is multiplied by the time\\nper character to get the extra time to add to the slow time effect.\\n(Time per character is 1 / characters per second.)\\n\\n`redraw`\\nThe amount in time in seconds before the text is redrawn, after\\nall slow text has been show and `extra_slow_time` has passed.\\n\\n`redraw_when_slow`\\nThe amount of time in seconds before the text is redrawn when showing\\nslow text.\\n\\n`include_default`\\nIf True, when this textshader is used directly, it will be combined\\nwith config.default_textshader.\\n\\n`adjust_function`\\nA function that is called with an object and the uniforms being\\npassed to the text shader as keyworkd arguments. This\\nfunction can set the `extra_slow_time`, `extra_slow_duration`,\\n`redraw`, and `redraw_when_slow` fields of the object\\n\\n`doc`\\nA string containing documetation information. This is mostly intended\\nfor Ren\'Py\'s documentation system.\\n\\nKeyword argument beginning with ``u_`` are passed as uniforms to the shader,\\nwith strings beginning with ``#`` being interpreted as colors. Most uniforms\\nshould begin with ``u__``, using shader local variables\\nto prevent conflicts with other shaders.\\n\\nA keyword argument named `variables` and all keyword arguments that begin\\nwith `fragment_` or `vertex_` are passed to renpy.register_shader,\\nwhich registers the shader part.\\n\\n"],"renpy.reload_script":["renpy","function","()","","function","Causes Ren\'Py to save the game, reload the script, and then load the\\nsave.\\n\\nThis should only be called during development. It works on Windows, macOS,\\nand Linux, but may not work on other platforms.\\n\\n"],"renpy.rename_save":["renpy","function","(old, new)","","function","Renames a save from `old` to `new`. (Does nothing if `old` does not\\nexist.)\\n\\n"],"renpy.render":["renpy","function","(d, width, height, /, st, at)","","function","Causes a displayable to be rendered, and a renpy.Render object to\\nbe returned.\\n\\n`d`\\nThe displayable to render.\\n\\n`width`, `height`\\nThe width and height available for the displayable to render into.\\n\\n`st`, `at`\\nThe shown and animation timebases.\\n\\nRenders returned by this object may be cached, and should not be modified\\nonce they have been retrieved.\\n\\n"],"renpy.render_to_file":["renpy","function","(d, filename, width=None, height=None, st=0.0, at=None, resize=False)","","function","Renders a displayable or Render, and saves the result of that render to a file. The render is performed by\\nRen\'Py\'s display system, such that if the window is upscaled the render will be upscaled as well.\\n\\n`d`\\nThe displayable or Render to render. If a Render, `width`, `height`, `st`, and `at` are ignored.\\n\\n`filename`\\nA string, giving the name of the file to save the render to. This is interpreted as relative\\nto the base directory. This must end with .png.\\n\\n`width`\\nThe width to offer `d`, in virtual pixesl. If None, config.screen_width.\\n\\n`height`\\nThe height to offer `d`, in virtual pixels. If None, config.screen_height.\\n\\n`st`\\nThe time of the render, in the shown timebase.\\n\\n`at`\\nThe time of the rendem in the animation timebase. If None, `st` is used.\\n\\n`resize`\\nIf True, the image will be resized to the virtual size of the displayable or render. This\\nmay lower the quality of the result.\\n\\nThis function may only be called after the Ren\'Py display system has started, so it can\'t be\\ncalled during the init phase or before the first interaction.\\n\\nRen\'Py not rescan files while the game is running, so this shouldn\'t be used to sythesize\\nassets that are used as part of the game.\\n\\n"],"renpy.render_to_surface":["renpy","function","(d, width=None, height=None, st=0.0, at=None, resize=False)","","function","This takes a displayable or Render, and returns a pygame_sdl2 surface. The render is performed by\\nRen\'Py\'s display system, such that if the window is upscaled the render will be upscaled as well.\\n\\n`d`\\nThe displayable or Render to render. If a Render, `width`, `height`, `st`, and `at` are ignored.\\n\\n`width`\\nThe width to offer `d`, in virtual pixesl. If None, config.screen_width.\\n\\n`height`\\nThe height to offer `d`, in virtual pixels. If None, config.screen_height.\\n\\n`st`\\nThe time of the render, in the shown timebase.\\n\\n`at`\\nThe time of the rendem in the animation timebase. If None, `st` is used.\\n\\n`resize`\\nIf True, the surface will be resized to the virtual size of the displayable or render. This\\nmay lower the quality of the result.\\n\\nThis function may only be called after the Ren\'Py display system has started, so it can\'t be\\ncalled during the init phase or before the first interaction.\\n\\n"],"renpy.request_permission":["renpy","function","(permission)","","function","Asks Android to grant a permission to this application. The user may be\\nprompted to grant the permission.\\n\\n`permission`\\nA string giving the name of the permission, for example, \\"android.permission.WRITE_EXTERNAL_STORAGE\\".\\n\\nReturns true if the permission has been granted, false if not or if called on a\\nnon-Android platform.\\n\\n"],"renpy.reset_all_contexts":["renpy","function","()","","function","This pops all contexts off the context stack, resetting the dynamic variables\\nas it does so. When this is done, a new context is created, the current statement\\nends, and the game continues from the next statement. This will put Ren\'Py\\ninto the state it was at startup, with the exception of data and the start\\npoint.\\n\\nThis can be used to reset everything about the game - shown image, playing music,\\netc, as if the game started from the beginning.\\n\\nBecause of how completely this resets Ren\'Py, this function immediately ends the\\ncurrent statement.\\n\\nThis is mainly intended for use in an after_load label, where it can bring the\\ngame back to the state it was in when it started. It\'s then up to the game to\\nre-establish the scene, music, etc, and it can then jump to the label it wants\\nto continue at.\\n\\n"],"renpy.reset_physical_size":["renpy","function","()","","function","Attempts to set the size of the physical window to the size specified\\nusing renpy.config.physical_height and renpy.config.physical_width,\\nor the size set using renpy.config.screen_width and renpy.config.screen_height\\nif not set.\\n\\n"],"renpy.restart_interaction":["renpy","function","()","","function","Restarts the current interaction. Among other things, this displays\\nimages added to the scene, re-evaluates screens, and starts any\\nqueued transitions.\\n\\nThis only does anything when called from within an interaction (for\\nexample, from an action). Outside an interaction, this function has\\nno effect.\\n\\n"],"renpy.retain_after_load":["renpy","function","()","","function","Causes data modified between the current statement and the statement\\ncontaining the next checkpoint to be retained when a load occurs.\\n\\n\\n"],"renpy.return_statement":["renpy","function","(value=None)","","function","Causes Ren\'Py to return from the current Ren\'Py-level call.\\n\\n"],"renpy.roll_forward_info":["renpy","function","()","","function","When in rollback, returns the data that was supplied to renpy.checkpoint\\nthe last time this statement executed. Outside of rollback, returns None.\\n\\n"],"renpy.rollback":["renpy","function","(force=False, checkpoints=1, defer=False, greedy=True, label=None, abnormal=True)","","function","Rolls the state of the game back to the last checkpoint.\\n\\n`force`\\nIf true, the rollback will occur in all circumstances. Otherwise,\\nthe rollback will only occur if rollback is enabled in the store,\\ncontext, and config.\\n\\n`checkpoints`\\nRen\'Py will roll back through this many calls to renpy.checkpoint. It\\nwill roll back as far as it can, subject to this condition.\\n\\n`defer`\\nIf true, the call will be deferred until control returns to the main\\ncontext.\\n\\n`greedy`\\nIf true, rollback will finish just after the previous checkpoint.\\nIf false, rollback finish just before the current checkpoint.\\n\\n`label`\\nIf not None, a label that is called when rollback completes.\\n\\n`abnormal`\\nIf true, the default, script executed after the transition is run in\\nan abnormal mode that skips transitions that would have otherwise\\noccured. Abnormal mode ends when an interaction begins.\\n\\n"],"renpy.run":["renpy","function","(action)","","function","Run an action or list of actions. A single action is called with no\\narguments, a list of actions is run in order using this function, and\\nNone is ignored.\\n\\nReturns the result of the last action to return a value.\\n\\n"],"renpy.save":["renpy","function","(filename, extra_info=\'\')","","function","Saves the game state to a save slot.\\n\\n`filename`\\nA string giving the name of a save slot. Despite the variable name,\\nthis corresponds only loosely to filenames.\\n\\n`extra_info`\\nAn additional string that should be saved to the save file. Usually,\\nthis is the value of save_name.\\n\\nrenpy.take_screenshot should be called before this function.\\n\\n"],"renpy.save_persistent":["renpy","function","()","","function","Saves the persistent data to disk.\\n\\n\\n"],"renpy.say":["renpy","function","(who, what, *args, **kwargs)","","function","The equivalent of the say statement.\\n\\n`who`\\nEither the character that will say something, None for the narrator,\\nor a string giving the character name. In the latter case, the\\nsay store function is called.\\n\\n`what`\\nA string giving the line to say. Percent-substitutions are performed\\nin this string.\\n\\n`interact`\\nIf true, Ren\'Py waits for player input when displaying the dialogue. If\\nfalse, Ren\'Py shows the dialogue, but does not perform an interaction.\\n(This is passed in as a keyword argument.)\\n\\nThis function is rarely necessary, as the following three lines are\\nequivalent. \\n\\n```\\ne \\"Hello, world.\\"\\n$ renpy.say(e, \\"Hello, world.\\")\\n$ e(\\"Hello, world.\\") # when e is not a string\\n$ say(e, \\"Hello, world.\\") # when e is a string\\n\\n```\\n\\n"],"renpy.scene":["renpy","function","(layer=\'master\')","","function","Removes all displayables from `layer`. This is equivalent to the scene\\nstatement, when the scene statement is not given an image to show.\\n\\nA full scene statement is equivalent to a call to renpy.scene followed by a\\ncall to renpy.show. For example\\n\\n```\\nscene bg beach\\n\\n```\\n\\nis equivalent to\\n\\n```\\n$ renpy.scene()\\n$ renpy.show(\\"bg beach\\")\\n\\n```\\n\\n"],"renpy.screenshot":["renpy","function","(filename)","","function","Saves a screenshot in `filename`.\\n\\nReturns True if the screenshot was saved successfully, False if saving\\nfailed for some reason.\\n\\nThe config.screenshot_pattern and _screenshot_pattern\\nvariables control the file the screenshot is saved in.\\n\\n"],"renpy.screenshot_to_bytes":["renpy","function","(size)","","function","Returns a screenshot as a bytes object, that can be passed to im.Data().\\nThe bytes will be a png-format image, such that\\n\\n```\\n$ data = renpy.screenshot_to_bytes((640, 360))\\nshow expression im.Data(data, \\"screenshot.png\\"):\\n    align (0, 0)\\n    \\n```\\n\\nWill show the image. The bytes objects returned can be stored in save\\nfiles and persistent data. However, these may be large, and care should\\nbe taken to not include too many.\\n\\n`size`\\nThe size the screenshot will be resized to. If None, the screenshot\\nwill be resized, and hence will be the size of the player\'s window,\\nwithout any letterbars.\\n\\nThis function may be slow, and so it\'s intended for save-like screenshots,\\nand not realtime effects.\\n\\n"],"renpy.scry":["renpy","function","()","","function","Returns the scry object for the current statement. Returns None if\\nthere are no statements executing.\\n\\nThe scry object tells Ren\'Py about things that must be true in the\\nfuture of the current statement. Right now, the scry object has the\\nfollowing fields:\\n\\n`nvl_clear`\\nIs true if an ``nvl clear`` statement will execute before the\\nnext interaction.\\n\\n`say`\\nIs true if an ``say`` statement will execute before the\\nnext interaction.\\n\\n`menu_with_caption`\\nIs true if a ``menu`` statement with a caption will execute\\nbefore the next interaction.\\n\\n`who`\\nIf a ``say`` or ``menu-with-caption`` statement will execute\\nbefore the next interaction, this is the character object it will use.\\n\\nThe scry object has a next() method, which returns the scry object of\\nthe statement after the current one, if only one statement will execute\\nafter the this one. Otherwise, it returns None.\\n\\n**Warning:**\\n\\nLike other similar functions, the object this returns is meant to be used\\nin the short term after the function is called. Including it in save data\\nor making it participate in rollback is not advised.\\n\\n"],"renpy.seen_audio":["renpy","function","(filename)","","function","Returns True if the given filename has been played at least once on the current\\nuser\'s system.\\n\\n"],"renpy.seen_image":["renpy","function","(name)","","function","Returns True if the named image has been seen at least once on the user\'s\\nsystem. An image has been seen if it\'s been displayed using the show statement,\\nscene statement, or renpy.show function. (Note that there are cases\\nwhere the user won\'t actually see the image, like a show immediately followed by\\na hide.)\\n\\n"],"renpy.seen_label":["renpy","function","(label)","","function","Returns true if the named label has executed at least once on the current user\'s\\nsystem, and false otherwise. This can be used to unlock scene galleries, for\\nexample.\\n\\n"],"renpy.set_autoreload":["renpy","function","(autoreload)","","function","Sets the autoreload flag, which determines if the game will be\\nautomatically reloaded after file changes. Autoreload will not be\\nfully enabled until the game is reloaded with renpy.reload_script.\\n\\n"],"renpy.set_focus":["renpy","function","(screen, id, layer=\'screens\')","","function","This attempts to focus the displayable with `id` in the screen `screen`.\\nFocusing will fail if the displayable isn\'t found, the window isn\'t\\nfocused, or something else is grabbing focus.\\n\\nThe focus may change if the mouse moves, even slightly, after this call\\nis processed.\\n\\n"],"renpy.set_mouse_pos":["renpy","function","(x, y, duration=0)","","function","Jump the mouse pointer to the location given by arguments x and y.\\nIf the device does not have a mouse pointer, this does nothing.\\n\\n`duration`\\nThe time it will take to perform the move, in seconds.\\nDuring this time, the mouse may be unresponsive.\\n\\n"],"renpy.set_physical_size":["renpy","function","(size)","","function","Attempts to set the size of the physical window to `size`. This has the\\nside effect of taking the screen out of fullscreen mode.\\n\\n"],"renpy.set_return_stack":["renpy","function","(stack)","","function","Sets the current return stack. The return stack is a list of statement\\nnames.\\n\\nStatement names may be strings (for labels) or opaque tuples (for\\nnon-label statements).\\n\\nThe most common use of this is to use\\n\\n```\\nrenpy.set_return_stack([])\\n\\n```\\n\\nto clear the return stack.\\n\\n"],"renpy.set_screen_variable":["renpy","function","(name, value, *, screen=None, layer=None)","","function","Sets a variable to a value in the scope of a screen. Note that this\\nwill not immediately update the variable\'s value - call\\nrenpy.restart_interaction to cause the screen to be updated.\\n\\n`name`\\nThe name of the variable to set. This should be a variable\\ncreated with the sl-default statement, as optimization\\nmay prevent changes to other variables from being visible.\\n\\n`value`\\nThe value to set the variable to.\\n\\n`screen`\\nThe name of the screen to return the variable from. If None,\\nthe current screen is used. (The current screen is only defined\\nwhen updating a screen, and in actions that are run inside the\\nscreen.)\\n\\n`layer`\\nThe layer to find the screen on, if `screen` is not None.\\n\\n"],"renpy.set_style_preference":["renpy","function","(preference, alternative)","","function","Sets the selected alternative for the style preference.\\n\\nThe `update` event is triggered when this function is called.\\n\\n`preference`\\nA string giving the name of the style preference.\\n\\n`alternative`\\nA string giving the name of the alternative.\\n\\n\\n"],"renpy.show":["renpy","function","(name, at_list=[], layer=None, what=None, zorder=0, tag=None, behind=[], **kwargs)","","function","Shows an image on a layer. This is the programmatic equivalent of the show\\nstatement.\\n\\n`name`\\nThe name of the image to show, a string.\\n\\n`at_list`\\nA list of transforms that are applied to the image.\\nThe equivalent of the ``at`` property.\\n\\n`layer`\\nA string, giving the name of the layer on which the image will be shown.\\nThe equivalent of the ``onlayer`` property. If None, uses the default\\nlayer associated with the tag.\\n\\n`what`\\nIf not None, this is a displayable that will be shown in lieu of\\nlooking on the image. (This is the equivalent of the show expression\\nstatement.) When a `what` parameter is given, `name` can be used to\\nassociate a tag with the image.\\n\\n`zorder`\\nAn integer, the equivalent of the ``zorder`` property. If None, the\\nzorder is preserved if it exists, and is otherwise set to 0.\\n\\n`tag`\\nA string, used to specify the image tag of the shown image. The\\nequivalent of the ``as`` property.\\n\\n`behind`\\nA list of strings, giving image tags that this image is shown behind.\\nThe equivalent of the ``behind`` property.\\n\\n\\n\\n```\\nshow a\\n$ renpy.show(\\"a\\")\\n\\nshow expression w\\n# anonymous show expression : no equivalent\\n\\nshow expression w as a\\n$ renpy.show(\\"a\\", what=w)\\n$ renpy.show(\\"y\\", what=w, tag=\\"a\\") # in this case, name is ignored\\n\\nshow a at T, T2\\n$ renpy.show(\\"a\\", at_list=(T, T2))\\n\\nshow a onlayer b behind c zorder d as e\\n$ renpy.show(\\"a\\", layer=\\"b\\", behind=[\\"c\\"], zorder=\\"d\\", tag=\\"e\\")\\n\\n```\\n\\n"],"renpy.show_layer_at":["renpy","function","(at_list, layer=\'master\', reset=True, camera=False)","","function","The Python equivalent of the ``show layer`` `layer` ``at`` `at_list`\\nstatement. If `camera` is True, the equivalent of the ``camera`` statement.\\n\\n`reset`\\nIf true, the transform state is reset to the start when it is shown.\\nIf false, the transform state is persisted, allowing the new transform\\nto update that state.\\n\\n"],"renpy.show_screen":["renpy","function","(_screen_name, *args, _layer=None, _zorder=None, _tag=None, _widget_properties={}, _transient=False, **kwargs)","","function","The programmatic equivalent of the show screen statement.\\n\\nShows the named screen. This takes the following keyword arguments:\\n\\n`_screen_name`\\nThe name of the screen to show.\\n`_layer`\\nThe layer to show the screen on. This is equivalent to the\\n``onlayer`` clause of the show-screen-statement statement.\\n`_zorder`\\nThe zorder to show the screen on. If not specified, defaults to\\nthe zorder associated with the screen. If that\'s not specified,\\nit is 0 by default.\\n`_tag`\\nThe tag to show the screen with. If not specified, defaults to\\nthe tag associated with the screen. If that\'s not specified,\\ndefaults to the name of the screen.\\n\\nThis is equivalent to the ``as`` clause of the\\nshow-screen-statement statement.\\n`_widget_properties`\\nA map from the id of a widget to a property name -> property value\\ndictionary. When a widget with that id is shown by the screen, the\\nspecified properties are added to it.\\n`_transient`\\nIf true, the screen will be automatically hidden at the end of\\nthe current interaction.\\n\\nNon-keyword arguments, and keyword arguments that do not begin with\\nan underscore, are passed to the screen.\\n\\n"],"renpy.showing":["renpy","function","(name, layer=None)","","function","Returns true if an image with the same tag as `name` is showing on\\n`layer`.\\n\\n`image`\\nMay be a string giving the image name or a tuple giving each\\ncomponent of the image name. It may also be a string giving\\nonly the image tag.\\n\\n`layer`\\nThe layer to check. If None, uses the default layer for `tag`.\\n\\n"],"renpy.shown_window":["renpy","function","()","","function","Call this to indicate that the window has been shown. This interacts\\nwith the \\"window show\\" statement, which shows an empty window whenever\\nthis functions has not been called during an interaction.\\n\\n"],"renpy.slot_json":["renpy","function","(slotname)","","function","Returns the json information for `slotname`, or None if the slot is\\nempty.\\n\\nMuch like the ``d`` argument to the config.save_json_callbacks\\nfunction, it will be returned as a dictionary. More precisely, the\\ndictionary will contain the same data as it did when the game was saved.\\n\\n"],"renpy.slot_mtime":["renpy","function","(slotname)","","function","Returns the modification time for `slot`, or None if the slot is empty.\\n\\n"],"renpy.slot_screenshot":["renpy","function","(slotname)","","function","Returns a display that can be used as the screenshot for `slotname`,\\nor None if the slot is empty.\\n\\n"],"renpy.sound":["renpy","var","","","var","The renpy.audio.sound namespace contains functions that control the audio system. These functions\\nwork with the sound channel by default. Most functions are documented under their renpy.music equivalents.\\n\\n"],"renpy.split_properties":["renpy","function","(properties, *prefixes)","","function","Splits up `properties` into multiple dictionaries, one per `prefix`. This\\nfunction checks each key in properties against each prefix, in turn.\\nWhen a prefix matches, the prefix is stripped from the key, and the\\nresulting key is mapped to the value in the corresponding dictionary.\\n\\nIf no prefix matches, an exception is thrown. (The empty string, \\"\\",\\ncan be used as the last prefix to create a catch-all dictionary.)\\n\\nFor example, this splits properties beginning with text from\\nthose that do not\\n\\n```\\ntext_properties, button_properties = renpy.split_properties(properties, \\"text_\\", \\"\\")\\n\\n```\\n\\n"],"renpy.start_predict":["renpy","function","(*args)","","function","This function takes one or more displayables as arguments. It causes\\nRen\'Py to predict those displayables during every interaction until\\nthe displayables are removed by renpy.stop_predict.\\n\\nIf a displayable name is a string containing one or more \\\\*\\ncharacters, the asterisks are used as a wildcard pattern. If there\\nis at least one . in the string, the pattern is matched against\\nfilenames, otherwise it is matched against image names.\\n\\nFor example\\n\\n```\\n$ renpy.start_predict(\\"eileen *\\")\\n\\n```\\n\\nstarts predicting all images with the name eileen, while\\n\\n```\\n$ renpy.start_predict(\\"images/concert*.*\\")\\n\\n```\\n\\nmatches all files starting with concert in the images directory.\\n\\nPrediction will occur during normal gameplay. To wait for prediction\\nto complete, use the `predict` argument to renpy.pause.\\n\\n"],"renpy.start_predict_screen":["renpy","function","(_screen_name, *args, **kwargs)","","function","Causes Ren\'Py to start predicting the screen named `_screen_name`\\nwith the given arguments. This replaces any previous prediction\\nof `_screen_name`. To stop predicting a screen, call renpy.stop_predict_screen.\\n\\nPrediction will occur during normal gameplay. To wait for prediction\\nto complete, use the `predict` argument to renpy.pause.\\n\\n"],"renpy.stop_predict":["renpy","function","(*args)","","function","This function takes one or more displayables as arguments. It causes\\nRen\'Py to stop predicting those displayables during every interaction.\\n\\nWildcard patterns can be used as described in renpy.start_predict.\\n\\n"],"renpy.stop_predict_screen":["renpy","function","(name)","","function","Causes Ren\'Py to stop predicting the screen named `name`.\\n\\n"],"renpy.substitute":["renpy","function","(s, scope=None, translate=True)","","function","Applies translation and new-style formatting to the string `s`.\\n\\n`scope`\\nIf not None, a scope which is used in formatting, in addition to the\\ndefault store.\\n\\n`translate`\\nDetermines if translation occurs.\\n\\nReturns the translated and formatted string.\\n\\n"],"renpy.suspend_rollback":["renpy","function","(flag)","","function","Rollback will skip sections of the game where rollback has been\\nsuspended.\\n\\n`flag`:\\nWhen `flag` is true, rollback is suspended. When false,\\nrollback is resumed.\\n\\n"],"renpy.take_screenshot":["renpy","function","()","","function","Causes a screenshot to be taken. This screenshot will be saved as part of\\na saved game.\\n\\n"],"renpy.timeout":["renpy","function","(seconds)","","function","Causes an event to be generated before `seconds` seconds have elapsed.\\nThis ensures that the event method of a user-defined displayable will be\\ncalled.\\n\\n"],"renpy.transform_text":["renpy","function","(s, function)","","function","Transforms `s`, while leaving text tags and interpolation the same.\\n\\n`function`\\nA function that is called with strings corresponding to runs of\\ntext, and should return a second string that replaces that run\\nof text.\\n\\n\\n\\n```\\ninit python:\\n    def upper(s):\\n        return s.upper()\\n        \\n$ upper_string = renpy.transform_text(\\"{b}Not Upper{/b}\\", upper)\\n\\n```\\n\\n"],"renpy.transition":["renpy","function","(trans, layer=None, always=False)","","function","Sets the transition that will be used during the next interaction.\\n\\n`layer`\\nThe layer the transition applies to. If None, the transition\\napplies to the entire scene.\\n\\n`always`\\nIf false, this respects the transition preference. If true, the\\ntransition is always run.\\n\\n"],"renpy.translate_string":["renpy","function","(s, language=<renpy.object.Sentinel object at 0x794ed4d67460>)","","function","Returns `s` immediately translated into `language`. If `language`\\nis Default, uses the language set in the preferences.\\nStrings enclosed in this function will **not** be added\\nto the list of translatable strings. Note that the string may be\\ndouble-translated, if it matches a string translation when it\\nis displayed.\\n\\n\\n"],"renpy.try_compile":["renpy","function","(where, expr, additional=None)","","function","Tries to compile an expression, and writes an error to lint.txt if\\nit fails.\\n\\n`where`\\nA string giving the location the expression is found. Used to\\ngenerate an error message of the form \\"Could not evaluate `expr`\\nin `where`.\\"\\n\\n`expr`\\nThe expression to try compiling.\\n\\n`additional`\\nIf given, an additional line of information that is addded to the\\nerror message.\\n\\n"],"renpy.try_eval":["renpy","function","(where, expr, additional=None)","","function","Tries to evaluate an expression, and writes an error to lint.txt if\\nit fails.\\n\\n`where`\\nA string giving the location the expression is found. Used to\\ngenerate an error message of the form \\"Could not evaluate `expr`\\nin `where`.\\"\\n\\n`expr`\\nThe expression to try evaluating.\\n\\n`additional`\\nIf given, an additional line of information that is addded to the\\nerror message.\\n\\n"],"renpy.unlink_save":["renpy","function","(filename)","","function","Deletes the save slot with the given name.\\n\\n"],"renpy.unwatch":["renpy","function","(expr)","","function","Stops watching the given Python expression.\\n\\n"],"renpy.variable_font_info":["renpy","function","(font)","","function","Returns information about a variable font, or None if the font is not\\nvariable.\\n\\n`font`\\nThe filename containing the font.\\n\\nThe return value is an object with the following fields:\\n\\n`instance`\\nA dictionary where the keys are the names of the named instances\\nof the font. (For example, \'light\', \'regular\', \'bold\', and \'heavy\'.)\\nThe values can be ignored.\\n\\n`axis`\\nA dictionary that maps the names of the axes of the font to objects\\nwith the following fields:\\n\\n`minimum`\\nThe minimum value of the axis.\\n`default`\\nThe default value of the axis.\\n`maximum`\\nThe maximum value of the axis.\\n\\nThe object returned by this function and the data inside it should not\\nbe changed.\\n\\nThis function may only be called after the Ren\'Py display has initialized,\\nand is intended to be called from the console, where it will print in\\na human-readable form.\\n\\n"],"renpy.variant":["renpy","function","(name)","","function","Returns true if `name` is a screen variant that corresponds to the\\ncontext in which Ren\'Py is currently executing. See screen-variants\\nfor more details. This function can be used as the condition in an\\nif statement to switch behavior based on the selected screen variant.\\n\\n`name` can also be a list of variants, in which case this function\\nreturns True if any of the variants would.\\n\\n"],"renpy.version":["renpy","function","(tuple=False)","","function","If `tuple` is false, returns a string containing \\"Ren\'Py \\", followed by\\nthe current version of Ren\'Py.\\n\\nIf `tuple` is true, returns a tuple giving each component of the\\nversion as an integer.\\n\\n"],"renpy.version_name":["renpy","var","","","var","A human readable version name, of the form \\"Example Version.\\"\\n\\n"],"renpy.version_only":["renpy","var","","","var","The version number of Ren\'Py, without the Ren\'Py prefix. A string of\\nthe form \\"1.2.3.456\\".\\n\\n"],"renpy.version_string":["renpy","var","","","var","The version number of Ren\'Py, as a string of the form \\"Ren\'Py 1.2.3.456\\".\\n\\n"],"renpy.version_tuple":["renpy","var","","","var","The version number of Ren\'Py, as a tuple of the form (1, 2, 3, 456).\\n\\nThis is a namedtuple with four fields: ``major``, ``minor``, ``patch``,\\nand ``commit``.\\n\\n"],"renpy.vibrate":["renpy","function","(duration)","","function","Causes the device to vibrate for `duration` seconds. Currently, this\\nis only supported on Android.\\n\\n"],"renpy.warp_to_line":["renpy","function","(warp_spec)","","function","This takes as an argument a filename:linenumber pair, and tries to warp to\\nthe statement before that line number.\\n\\nThis works samely as the `--warp` command.\\n\\n"],"renpy.watch":["renpy","function","(expr)","","function","This watches the given Python expression, by displaying it in the\\nupper-right corner of the screen.\\n\\n"],"renpy.windows":["renpy","var","","","var","Has a true value when running on Windows.\\n\\n"],"renpy.with_statement":["renpy","function","(trans, always=False)","","function","Causes a transition to occur. This is the Python equivalent of the\\nwith statement.\\n\\n`trans`\\nThe transition.\\n\\n`always`\\nIf True, the transition will always occur, even if the user has\\ndisabled transitions.\\n\\nThis function returns true if the user chose to interrupt the transition,\\nand false otherwise.\\n\\n"],"reset":["renpy","var","","","var","Resets the transform. Places the displayable in the top-left\\ncorner of the screen, and also eliminates any zoom, rotation, or\\nother effects.\\n\\n"],"right":["renpy","var","","","var","Aligns to the bottom-right corner of the screen.\\n\\n"],"save_name":["renpy","var","= \\"\\"","","var","A save name that is included with saves.\\n\\n"],"say":["renpy","var",": Callable","","var","A function that is called by Ren\'Py to display dialogue, when a string is\\nused in place of the speaking character\\n\\n```\\ndefine e = Character(\\"Eileen\\", who_color=\\"#0f0\\")\\n\\nlabel start:\\n    \\"Eileen\\" \\"My name is Eileen.\\" # will call the say function\\n    e \\"I like trains !\\" # will not call the say function\\n    \\n```\\n\\nThis function should have the same signature as renpy.say.\\nIt should not call renpy.say but rather use the other\\nsay statement equivalents.\\n\\nIt\'s rare to call this function directly, as one can simply call a character\\nwith dialogue. This variable mostly exists to be redefined, as a way of\\nhooking the say statement.\\n\\n"],"slideawayleft":["renpy","var","","","var","Also: **slideawayright, slideawayup, slideawaydown**\\n\\nSlides the old scene in the given direction. Instances of the\\nCropMove transition class.\\n\\n"],"slideleft":["renpy","var","","","var","Also: **slideright, slideup, slidedown**\\n\\nSlides the new scene in the given direction. Instances of the\\nCropMove transition class.\\n\\n"],"squares":["renpy","var","","","var","Transitions the screen in a squares effect lasting 1 second.\\n\\n"],"style":["renpy","var","","","var","The style namespace contains styles and functions that manipulate styles. Styles are used to control the appearance\\nof text, images, and other elements in Ren\'Py. Using the ``style`` statement is preferred to using the style\\nnamespace directly.\\n\\n"],"style.rebuild":["renpy","function","()","","function","This causes named styles to be rebuilt, allowing styles to be\\nchanged after the init phase has finished.\\n\\n**Warning:**\\n\\nNamed styles are not saved as part of the per-game data. This\\nmeans that changes to them will not be persisted through a save\\nand load cycle.\\n"],"top":["renpy","var","","","var","Centers horizontally, and aligns to the top of the screen.\\n\\n"],"topleft":["renpy","var","","","var","Aligns to the top-left corner of the screen.\\n\\n"],"topright":["renpy","var","","","var","Aligns to the top-right corner of the screen.\\n\\n"],"translate_define":["renpy","function","(language, define, value, help=None)","","function","This is used to set a define when generating a game. For example, it can\\nbe used to change the size of a font.\\n\\n`language`\\nThe language involved.\\n\\n`define`\\nThe name of the define.\\n\\n`value`\\nA string giving the value the define should be set to. (ie. \\"10\\",\\n\\"False\\", or \\"\'Font.ttf\'\\").\\n\\n`comment`\\nIf not None, a comment that will be generated before the define. The\\ncomment will only be generated if the define does not exist in\\ngui.rpy. There is no need to use \\"## \\", as the comment will be\\nadded and wrapped automatically.\\n\\nFor example, the following changes the size of dialogue text\\n\\n```\\ntranslate_define(\\"martian\\", \\"gui.text_size\\", 12)\\n```\\n\\n"],"translate_font":["renpy","function","(language, font)","","function","This is used to set a font for `language`. The font is used in the\\nlauncher, and also used to in games generated in that language. The\\nfont file should be placed in game/fonts.\\n\\n`font`\\nA string giving the name of the font file.\\n\\n\\n"],"truecenter":["renpy","var","","","var","Centers both horizontally and vertically.\\n\\n"],"ui":["renpy","var","","","var","**Note: Most functions in the ui namespace are deprecated.**\\n\\nThe ui namespace contains older functions and classes used to display user interface elements. With the the exception\\nof ui.adjustment, ui.interact, ui.callsinnewcontext, and ui.invokesinnewcontext, these functions are\\nobsolete.\\n\\n"],"ui.ChoiceJump":["renpy","function","(label, value, location=None, block_all=None, sensitive=True, args=None, kwargs=None)","","function","A menu choice action that returns `value`, while managing the button\\nstate in a manner consistent with fixed rollback. (See block_all for\\na description of the behavior.)\\n\\n\\n`label`\\nThe label text of the button. For imagebuttons and hotspots this\\ncan be anything. This label is used as a unique identifier of\\nthe options within the current screen. Together with `location`\\nit is used to store whether this option has been chosen.\\n\\n`value`\\nThe location to jump to.\\n\\n`location`\\nA unique location identifier for the current choices screen.\\n\\n`block_all`\\nIf false, the button is given the selected role if it was\\nthe chosen choice, and insensitive if it was not selected.\\n\\nIf true, the button is always insensitive during fixed\\nrollback.\\n\\nIf None, the value is taken from the config.fix_rollback_without_choice\\nvariable.\\n\\nWhen true is given to all items in a screen, it will\\nbecome unclickable (rolling forward will still work).\\n\\n"],"ui.ChoiceReturn":["renpy","function","(label, value, location=None, block_all=None, sensitive=True, args=None, kwargs=None)","","function","A menu choice action that returns `value`, while managing the button\\nstate in a manner consistent with fixed rollback. (See block_all for\\na description of the behavior.)\\n\\n\\n`label`\\nThe label text of the button. For imagebuttons and hotspots this\\ncan be anything. This label is used as a unique identifier of\\nthe options within the current screen. Together with `location`\\nit is used to store whether this option has been chosen.\\n\\n`value`\\nThe value this is returned when the choice is chosen.\\n\\n`location`\\nA unique location identifier for the current choices screen.\\n\\n`block_all`\\nIf false, the button is given the selected role if it was\\nthe chosen choice, and insensitive if it was not selected.\\n\\nIf true, the button is always insensitive during fixed\\nrollback.\\n\\nIf None, the value is taken from the config.fix_rollback_without_choice\\nvariable.\\n\\nWhen true is given to all items in a screen, it will\\nbecome unclickable (rolling forward will still work).\\n\\n"],"ui.adjustment":["renpy","class","(range=1, value=0, step=None, page=None, changed=None, adjustable=None, ranged=None, force_step=False, raw_changed=None)","","class","Adjustment objects represent a value that can be adjusted by a bar\\nor viewport. They contain information about the value, the range\\nof the value, and how to adjust the value in small steps and large\\npages.\\n\\nThe following parameters correspond to fields or properties on\\nthe adjustment object:\\n\\n`range`\\nThe range of the adjustment, a number.\\n\\n`value`\\nThe value of the adjustment, a number.\\n\\n`step`\\nThe step size of the adjustment, a number. If None, then\\ndefaults to 1/10th of a page, if set. Otherwise, defaults\\nto the 1/20th of the range.\\n\\nThis is used when scrolling a viewport with the mouse wheel.\\n\\n`page`\\nThe page size of the adjustment. If None, this is set\\nautomatically by a viewport. If never set, defaults to 1/10th\\nof the range.\\n\\nIt\'s can be used when clicking on a scrollbar.\\n\\nThe following parameters control the behavior of the adjustment.\\n\\n`adjustable`\\nIf True, this adjustment can be changed by a bar. If False,\\nit can\'t.\\n\\nIt defaults to being adjustable if a `changed` function\\nis given or if the adjustment is associated with a viewport,\\nand not adjustable otherwise.\\n\\n`changed`\\nThis function is called with the new value when the value of\\nthe adjustment changes.\\n\\n`raw_changed`\\nThis function is called when the value of the adjustment\\nchanges. Unlike `changed`, this function is called with\\nthe raw value, which may be out of range. It\'s called with\\ntwo arguments, the adjustment and the new value.\\n\\n`ranged`\\nThis function is called with the adjustment object when\\nthe range of the adjustment is set by a viewport.\\n\\nThis function may be called multiple times, as part of the layout\\nprocess.\\n\\n`force_step`\\nIf True and this adjustment changes by dragging associated\\nviewport or a bar, value will be changed only if the drag\\nreached next step.\\nIf \\"release\\" and this adjustment changes by dragging associated\\nviewport or a bar, after the release, value will be\\nrounded to the nearest step.\\nIf False, this adjustment will changes by dragging, ignoring\\nthe step value.\\n\\n.. method:: change(value)\\n\\nChanges the value of the adjustment to `value`, updating\\nany bars and viewports that use the adjustment.\\n\\n"],"ui.interact":["renpy","function","(*, roll_forward=None, mouse=\'default\')","","function","Causes an interaction with the user, and returns the result of that\\ninteraction. This causes Ren\'Py to redraw the screen and begin processing\\ninput events. When a displayable returns a value in response to an event,\\nthat value is returned from ui.interact, and the interaction ends.\\n\\nThis function is rarely called directly. It is usually called by other\\nparts of Ren\'Py, including the say statement, menu statement, with statement,\\npause statement, call screen, renpy.input, among many other\\nfunctions. However, it can be called directly if necessary.\\n\\nWhen an interaction ends, the transient layer and all screens shown with\\n`_transient` as true are cleared from the scene lists.\\n\\nThe following arguments are documented. As other, undocumented arguments\\nexist for Ren\'Py\'s internal use, please pass all arguments as keyword\\narguments.\\n\\n`roll_forward`\\nThe information that will be returned by this function when a\\nroll forward occurs. (If None, the roll forward is ignored.) This\\nshould usually be passed the result of the renpy.roll_forward_info\\nfunction.\\n\\n`mouse`\\nThe style of mouse cursor to use during this function.\\n\\n"],"updater":["renpy","var","","","var","The updater namespace contains functions, classes, and variables that control the HTTP/HTTPS.\\n"],"updater.Update":["renpy","function","(*args, **kwargs)","","function","An action that calls updater.update. All arguments are\\nstored and passed to that function.\\n\\n"],"updater.UpdateVersion":["renpy","function","(url, check_interval=21600, simulate=None, **kwargs)","","function","This function contacts the server at `url`, and determines if there is\\na newer version of software available at that url. If there is, this\\nfunction returns the new version. Otherwise, it returns None.\\n\\nSince contacting the server can take some time, this function launches\\na thread in the background, and immediately returns the version from\\nthe last time the server was contacted, or None if the server has never\\nbeen contacted. The background thread will restart the current interaction\\nonce the server has been contacted, which will cause screens that call\\nthis function to update.\\n\\nEach url will be contacted at most once per Ren\'Py session, and not\\nmore than once every `check_interval` seconds. When the server is not\\ncontacted, cached data will be returned.\\n\\nAdditional keyword arguments (including `simulate`) are passed to the\\nupdate mechanism as if they were given to updater.update.\\n\\n"],"updater.Updater":["renpy","class","","","class","attribute state\\n\\nThe current state of the updater. See the example above for possible\\nvalues and their meanings. The values are all constants on the Updater\\nobect.\\n\\nattribute message\\n\\nIf not None, a message to display to the user.\\n\\nattribute progress\\n\\nIf not None, the progress of the current operation, as a float between\\n0.0 and 1.0.\\n\\nattribute can_proceed\\n\\nIf True, the screen is being asked to display a button that will allow\\nthe user to proceed with the update.\\n\\nattribute proceed\\n\\nIf can_proceed is True, this is the action that should be invoked when\\nthe user presses the proceed button.\\n\\nattribute can_cancel\\n\\nIf True, the screen is being asked to display a button that will allow\\nthe user to cancel the update.\\n\\nattribute cancel\\n\\nIf can_cancel is True, this is the action that should be invoked when\\nthe user presses the cancel button.\\n\\nattribute old_disk_total\\n\\nIf not None, an integer giving the total number of bytes on the disk\\nthe game consumed at the start of the update.\\n\\nattribute new_disk_total\\n\\nIf not None, an integer giving the total number of bytes on the disk\\nthe game will consume at the end of the update.\\n\\nattribute download_total\\n\\nIf not None, an integer giving the total number of bytes that will be\\ndownloaded during the update.\\n\\nattribute download_done\\n\\nIf not None, an integer giving the number of bytes that have been\\ndownloaded during the update, so far.\\n\\nattribute write_total\\n\\nIf not None, an integer giving the total number of bytes that will be\\nwritten to disk during the update.\\n\\nattribute write_done\\n\\nIf not None, an integer giving the number of bytes that have been\\nwritten to disk during the update, so far.\\n"],"updater.can_update":["renpy","function","(base=None)","","function","Returns true if it\'s possible that an update can succeed. Returns false\\nif updating is totally impossible. (For example, if the update directory\\nwas deleted.)\\n\\n\\nNote that this does not determine if an update is actually available.\\nTo do that, use updater.UpdateVersion.\\n\\n"],"updater.continue_game_download":["renpy","function","(screen=\'downloader\')","","function","Continues downloading the game data. This will loop until the\\ndownload is complete, or the user exits the game.\\n\\n"],"updater.get_installed_packages":["renpy","function","(base=None)","","function","Returns a list of installed DLC package names.\\n\\n`base`\\nThe base directory to update. Defaults to the current project\'s\\nbase directory.\\n\\n"],"updater.start_game_download":["renpy","function","(url, **kwargs)","","function","Starts downloading the game data from `url`. This begins the process\\nof determining what needs to be downloaded, and returns an Update object.\\n\\n"],"updater.update":["renpy","function","(url, base=None, force=False, public_key=None, simulate=None, add=[], restart=True, confirm=True, patch=True, prefer_rpu=True, allow_empty=False, done_pause=True, allow_cancel=True, screen=\'updater\')","","function","Updates this Ren\'Py game to the latest version.\\n\\n`url`\\nThe URL to the updates.json file.\\n\\n`base`\\nThe base directory that will be updated. Defaults to the base\\nof the current game. (This can usually be ignored.)\\n\\n`force`\\nForce the update to occur even if the version numbers are\\nthe same. (Used for testing.)\\n\\n`public_key`\\nThe path to a PEM file containing a public key that the\\nupdate signature is checked against. (This can usually be ignored.)\\n\\n`simulate`\\nThis is used to test update guis without actually performing\\nan update. This can be:\\n\\n* None to perform an update.\\n* \\"available\\" to test the case where an update is available.\\n* \\"not_available\\" to test the case where no update is available.\\n* \\"error\\" to test an update error.\\n\\n`add`\\nA list of packages to add during this update. This is only necessary\\nfor dlc.\\n\\n`restart`\\nIf true, the game will be re-run when the update completes. If\\n\\"utter\\", renpy.utter_restart will be called instead. If False,\\nthe update will simply end.\\n\\n`confirm`\\nShould Ren\'Py prompt the user to confirm the update? If False, the\\nupdate will proceed without confirmation.\\n\\n`patch`\\nIf true, Ren\'Py will attempt to patch the game, downloading only\\nchanged data. If false, Ren\'Py will download a complete copy of\\nthe game, and update from that. This is set to false automatically\\nwhen the url does not begin with \\"http:\\".\\n\\nThis is ignored if the RPU update format is being used.\\n\\n`prefer_rpu`\\nIf True, Ren\'Py will prefer the RPU format for updates, if both\\nzsync and RPU are available.\\n\\n`allow_empty`\\nIf True, Ren\'Py will allow the update to proceed even if the\\nbase directory does not contain update information. (`add` must\\nbe provided in this case.)\\n\\n`done_pause`\\nIf true, the game will pause after the update is complete. If false,\\nit will immediately proceed (either to a restart, or a return).\\n\\n`allow_cancel`\\nIf true, the user will be allowed to cancel the update. If false,\\nthe user will not be allowed to cancel the update.\\n\\n`screen`\\nThe name of the screen to use.\\n\\n"],"voice":["renpy","function","(filename, tag=None)","","function","Plays `filename` on the voice channel. The equivalent of the voice\\nstatement.\\n\\n`filename`\\nThe filename to play. This is used with\\nconfig.voice_filename_format to produce the\\nfilename that will be played.\\n\\n`tag`\\nIf this is not None, it should be a string giving a\\nvoice tag to be played. If None, this takes its\\ndefault value from the voice_tag of the Character\\nthat causes the next interaction.\\n\\nThe voice tag is used to specify which character is\\nspeaking, to allow a user to mute or unmute the\\nvoices of particular characters.\\n\\n"],"voice_can_replay":["renpy","function","()","","function","Returns true if it\'s possible to replay the current voice.\\n\\n"],"voice_replay":["renpy","function","()","","function","Replays the current voice, if possible.\\n\\n"],"voice_sustain":["renpy","function","(ignored=\'\', **kwargs)","","function","The equivalent of the voice sustain statement.\\n\\n"],"vpunch":["renpy","var","","","var","When invoked, this transition shakes the screen vertically for a\\nquarter second. Imitating and customizing this transition and\\nhpunch is best done using atl-transitions.\\n\\n"],"wipeleft":["renpy","var","","","var","Also: **wiperight, wipeup, wipedown**\\n\\nWipes the scene in the given direction. Instances of the\\nCropMove transition class.\\n\\n"],"zoomin":["renpy","var","","","var","This zooms in entering images, taking 0.5 seconds to do so.\\n\\n"],"zoominout":["renpy","var","","","var","This zooms in entering images and zooms out leaving images, taking 0.5 seconds to do so.\\n\\n"],"zoomout":["renpy","var","","","var","This zooms out leaving images, taking 0.5 seconds to do so.\\n\\n"]},"internal":{}}')},7606:e=>{e.exports=JSON.parse('{"window":"auto|hide|show","play":"music|sound|voice|audio|{channels}","stop":"music|sound|voice|audio|{channels}","queue":"music|sound|voice|audio|{channels}","fadein":"0.5|1.0|1.5|2.0","fadeout":"0.5|1.0|1.5|2.0","volume":"0.5|0.75|1.0","parent.play":"fadeout|fadein|loop|noloop|if_changed|volume","parent.queue":"loop|noloop|volume|fadein","parent.stop":"fadeout","pause":"0.5|1.0|1.5|2.0","show":"expression|screen|text|{displayable}","hide":"{displayable}","scene":"{displayable}","jump":"expression|{label}","call":"expression|screen|{label}","image.contains":"{displayable}","screen.add":"None|{displayable!q}","focus_mask":"None|True|{displayable!q}","idle":"None|{displayable!q}","hover":"None|{displayable!q}","selected":"None|{displayable!q}","insensitive":"None|{displayable!q}","selected_idle":"None|{displayable!q}","selected_hover":"None|{displayable!q}","selected_insensitive":"None|{displayable!q}","background":"None|{displayable!q}","idle_background":"idle_button.png","hover_background":"None|{displayable!q}","selected_background":"None|{displayable!q}","insensitive_background":"None|{displayable!q}","selected_idle_background":"None|{displayable!q}","selected_hover_background":"None|{displayable!q}","selected_insensitive_background":"None|{displayable!q}","foreground":"None|{displayable!q}","idle_foreground":"None|{displayable!q}","hover_foreground":"None|{displayable!q}","selected_foreground":"None|{displayable!q}","insensitive_foreground":"None|{displayable!q}","selected_idle_foreground":"None|{displayable!q}","selected_hover_foreground":"None|{displayable!q}","selected_insensitive_foreground":"None|{displayable!q}","xfill":"True|False","yfill":"True|False","fit":"None|\\"contain\\"|\\"cover\\"|\\"fill\\"|\\"scale-down\\"|\\"scale-up\\"","fit_first":"True|\\"width\\"|\\"height\\"","xfit":"True|False","yfit":"True|False","mipmap":"True|False|None","antialias":"True|False","bold":"True|False","adjust_spacing":"True|False|\\"horizontal\\"|\\"vertical\\"","italic":"True|False","justify":"True|False","newline_indent":"True|False","slow_abortable":"True|False","strikethrough":"True|False","underline":"True|False","vertical":"True|False","outlines":"{outlines}","text_outlines":"{outlines}","what_outlines":"{outlines}","who_outlines":"{outlines}","text_antialias":"True|False","text_bold":"True|False","text_adjust_spacing":"True|False|\\"horizontal\\"|\\"vertical\\"","text_italic":"True|False","text_justify":"True|False","text_newline_indent":"True|False","text_slow_abortable":"True|False","text_strikethrough":"True|False","text_underline":"True|False","text_vertical":"True|False","text_align":"0.0|0.5|1.0","modal":"True|False","keyboard_focus":"True|False","key_events":"True|False","bar_vertical":"True|False","bar_invert":"True|False","bar_resizing":"True|False","box_reverse":"True|False","box_wrap":"True|False","order_reverse":"True|False","repeat":"True|False","subpixel":"True|False","matrixcolor":"None|BrightnessMatrix|ColorizeMatrix|HueMatrix|IdentityMatrix|InvertMatrix|OpacityMatrix|SaturationMatrix|SepiaMatrix|TintMatrix","screen.action":"{action}","screen.alternate":"{action}","screen.hovered":"{action}","screen.unhovered":"{action}","screen.released":"{action}","unscrollable":"None|\\"insensitive\\"|\\"hide\\"","vscrollbar_unscrollable":"None|\\"insensitive\\"|\\"hide\\"","hscrollbar_unscrollable":"None|\\"insensitive\\"|\\"hide\\"","alpha":"0.0|0.25|0.5|0.75|1.0","zoom":"0.5|0.75|1.0|1.5","pos":"(0, 0)|(xpos, ypos)","anchor":"(0, 0)|(xanchor, yanchor)","xanchor":"0.0|0.5|1.0","yanchor":"0.0|0.5|1.0","matrixanchor":"(0.5, 0.5)|(xanchor, yanchor)","align":"(0.0, 0.0)|(0.5, 0.0)|(1.0, 0.0)|(0.5, 0.5)|(0.0, 1.0)|(0.5, 1.0)|(1.0, 1.0)|(xalign, yalign)","xalign":"0.0|0.5|1.0","yalign":"0.0|0.5|1.0","offset":"(0, 0)|(xoffset, yoffset)","maximum":"(0, 0)|(maximum, ymaximum)","minimum":"(0, 0)|(xminimum, yminimum)","xysize":"(0, 0)|(xsize, ysize)","size":"(0, 0)|(xsize, ysize)","area":"(0, 0, 1, 1)|(xpos, ypos, width, height)","alt":"\\"string\\"|None","layer":"{layer}","onlayer":"{layer}","screen":"expression|{screens}","screen.use":"{screens}","transform.on":"show|hide|hover|idle|appear|selected_idle|selected_hover","screen.layer":"{layer!q}","screen.on":"\\"show\\"|\\"hide\\"|\\"replace\\"|\\"replaced\\"","screen.has":"fixed|grid|hbox|side|vbox","variant":"\\"large\\"|\\"medium\\"|\\"small\\"|\\"tablet\\"|\\"phone\\"|\\"touch\\"|\\"tv\\"|\\"ouya\\"|\\"firetv\\"|\\"android\\"|\\"ios\\"|\\"mobile\\"|\\"pc\\"|\\"web\\"|None","hover_sound":"{audio}","activate_sound":"{audio}","font":"gui.text_font|gui.name_text_font|gui.interface_text_font|{fonts!q}","text_font":"gui.text_font|gui.name_text_font|gui.interface_text_font|{fonts!q}","function":"{function!3}","format_function":"{function}","attribute_function":"{function}","perspective":"True|False|(0, 0, 0)","gl_depth":"True|False","matrixtransform":"None|OffsetMatrix|RotateMatrix|ScaleMatrix","zzoom":"True|False","screen.Call":"{label!q}","screen.Jump":"{label!q}","screen.Hide":"{screens!q}","screen.Show":"{screens!q}","screen.ShowTransient":"{screens!q}","screen.ToggleScreen":"{screens!q}","screen.PauseAudio":"\\"music\\"|\\"sound\\"|\\"voice\\"|\\"audio\\"|{channels!q}","screen.Play":"\\"music\\"|\\"sound\\"|\\"voice\\"|\\"audio\\"|{channels!q}","screen.Queue":"\\"music\\"|\\"sound\\"|\\"voice\\"|\\"audio\\"|{channels!q}","screen.Stop":"\\"music\\"|\\"sound\\"|\\"voice\\"|\\"audio\\"|{channels!q}","screen.Function":"{function}","parent.screen.on":"action","parent.screen.timer":"action|repeat","screen.spacing":"0|5|10|15|20|gui.navigation_spacing|gui.pref_spacing","label.at":"{transforms}","screen.at":"{transforms}","label.with":"{transitions}","screen.with":"{transitions}","python.list":"append(item)|count(item)|index(item)|insert(index, item)|remove(item)|pop()|reverse()|sort()","python.str":"lower()|upper()|strip()|isalpha()|isdigit()|isspace()|startswith(str)|endswith(str)|find(str)|replace(strx, stry)|split(str)|join(str)","python.dictionary":"keys()|values()|items()|get(key, default)"}')}},n={},t=function t(a){var i=n[a];if(void 0!==i)return i.exports;var o=n[a]={exports:{}};return e[a].call(o.exports,o,o.exports,t),o.exports}(2144);module.exports=t})();