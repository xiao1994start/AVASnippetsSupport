{
  "python-embed 嵌入式环境激活": {
    "prefix": ["embed -python", "EM -python"],
    "body": [
      "@ECHO OFF",
      "setlocal EnableDelayedExpansion",
      "CD /D \"%~dp0\"",
      "",
      "@REM ! 使用Tkinter库的工程直接提取安装版Python",
      "",
      "ECHO 环境判断",
      "for /D %%i in (\"*python*\") do (",
      "    set \"name=%%~ni\"",
      "    set \"first_char=!name:~0,1!\"",
      "    set \"is_lower=-1\"",
      "    if \"!first_char!\"==\"p\" (",
      "        set \"is_lower=1\"",
      "        ECHO 当前使用的是 python 嵌入式环境（is_lower=!is_lower!）",
      "    ) ",
      "    if \"!first_char!\"==\"P\" (",
      "        set \"is_lower=0\"",
      "        ECHO 当前使用 Python 安装环境（is_lower=!is_lower!）",
      "    )",
      "    if \"!is_lower!\"==\"-1\" (",
      "        ECHO 请先部署 python 环境  && PAUSE && exit /B",
      "    )",
      ")",
      "",
      "if \"!is_lower!\"==\"1\" (",
      "    @REM *python*",
      "    for /D %%i in (*python*embed*) do (",
      "        if not \"%%~ni\"==\"python\" (",
      "            ECHO 修改 python*embed* 嵌入式环境-目录名为 python && ren \"%%i\" \"python\"",
      "        )",
      "    )",
      ") else (",
      "    @REM *Python*",
      "    for /D %%i in (*Python*) do (",
      "        if not \"%%~ni\"==\"Python\" (",
      "            ECHO 修改 Python* 安装环境-目录名为 Python && ren \"%%i\" \"Python\"",
      "        )",
      "    )",
      ")",
      "ECHO.",
      "ECHO ---------------------------------------------------------------------------------------------------------------------------------------------",
      "ECHO.",
      "if not exist \"%~dp0.vscode\" ( ECHO 创建嵌入式环境工作区设置 && md \"%~dp0.vscode\" )",
      "ECHO 初始化项目工作配置文件",
      "if \"!is_lower!\"==\"1\" (",
      "    @REM *python*",
      "    ECHO {> \"%~dp0.vscode\\settings.json\"",
      "    ECHO   \"python.defaultInterpreterPath\": \"\\${workspaceFolder}/.venv/Scripts/python.exe\", // * python Interpreter Path>> \"%~dp0.vscode\\settings.json\"",
      "    ECHO   \"terminal.integrated.env.windows\": { \"PYTHONPATH\": \"\\${workspaceFolder}\" }, // * PYTHONPATH Path>> \"%~dp0.vscode\\settings.json\"",
      "    ECHO   \"qtForPython.designer.path\": \"\\${workspaceFolder}/.venv/Scripts/pyside6-designer.exe\", // * Qt Designer Path>> \"%~dp0.vscode\\settings.json\"",
      "    ECHO   \"qtForPython.uic.path\": \"\\${workspaceFolder}/.venv/Scripts/pyside6-uic.exe\", // * PySide6-uic Path>> \"%~dp0.vscode\\settings.json\"",
      "    ECHO   \"qtForPython.rcc.path\": \"\\${workspaceFolder}/.venv/Scripts/pyside6-rcc.exe\", // * PySide6-rcc Path>> \"%~dp0.vscode\\settings.json\"",
      "    ECHO   \"qtForPython.qml.path\": \"\\${workspaceFolder}/.venv/Scripts/pyside6-qml.exe\" // * PySide6-qml Path>> \"%~dp0.vscode\\settings.json\"",
      "    ECHO }>> \"%~dp0.vscode\\settings.json\"",
      "    ECHO.>> \"%~dp0.vscode\\settings.json\"",
      ") else (",
      "    @REM *Python*",
      "    ECHO {> \"%~dp0.vscode\\settings.json\"",
      "    ECHO   \"python.defaultInterpreterPath\": \"\\${workspaceFolder}/Python/Scripts/python.exe\", // * python Interpreter Path>> \"%~dp0.vscode\\settings.json\"",
      "    ECHO   \"terminal.integrated.env.windows\": { \"PYTHONPATH\": \"\\${workspaceFolder}\" }, // * PYTHONPATH Path>> \"%~dp0.vscode\\settings.json\"",
      "    ECHO   \"qtForPython.designer.path\": \"\\${workspaceFolder}/Python/Scripts/pyside6-designer.exe\", // * Qt Designer Path>> \"%~dp0.vscode\\settings.json\"",
      "    ECHO   \"qtForPython.uic.path\": \"\\${workspaceFolder}/Python/Scripts/pyside6-uic.exe\", // * PySide6-uic Path>> \"%~dp0.vscode\\settings.json\"",
      "    ECHO   \"qtForPython.rcc.path\": \"\\${workspaceFolder}/Python/Scripts/pyside6-rcc.exe\", // * PySide6-rcc Path>> \"%~dp0.vscode\\settings.json\"",
      "    ECHO   \"qtForPython.qml.path\": \"\\${workspaceFolder}/Python/Scripts/pyside6-qml.exe\" // * PySide6-qml Path>> \"%~dp0.vscode\\settings.json\"",
      "    ECHO }>> \"%~dp0.vscode\\settings.json\"",
      "    ECHO.>> \"%~dp0.vscode\\settings.json\"",
      ")",
      "ECHO.",
      "ECHO 初始化调试启动配置文件",
      "if \"!is_lower!\"==\"1\" (",
      "    @REM *python*",
      "    ECHO {> \"%~dp0.vscode\\launch.json\"",
      "    ECHO   // Help_en: https://go.microsoft.com/fwlink/?linkid=830387>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO   // Help_zh: https://vscode.github.net.cn/docs/python/debugging>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO   \"version\": \"0.2.0\",>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO   \"configurations\": [>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO     {>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"name\": \"Python Debug : Current File\",>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"type\": \"debugpy\",>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"request\": \"launch\",>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       // \"program\": \"${file}\", // * Run Debug File>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"program\": \"\\${workspaceFolder}/main.py\", // * Run Debug File>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"python\": \"${command:python.interpreterPath}\", // * Default settings.json -^> python.defaultInterpreterPath>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"console\": \"integratedTerminal\",>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"justMyCode\": true,>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"autoReload\": { \"enable\": true },>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"cwd\": \"\\${workspaceFolder}\",>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"env\": {>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO         \"PATH\": \"\\${workspaceFolder}/python;\\${workspaceFolder}/python/Scripts;${env:PATH}\",>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO         \"PYTHONPATH\": \"\\${workspaceFolder}\">> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       },>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"envFile\": \"\\${workspaceFolder}/.venv\",>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO     }>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO   ]>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO }>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO.>> \"%~dp0.vscode\\launch.json\"",
      ") else (",
      "    @REM *Python*",
      "    ECHO {> \"%~dp0.vscode\\launch.json\"",
      "    ECHO   // Help_en: https://go.microsoft.com/fwlink/?linkid=830387>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO   // Help_zh: https://vscode.github.net.cn/docs/python/debugging>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO   \"version\": \"0.2.0\",>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO   \"configurations\": [>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO     {>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"name\": \"Python Debug : Current File\",>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"type\": \"debugpy\",>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"request\": \"launch\",>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       // \"program\": \"${file}\", // * Run Debug File>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"program\": \"\\${workspaceFolder}/main.py\", // * Run Debug File>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"python\": \"${command:python.interpreterPath}\", // * Default settings.json -^> python.defaultInterpreterPath>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"console\": \"integratedTerminal\",>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"justMyCode\": true,>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"autoReload\": { \"enable\": true },>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"cwd\": \"\\${workspaceFolder}\",>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"env\": {>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO         \"PATH\": \"\\${workspaceFolder}/Python;\\${workspaceFolder}/Python/Scripts;${env:PATH}\",>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO         \"PYTHONPATH\": \"\\${workspaceFolder}\">> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       },>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO       \"envFile\": \"\\${workspaceFolder}/Python\",>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO     }>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO   ]>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO }>> \"%~dp0.vscode\\launch.json\"",
      "    ECHO.>> \"%~dp0.vscode\\launch.json\"",
      ")",
      "ECHO.",
      "ECHO 设置 python 环境变量",
      "@REM * systemPath 设置为系统初始化环境变量",
      "set \"sysPath=%path%\"",
      "@REM \"set sysPath=C:\\Program Files (x86)\\Common Files\\Intel\\Shared Libraries\\bin32;C:\\Program Files (x86)\\Common Files\\Intel\\Shared Libraries\\bin;C:\\WINDOWS;C:\\WINDOWS\\system32;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\\"",
      "if \"!is_lower!\"==\"1\" (",
      "    @REM *python*",
      "    ECHO 嵌入式环境",
      "    set \"PYTHON_HOME=%~dp0python;%~dp0python\\Scripts\"",
      ") else (",
      "    @REM *Python*",
      "    ECHO 安装环境",
      "    set \"PYTHON_HOME=%~dp0Python;%~dp0Python\\Scripts\"",
      ")",
      "set \"path=%PYTHON_HOME%;%sysPath%;\"",
      "@REM ECHO %path%",
      "ECHO.",
      "ECHO ---------------------------------------------------------------------------------------------------------------------------------------------",
      "ECHO.",
      "if \"!is_lower!\"==\"1\" (",
      "    @REM *python*",
      "    if not exist \"%~dp0python\\get-pip.py\" (",
      "        ECHO 初始化 get-pip.py",
      "        ECHO.",
      "        @REM todo 进入 python 目录(pip documentation:https://pip.pypa.io/en/stable/installation/ ^| 下载get-pip.py: https://www.python.org/downloads/windows/)",
      "        ECHO 配置 pip 镜像",
      "        ECHO [global]> \"%~dp0python\\pip.ini\"",
      "        ECHO index-url = https://mirrors.aliyun.com/pypi/simple/>> \"%~dp0python\\pip.ini\"",
      "        ECHO [install]>> \"%~dp0python\\pip.ini\"",
      "        ECHO trusted-host=mirrors.aliyun.com>> \"%~dp0python\\pip.ini\"",
      "        ECHO.",
      "        ECHO get-pip.py正在下载...",
      "        @REM * -sSL (组合命令) --silent(静默模式) --show-error(静默模式下显示错误) --location(自动跟随重定向)",
      "        @REM *     -s / --silent        静默模式, 隐藏进度条和冗余信息",
      "        @REM *     -S / --show-error    即使静默模式仍显示错误信息. 便于发现问题",
      "        @REM *     -L / --location      自动跟随重定向. 确保获取到最终资源",
      "        @REM * -# / --progress-bar      强制显示进度条 (覆盖 -s 的限制)",
      "        @REM * -o / --output            输出到指定文件",
      "        curl -SL https://bootstrap.pypa.io/get-pip.py -o \"%~dp0python\\get-pip.py\"",
      "        CD /D \"%~dp0\"",
      "    )",
      "    ECHO 修改 python*._pth 导入",
      "    CD /D \"%~dp0python\"",
      "    for %%i in (python*._pth) do (",
      "            for /F \"tokens=*\" %%j in (%%i) do (",
      "                if not \"%%j\"==\"import site\" (",
      "                if not \"%%j\"==\"Lib/site-packages\" (",
      "                if not \"%%j\"==\"DLLs\" (",
      "                if not \"%%j\"==\"libs\" (",
      "                if not \"%%j\"==\"tcl\" (",
      "                    ECHO %%j>> \"%~dp0python\\python._pth\"",
      "                )))))",
      "            )",
      "            ECHO Lib/site-packages>> \"%~dp0python\\python._pth\"",
      "            ECHO DLLs>> \"%~dp0python\\python._pth\"",
      "            ECHO libs>> \"%~dp0python\\python._pth\"",
      "            ECHO tcl>> \"%~dp0python\\python._pth\"",
      "            ECHO import site>> \"%~dp0python\\python._pth\"",
      "            del /F /Q \"%%i\"",
      "            ren \"%~dp0python\\python._pth\" \"%%i\"",
      "    )",
      "    ECHO 初始化环境 pip",
      "    call python \"%~dp0python\\get-pip.py\" -i https://mirrors.aliyun.com/pypi/simple/",
      ") else (",
      "    @REM *Python*",
      "    ECHO Python安装版环境",
      ")",
      "ECHO.",
      "ECHO ---------------------------------------------------------------------------------------------------------------------------------------------",
      "ECHO.",
      "ECHO python 版本号",
      "call python --version",
      "ECHO pip 版本号",
      "if \"!is_lower!\"==\"1\" (",
      "    @REM *python*",
      "    call pip install -U pip",
      "    call pip --version",
      ") else (",
      "    @REM *Python*",
      "    call python -m pip install -U pip",
      "    call python -m pip --version",
      ")",
      "ECHO.",
      "ECHO ---------------------------------------------------------------------------------------------------------------------------------------------",
      "ECHO.",
      "ECHO 创建基础项目结构",
      "if not exist \"%~dp0docs\" ( md \"%~dp0docs\" )",
      "ECHO.>\"%~dp0docs\\.文档.txt\"",
      "if not exist \"%~dp0src\" ( md \"%~dp0src\" )",
      "ECHO.>\"%~dp0src\\.核心代码.txt\"",
      "if not exist \"%~dp0src\\assets\" ( md \"%~dp0src\\assets\" )",
      "ECHO.>\"%~dp0src\\assets\\.静态资源文件.txt\"",
      "if not exist \"%~dp0data\" ( md \"%~dp0data\" )",
      "ECHO.>\"%~dp0data\\.数据仓库.txt\"",
      "if not exist \"%~dp0conf\" ( md \"%~dp0conf\" )",
      "ECHO.>\"%~dp0conf\\.配置文件.txt\"",
      "if not exist \"%~dp0utils\" ( md \"%~dp0utils\" )",
      "ECHO.>\"%~dp0utils\\.工具函数.常量.辅助类.txt\"",
      "@REM if not exist \"%~dp0logs\" ( md \"%~dp0logs\" )",
      "@REM ECHO.>\"%~dp0logs\\.日志文件.txt\"",
      "@REM if not exist \"%~dp0temp\" ( md \"%~dp0temp\" )",
      "@REM ECHO.>\"%~dp0temp\\.临时文件.txt\"",
      "ECHO.",
      "ECHO ---------------------------------------------------------------------------------------------------------------------------------------------",
      "ECHO.",
      "if not exist \"%~dp0base_data.py\" (",
      "    ECHO 创建 base_data.py 文件",
      "    ECHO from pathlib import Path> \"%~dp0base_data.py\"",
      "    ECHO BASE_DIR = Path(__file__^).parent.resolve(^)>> \"%~dp0base_data.py\"",
      "    ECHO import tkinter as tk>> \"%~dp0base_data.py\"",
      "    ECHO # *tk模块测试>> \"%~dp0base_data.py\"",
      "    ECHO tk._test(^)>> \"%~dp0base_data.py\"",
      ")",
      "ECHO.",
      "ECHO ---------------------------------------------------------------------------------------------------------------------------------------------",
      "ECHO.",
      "ECHO 环境 pip 执行",
      "if \"!is_lower!\"==\"1\" (",
      "    @REM *python*",
      "    @REM ECHO 安装 Jupyter交互式笔记本环境 内核ipykernel依赖库... @REM * 可选",
      "    @REM pip install -U ipykernel -i https://mirrors.aliyun.com/pypi/simple/",
      "    ECHO 安装 setuptools 打包分发工具... @REM ! 建议安装",
      "    pip install -U setuptools -i https://mirrors.aliyun.com/pypi/simple/",
      "    ECHO UV 环境管理器...",
      "    pip install -U uv -i https://mirrors.aliyun.com/pypi/simple/",
      "    ECHO 设置 uv 镜像源",
      "    set UV_DEFAULT_INDEX=https://mirrors.aliyun.com/pypi/simple/",
      ") else (",
      "    @REM *Python*",
      "    @REM ECHO 安装 Jupyter交互式笔记本环境 内核ipykernel依赖库... @REM * 可选",
      "    @REM call python -m pip install -U ipykernel -i https://mirrors.aliyun.com/pypi/simple/",
      "    ECHO 安装 setuptools 打包分发工具... @REM ! 建议安装",
      "    call python -m pip install -U setuptools -i https://mirrors.aliyun.com/pypi/simple/",
      "    ECHO UV 环境管理器...",
      "    call python -m pip install -U uv -i https://mirrors.aliyun.com/pypi/simple/",
      "    ECHO 设置 uv 镜像源",
      "    set UV_DEFAULT_INDEX=https://mirrors.aliyun.com/pypi/simple/ ",
      ")",
      "",
      "@REM * 载入 uv 时,注意 python 版本报错提示",
      "ECHO.",
      "ECHO ---------------------------------------------------------------------------------------------------------------------------------------------",
      "ECHO.",
      "if \"!is_lower!\"==\"1\" (",
      "    @REM *python*",
      "    ECHO 初始化 python 嵌入式版本 和 依赖库版本",
      "    @REM if exist \"%~dp0.venv\" ( rd /S /Q \"%~dp0.venv\" && del /F /Q \"%~dp0.python-version\" && del /F /Q \"%~dp0pyproject.toml\" && del /F /Q \"%~dp0uv.lock\" )",
      "    if not exist \"%~dp0.venv\" (",
      "        ECHO 初始化 uv 项目... [默认当前文件夹]",
      "        uv init .",
      "        ECHO 创建 uv 虚拟环境...",
      "        uv venv",
      "    )",
      "    ECHO 安装 rich 终端文本样式库... @REM ! 建议安装",
      "    uv add \"rich\"  --upgrade --index https://mirrors.aliyun.com/pypi/simple/",
      "    @REM 安装依赖库...使用虚拟环境开发时, 直接使用 requirements.txt 安装依赖库",
      "    @REM ECHO 安装虚拟环境 requirements.txt...",
      "    @REM uv pip install -r \"%~dp0requirements.txt\" -i https://mirrors.aliyun.com/pypi/simple/",
      ") else (",
      "    @REM *Python*",
      "    ECHO 初始化 Python 安装版本 和 依赖库版本",
      "    call python -m pip install -U rich -i https://mirrors.aliyun.com/pypi/simple/",
      ")",
      "ECHO.",
      "ECHO ---------------------------------------------------------------------------------------------------------------------------------------------",
      "ECHO.",
      "@REM !提示! 添加依赖库",
      "@REM TODO: 嵌入式环境可以使用 uv 或者 pip",
      "@REM TODO: 安装环境只能使用 python -m pip",
      "",
      "",
      "$0",
      "",
      "",
      "ECHO.",
      "ECHO ---------------------------------------------------------------------------------------------------------------------------------------------",
      "ECHO.",
      "ECHO 导出依赖库 requirements.txt",
      "if \"!is_lower!\"==\"1\" (",
      "    @REM *python*",
      "    uv pip freeze  > \"%~dp0requirements.txt\"",
      ") else (",
      "    @REM *Python*",
      "    call python -m pip freeze  > requirements.txt",
      ")",
      "ECHO #################################",
      "ECHO #                               #",
      "ECHO #    █████╗ ██╗   ██╗ █████╗    #",
      "ECHO #   ██╔══██╗██║   ██║██╔══██╗   #",
      "ECHO #   ███████║██║   ██║███████║   #",
      "ECHO #   ██╔══██║╚██╗ ██╔╝██╔══██║   #",
      "ECHO #   ██║  ██║ ╚████╔╝ ██║  ██║   #",
      "ECHO #   ╚═╝  ╚═╝  ╚═══╝  ╚═╝  ╚═╝   #",
      "ECHO #                               #",
      "ECHO #################################",
      "endlocal",
      "EXIT /B",
      "@REM *********************************************************************************************************************************************",
      "@REM ! 路径只能包含:  , -, _, . 和 字母 数字 字符",
      ":setting_ruff",
      "配置 Ruff [ruff.toml] [pyproject.toml] 格式化规则 ",
      "# 帮助文档: https://docs.astral.sh/ruff/configuration/",
      "",
      "[lint]",
      "select = [\"E4\", \"E7\", \"E9\", \"F\"]",
      "ignore = [\"Q000\", \"Q001\", \"Q002\", \"F401\", \"F403\", \"F404\", \"F405\", \"E402\"]",
      "fixable = [\"ALL\"]",
      "unfixable = []",
      "dummy-variable-rgx = \"^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$\"",
      "",
      "[format]",
      "quote-style = \"single\"",
      "indent-style = \"space\"",
      "skip-magic-trailing-comma = false",
      "line-ending = \"auto\"",
      "docstring-code-line-length = \"dynamic\"",
      ":end_setting_ruff"
    ],
    "description": ["python-embed 嵌入式环境激活"]
  },
  "python-embed 嵌入式环境启动": {
    "prefix": ["call embed -python"],
    "body": [
      "@ECHO OFF",
      "setlocal enabledelayedexpansion",
      "CD /D \"%~dp0\"",
      "",
      "for /D %%i in (python*embed*) do ( ECHO 修改 python*embed* 目录名为 python && ren \"%%i\" \"python\" )",
      "if not exist \"%~dp0python\" ( ECHO 请先部署 python_embed 环境 && exit /B )",
      "",
      "ECHO 设置python embed 环境变量",
      "set sysPath=%path%",
      "@REM systemPath 设置为系统初始化环境变量",
      "@REM set sysPath=C:\\Program Files (x86)\\Common Files\\Intel\\Shared Libraries\\bin32;C:\\Program Files (x86)\\Common Files\\Intel\\Shared Libraries\\bin;C:\\WINDOWS;C:\\WINDOWS\\system32;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\",
      "set PYTHON_HOME=%~dp0python;%~dp0python\\Scripts",
      "set path=%PYTHON_HOME%;%sysPath%;",
      "ECHO %path%",
      "ECHO python 版本号",
      "call python --version",
      "ECHO pip 版本号",
      "call pip --version",
      "",
      "",
      "CALL \"%~dp0python/python.exe\" ${1:py脚本路径} ${2:参数}",
      "",
      "endlocal",
      ""
    ],
    "description": "python-embed 嵌入式环境启动"
  },
  "python embed 环境变量": {
    "prefix": ["set embed -python"],
    "body": [
      "set sysPath=%path%",
      "@REM systemPath 设置为系统初始化环境变量",
      "@REM set sysPath=C:\\Program Files (x86)\\Common Files\\Intel\\Shared Libraries\\bin32;C:\\Program Files (x86)\\Common Files\\Intel\\Shared Libraries\\bin;C:\\WINDOWS;C:\\WINDOWS\\system32;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\",
      "@REM ECHO 添加临时系统环境变量",
      "",
      "for /D %%i in (python*embed*) do ( ECHO 修改 python*embed* 目录名为 python && ren \"%%i\" \"python\" )",
      "set PYTHON_HOME=%~dp0python;%~dp0python\\Scripts",
      "set path=%PYTHON_HOME%;%sysPath%;",
      "ECHO %path%",
      ""
    ],
    "description": ["python embed 环境变量"]
  }
}
